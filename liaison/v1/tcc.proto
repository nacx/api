// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.
syntax = "proto3";

package tetrate.api.liaison.v1;
option go_package = "github.com/tetrateio/tetrate/api/liaison/v1";

import "google/protobuf/duration.proto";

// Lookup objects associated with each construct
message Metadata {
  // Used for lookups
  string id = 1;
  string description = 2;
  // This is arbitrary key-value pairs used for querying
  map<string, string> tag = 3;
}

// Configuration of a Load balancer
// a load balancer is composed of multiple ports
// The network administrator attaches one or more services to each port
message LoadBalancer {
  Metadata metadata = 1;
  repeated LBPort ports = 2;
  // This is a temporary hack until we figure out the workflow processes and UI related stuff.
  // Until then we figure out the load balancer ports from the service_ids itself.
  // In the UI, this corresponds to a user clicking on a load balancer and adding one or more
  // hosts within that load balancer.
  repeated Service services = 3;
}

message LBPort {
  uint32 port = 1;
  string protocol = 2;
  // if set to true, indicates that TLS settings should be applied
  // to the server on this port
  bool is_secure = 3;
  // Should there be a common tls settings here?
  // set of services exposed on this port
  repeated string service_ids = 4;
}

// Service describes the properties of a service
message Service {
  Metadata metadata = 1;
  string hostname = 2;

  uint32 port = 3;
  // HTTP/HTTPS/TCP/Secure TCP
  // UI should show TLS settings if protocol is HTTPS or secure TCP
  string protocol = 4;

  // We assume that this is a HTTP based service. TLS settings if
  // specified will result in TLS termination depending on the LB port
  // to which this service is assigned.
  TLSSettingsOrId tls = 5;

  // Timeout for HTTP requests made to backends of this service
  google.protobuf.Duration http_request_timeout = 6;

  repeated HttpRuleOrId http_rules = 7;
}

message HttpRuleOrId {
  oneof obj_or_id {
    string id = 1;
    HttpRule http_rule = 2;
  }
}
  
// A single HTTP rule
message HttpRule {
  Metadata metadata = 1;

  // one or more match conditions (OR-ed)
  MatchProgramOrId match_program = 2;
  // one or more mutations to be performed
  ModifyProgramOrId modify_program = 3;

  oneof route_or_redirect {
    Route route = 4;
    Redirect redirect = 5;
  }
}

message MatchProgramOrId {
  oneof obj_or_id {
    string id = 1; // id saved in database
    HttpMatchProgram program = 2;
  }
}

// A program for lack of better name has one or more match expressions
// if any one of them match, the Http rule will apply
message HttpMatchProgram {
  Metadata metadata = 1;
  repeated HttpMatchExpression expressions = 2;
}

// A single match clause to match all aspects of a request
message HttpMatchExpression {
  // URI to match
  StringMatch uri = 1;

  // URI Scheme
  StringMatch scheme = 2;

  // HTTP Method
  StringMatch method = 3;

  // HTTP Authority
  StringMatch authority = 4;

  // The header keys must be lowercase and use hyphen as the separator,
  // e.g. _x-request-id_.
  map<string, StringMatch> headers = 5;
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
message StringMatch {
  oneof match_type {

    // exact string match
    string exact = 1;

    // prefix-based match
    string prefix = 2;

    // ECMAscript style regex-based match
    string regex = 3;
  }
}

message ModifyProgramOrId {
  oneof obj_or_id {
    string id = 1;
    ModifyProgram program = 2;
  }
}

// All modifications to be done on a single request
// like URL rewrite, host rewrite, headers to add/remove/append
message ModifyProgram {
  Metadata metadata = 1;
  repeated Modify modify = 2;
}

// A single modification for a part of a request
message Modify {
  enum What {
    URI = 0;
    AUTHORITY = 1;
    HEADER = 2;
  }

  enum How {
    // this is the only value allowed for uri and authority rewrite
    SET = 0;
    // append and delete are applicable only for headers
    APPEND = 1;
    DELETE = 2;
  }

  What what = 1;
  How how = 2;
  // used only if what is a Header
  string header_name = 3;
  // string to use as replacement for url rewrite/host rewrite or setting headers
  // no value is necessary when deleting the header
  string value = 4;
}

// One or more destinations for the given request
message Route {
  message Destination {
    string host = 1;
    string subset = 2;
    uint32 port = 3; // if not specified, we will pick the closest matching one.
    // sum of all weights should add up to 100
    uint32 weight = 4;
  }
  repeated Destination destinations = 1;
}

message Redirect {
  // On a redirect, overwrite the Path portion of the URL with this
  // value.
  string uri = 1;

  // On a redirect, overwrite the Authority/Host portion of the URL with
  // this value.
  string authority = 2;
}

message TLSSettingsOrId {
  oneof obj_or_id {
    string id = 1;
    TLSSettings tls_settings = 2;
  }
}

message TLSSettings {
  Metadata metadata = 1;
  // For proxies running on VMs, the path to the file holding the
  // server-side TLS certificate to use.
  string server_certificate = 2;

  // For proxies running on VMs, the path to the file holding the
  // server's private key.
  string private_key = 3;

  // For proxies running on VMs, the path to a file containing
  // certificate authority certificates to use in verifying a
  // presented client side certificate for mutual TLS connections.
  string ca_certificates = 4;

  // For proxies running on Kubernetes, the name of the secret that
  // holds the TLS certs. Currently applicable only on Kubernetes.
  // The secret should contain the server certificate and the private
  // key. If mutual TLS is being used, an additional secret with name
  // secretName-cacert should be created with the CaCertificates that
  // the server will use to verify client side certificates.
  string secret_name = 5;
}
