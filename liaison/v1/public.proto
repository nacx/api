// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.
syntax = "proto3";

package tetrate.api.liaison.v1;
option go_package = "github.com/tetrateio/tetrate/api/liaison/v1";

import "google/api/annotations.proto";
import "validate/validate.proto";
import "networking/v1alpha3/gateway.proto";
import "networking/v1alpha3/virtual_service.proto";

service Api {
  // To get ALL available gateways.
  rpc ListGateways(ListGatewaysRequest) returns (ListGatewaysResponse) {
    option (google.api.http) = {
      get: "/api/v1/gateways"
    };
  }

  // To get a gateway.
  rpc GetGateway(GetGatewayRequest) returns (Gateway) {
    option (google.api.http) = {
      get: "/api/v1/gateways/{id}"
    };
  }

  // To get a configuration of a gateway configuration.
  rpc GetGatewayConfiguration(GetGatewayConfigurationRequest) returns (GatewayConfiguration) {
    option (google.api.http) = {
      get: "/api/v1/gateways/{gateway_id}/configurations/{id}"
    };
  }

  // To configure a gateway.
  rpc ConfigureGateway(ConfigureGatewayRequest) returns (Gateway) {
    option (google.api.http) = {
      post: "/api/v1/gateways/{gateway_id}/configurations"
      body: "*"
    };
  }

  rpc ActivateGatewayConfiguration(ActivateGatewayConfigurationRequest) returns (Gateway) {
    option (google.api.http) = {
      post: "/api/v1/gateways/{gateway_id}/activate"
      body: "*"
    };
  }

  // To apply a config from from frontend.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
}

// TODO(dio): page and count, pagination.
message ListGatewaysRequest {}

// TODO(dio): page and count, pagination.
message ListGatewaysResponse {
  repeated Gateway gateways = 1;
}

message GetGatewayRequest {
  string id = 1 [(validate.rules).string.min_bytes = 1];
}

// To get a config.
message GetGatewayConfigurationRequest {
  string id = 1 [(validate.rules).string.min_bytes = 1];
  string gateway_id = 2 [(validate.rules).string.min_bytes = 1];
}

// To configure a gateway.
message ConfigureGatewayRequest {
  string gateway_id = 1 [(validate.rules).string.min_bytes = 1];
  GatewayConfiguration config = 2 [(validate.rules).message.required = true];
  bool activate = 3;
}

message ActivateGatewayConfigurationRequest {
  string gateway_id = 1 [(validate.rules).string.min_bytes = 1];
  string gateway_config_id = 2 [(validate.rules).string.min_bytes = 1];
}

// To apply a resource.
message ApplyRequest {
  message Binding {
    string gateway_id = 1;
    string gateway_config_id = 2;
  }

  oneof config {
    bytes yaml = 1;
    Binding binding = 2;
  }
}

// Apply response.
message ApplyResponse {}


// Gateway is a representation of installed istio-ingressgateway.
message Gateway {
  // This is the ID of an ingressgateway in our database, uuid.
  string id = 1;

  // This is the name of the gateway. namespace/name, string.
  string name = 2;

  // This is the friendly name given by the user.
  string display_name = 3;

  // This is the gateway description.
  string description = 4;

  // This is the zone where the gateway lives.
  string zone = 5;

  // Metadata of a gateway.
  map<string, string> labels = 6;
  map<string, string> annotations = 7;

  // The current config id.
  string current_config_id = 8;

  // List of attached configs.
  repeated string config_ids = 9;
}

// GatewayConfiguration describes configuration object for a Gateway.
message GatewayConfiguration {
  // This is the ID of a configuration.
  string id = 1;

  // This is the name of the configuration. namespace/name, string.
  string name = 2 [(validate.rules).string.min_bytes = 1];

  // This is the friendly name given by the user.
  string display_name = 3;

  // This is the gateway description.
  string description = 4;

  // This is the metadata.
  map<string, string> metadata = 5;

  // This tells where this configuration attached to. A configuration can be attached to multiple
  // gateways.
  repeated string gateway_ids = 6;

  // This is the entry.
  GatewayConfigurationEntry entry = 7 [(validate.rules).message.required = true];
}

// GatewayConfigurationEntry is a mashup of all entries for a gateway configuration.
message GatewayConfigurationEntry {
  GatewayEntry gateway = 1;
  repeated ServerEntry servers = 2;
  repeated VirtualServiceEntry virtual_services = 3;
}

// GatewayEntry tells the definition of a gateway configuration entry.
message GatewayEntry {
  string id = 1;

  // This is the name of the configuration. namespace/name, string.
  string name = 2 [(validate.rules).string.min_bytes = 1];

  // This is the friendly name given by the user.
  string display_name = 3;

  // This is the gateway description.
  string description = 4;

  // This is the metadata.
  map<string, string> metadata = 5;

  map<string, string> selector = 6;
}

// ServerEntry describes the entry for a server configuration entry.
message ServerEntry {
  string id = 1;

  // This is the name of the configuration. namespace/name, string.
  string name = 2 [(validate.rules).string.min_bytes = 1];

  // This is the friendly name given by the user.
  string display_name = 3;

  // This is the gateway description.
  string description = 4;

  // This is the metadata.
  map<string, string> metadata = 5;

  // The entry value.
  istio.networking.v1alpha3.Server value = 6;
}

// VirtualServiceEntry describes the entry for a routing rule configuration entry.
message VirtualServiceEntry {
  string id = 1;

  // This is the name of the configuration. namespace/name, string.
  string name = 2 [(validate.rules).string.min_bytes = 1];

  // This is the friendly name given by the user.
  string display_name = 3;

  // This is the gateway description.
  string description = 4;

  // This is the metadata.
  map<string, string> metadata = 5;

  // The entry value.
  istio.networking.v1alpha3.VirtualService value = 6;
}
