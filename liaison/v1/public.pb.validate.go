// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: public.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ListGatewaysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGatewaysRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListGatewaysRequestValidationError is the validation error returned by
// ListGatewaysRequest.Validate if the designated constraints aren't met.
type ListGatewaysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGatewaysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGatewaysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGatewaysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGatewaysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGatewaysRequestValidationError) ErrorName() string {
	return "ListGatewaysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGatewaysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGatewaysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGatewaysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGatewaysRequestValidationError{}

// Validate checks the field values on ListGatewaysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGatewaysResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGateways() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGatewaysResponseValidationError{
					field:  fmt.Sprintf("Gateways[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGatewaysResponseValidationError is the validation error returned by
// ListGatewaysResponse.Validate if the designated constraints aren't met.
type ListGatewaysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGatewaysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGatewaysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGatewaysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGatewaysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGatewaysResponseValidationError) ErrorName() string {
	return "ListGatewaysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGatewaysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGatewaysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGatewaysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGatewaysResponseValidationError{}

// Validate checks the field values on GetGatewayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetId()) < 1 {
		return GetGatewayRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetGatewayRequestValidationError is the validation error returned by
// GetGatewayRequest.Validate if the designated constraints aren't met.
type GetGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayRequestValidationError) ErrorName() string {
	return "GetGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayRequestValidationError{}

// Validate checks the field values on GetGatewayConfigurationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGatewayConfigurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetId()) < 1 {
		return GetGatewayConfigurationRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetGatewayId()) < 1 {
		return GetGatewayConfigurationRequestValidationError{
			field:  "GatewayId",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// GetGatewayConfigurationRequestValidationError is the validation error
// returned by GetGatewayConfigurationRequest.Validate if the designated
// constraints aren't met.
type GetGatewayConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGatewayConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGatewayConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGatewayConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGatewayConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGatewayConfigurationRequestValidationError) ErrorName() string {
	return "GetGatewayConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGatewayConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGatewayConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGatewayConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGatewayConfigurationRequestValidationError{}

// Validate checks the field values on ConfigureGatewayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfigureGatewayRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetGatewayId()) < 1 {
		return ConfigureGatewayRequestValidationError{
			field:  "GatewayId",
			reason: "value length must be at least 1 bytes",
		}
	}

	if m.GetConfig() == nil {
		return ConfigureGatewayRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigureGatewayRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Activate

	return nil
}

// ConfigureGatewayRequestValidationError is the validation error returned by
// ConfigureGatewayRequest.Validate if the designated constraints aren't met.
type ConfigureGatewayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigureGatewayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigureGatewayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigureGatewayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigureGatewayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigureGatewayRequestValidationError) ErrorName() string {
	return "ConfigureGatewayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigureGatewayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigureGatewayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigureGatewayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigureGatewayRequestValidationError{}

// Validate checks the field values on ActivateGatewayConfigurationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ActivateGatewayConfigurationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetGatewayId()) < 1 {
		return ActivateGatewayConfigurationRequestValidationError{
			field:  "GatewayId",
			reason: "value length must be at least 1 bytes",
		}
	}

	if len(m.GetGatewayConfigId()) < 1 {
		return ActivateGatewayConfigurationRequestValidationError{
			field:  "GatewayConfigId",
			reason: "value length must be at least 1 bytes",
		}
	}

	return nil
}

// ActivateGatewayConfigurationRequestValidationError is the validation error
// returned by ActivateGatewayConfigurationRequest.Validate if the designated
// constraints aren't met.
type ActivateGatewayConfigurationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateGatewayConfigurationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateGatewayConfigurationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateGatewayConfigurationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateGatewayConfigurationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateGatewayConfigurationRequestValidationError) ErrorName() string {
	return "ActivateGatewayConfigurationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateGatewayConfigurationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateGatewayConfigurationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateGatewayConfigurationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateGatewayConfigurationRequestValidationError{}

// Validate checks the field values on ApplyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Config.(type) {

	case *ApplyRequest_Yaml:
		// no validation rules for Yaml

	case *ApplyRequest_Binding_:

		if v, ok := interface{}(m.GetBinding()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ApplyRequestValidationError{
					field:  "Binding",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ApplyRequestValidationError is the validation error returned by
// ApplyRequest.Validate if the designated constraints aren't met.
type ApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRequestValidationError) ErrorName() string { return "ApplyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRequestValidationError{}

// Validate checks the field values on ApplyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ApplyResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ApplyResponseValidationError is the validation error returned by
// ApplyResponse.Validate if the designated constraints aren't met.
type ApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyResponseValidationError) ErrorName() string { return "ApplyResponseValidationError" }

// Error satisfies the builtin error interface
func (e ApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyResponseValidationError{}

// Validate checks the field values on Gateway with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Gateway) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Zone

	// no validation rules for Labels

	// no validation rules for Annotations

	// no validation rules for CurrentConfigId

	return nil
}

// GatewayValidationError is the validation error returned by Gateway.Validate
// if the designated constraints aren't met.
type GatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayValidationError) ErrorName() string { return "GatewayValidationError" }

// Error satisfies the builtin error interface
func (e GatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayValidationError{}

// Validate checks the field values on GatewayConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayConfiguration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetName()) < 1 {
		return GatewayConfigurationValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Metadata

	if m.GetEntry() == nil {
		return GatewayConfigurationValidationError{
			field:  "Entry",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConfigurationValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GatewayConfigurationValidationError is the validation error returned by
// GatewayConfiguration.Validate if the designated constraints aren't met.
type GatewayConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayConfigurationValidationError) ErrorName() string {
	return "GatewayConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayConfigurationValidationError{}

// Validate checks the field values on GatewayConfigurationEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayConfigurationEntry) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGateway()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GatewayConfigurationEntryValidationError{
				field:  "Gateway",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayConfigurationEntryValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVirtualServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GatewayConfigurationEntryValidationError{
					field:  fmt.Sprintf("VirtualServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GatewayConfigurationEntryValidationError is the validation error returned by
// GatewayConfigurationEntry.Validate if the designated constraints aren't met.
type GatewayConfigurationEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayConfigurationEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayConfigurationEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayConfigurationEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayConfigurationEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayConfigurationEntryValidationError) ErrorName() string {
	return "GatewayConfigurationEntryValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayConfigurationEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayConfigurationEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayConfigurationEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayConfigurationEntryValidationError{}

// Validate checks the field values on GatewayEntry with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GatewayEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetName()) < 1 {
		return GatewayEntryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Metadata

	// no validation rules for Selector

	return nil
}

// GatewayEntryValidationError is the validation error returned by
// GatewayEntry.Validate if the designated constraints aren't met.
type GatewayEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayEntryValidationError) ErrorName() string { return "GatewayEntryValidationError" }

// Error satisfies the builtin error interface
func (e GatewayEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayEntryValidationError{}

// Validate checks the field values on ServerEntry with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServerEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetName()) < 1 {
		return ServerEntryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Metadata

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerEntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServerEntryValidationError is the validation error returned by
// ServerEntry.Validate if the designated constraints aren't met.
type ServerEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerEntryValidationError) ErrorName() string { return "ServerEntryValidationError" }

// Error satisfies the builtin error interface
func (e ServerEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerEntryValidationError{}

// Validate checks the field values on VirtualServiceEntry with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VirtualServiceEntry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if len(m.GetName()) < 1 {
		return VirtualServiceEntryValidationError{
			field:  "Name",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Metadata

	if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VirtualServiceEntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VirtualServiceEntryValidationError is the validation error returned by
// VirtualServiceEntry.Validate if the designated constraints aren't met.
type VirtualServiceEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualServiceEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualServiceEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualServiceEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualServiceEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualServiceEntryValidationError) ErrorName() string {
	return "VirtualServiceEntryValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualServiceEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualServiceEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualServiceEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualServiceEntryValidationError{}

// Validate checks the field values on ApplyRequest_Binding with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplyRequest_Binding) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GatewayId

	// no validation rules for GatewayConfigId

	return nil
}

// ApplyRequest_BindingValidationError is the validation error returned by
// ApplyRequest_Binding.Validate if the designated constraints aren't met.
type ApplyRequest_BindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRequest_BindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRequest_BindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRequest_BindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRequest_BindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRequest_BindingValidationError) ErrorName() string {
	return "ApplyRequest_BindingValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyRequest_BindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRequest_Binding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRequest_BindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRequest_BindingValidationError{}
