// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.
syntax = "proto3";

package tetrate.api.liaison.v1alpha1;
option go_package = "github.com/tetrateio/tetrate/api/liaison/v1alpha1";

import "google/api/annotations.proto";
import "networking/v1alpha3/virtual_service.proto";
import "validate/validate.proto";

// A Tetrate-specific wrapper for the Istio VirtualService and is a child of
// the IngressGateway.
message VirtualService {
  // Resource name with format:
  //   "ingressGateway/<service name>/virtualService"
  string name = 1 [(validate.rules).string = {prefix: "ingressGateways/", suffix: "/virtualService"}];

  // The name displayed to end users.
  string display_name = 2;

  // The Istio VirtualService config object specifying service routing rules
  // for this ingress Envoy.
  istio.networking.v1alpha3.VirtualService virtual_service = 3;
}

// REST API for the VirtualService resource.
service VirtualServices {

  // Don't expose the Create/Delete methods because an IngressGateway will
  // always have exactly one VirtualService associated with it. So, the
  // lifecycles of the IngressGateway and VirtualService are the same, i.e. the
  // IngressGateway creation and deletion will also create and delete its
  // VirtualService.

  rpc GetVirtualService(GetVirtualServiceRequest) returns (VirtualService) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=ingressGateways/*/virtualService}"
    };
  }

  rpc UpdateVirtualService(UpdateVirtualServiceRequest) returns (VirtualService) {
    option (google.api.http) = {
      put: "/v1alpha1/{virtual_service.name=ingressGateways/*/virtualService}"
      body: "virtual_service"
    };
  }
}

message GetVirtualServiceRequest {
  string name = 1;
}

message UpdateVirtualServiceRequest {
  VirtualService virtual_service = 1;
}
