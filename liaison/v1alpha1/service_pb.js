/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('./google/api/annotations_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var validate_validate_pb = require('./validate/validate_pb.js');
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.GetServiceRequest', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.ListServicesRequest', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.ListServicesResponse', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.Service', null, global);
goog.exportSymbol('proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.Service = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.Service, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.Service.displayName = 'proto.tetrate.api.liaison.v1alpha1.Service';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.Service.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.Service} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.Service.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.Service}
 */
proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.Service;
  return proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.Service} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.Service}
 */
proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.Service.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.Service} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.Service.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string display_name = 2;
 * @return {string}
 */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tetrate.api.liaison.v1alpha1.Service.prototype.setDisplayName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.ListServicesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.displayName = 'proto.tetrate.api.liaison.v1alpha1.ListServicesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.ListServicesRequest}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.ListServicesRequest;
  return proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.ListServicesRequest}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.repeatedFields_, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.ListServicesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.displayName = 'proto.tetrate.api.liaison.v1alpha1.ListServicesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    servicesList: jspb.Message.toObjectList(msg.getServicesList(),
    proto.tetrate.api.liaison.v1alpha1.Service.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.ListServicesResponse}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.ListServicesResponse;
  return proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.ListServicesResponse}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tetrate.api.liaison.v1alpha1.Service;
      reader.readMessage(value,proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinaryFromReader);
      msg.addServices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.ListServicesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tetrate.api.liaison.v1alpha1.Service.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Service services = 1;
 * @return {!Array<!proto.tetrate.api.liaison.v1alpha1.Service>}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.getServicesList = function() {
  return /** @type{!Array<!proto.tetrate.api.liaison.v1alpha1.Service>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tetrate.api.liaison.v1alpha1.Service, 1));
};


/** @param {!Array<!proto.tetrate.api.liaison.v1alpha1.Service>} value */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.setServicesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tetrate.api.liaison.v1alpha1.Service=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tetrate.api.liaison.v1alpha1.Service}
 */
proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.addServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tetrate.api.liaison.v1alpha1.Service, opt_index);
};


proto.tetrate.api.liaison.v1alpha1.ListServicesResponse.prototype.clearServicesList = function() {
  this.setServicesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.GetServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.displayName = 'proto.tetrate.api.liaison.v1alpha1.GetServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.GetServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.GetServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.GetServiceRequest;
  return proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.GetServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.GetServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.GetServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tetrate.api.liaison.v1alpha1.GetServiceRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.displayName = 'proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && proto.tetrate.api.liaison.v1alpha1.Service.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest;
  return proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tetrate.api.liaison.v1alpha1.Service;
      reader.readMessage(value,proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tetrate.api.liaison.v1alpha1.Service.serializeBinaryToWriter
    );
  }
};


/**
 * optional Service service = 1;
 * @return {?proto.tetrate.api.liaison.v1alpha1.Service}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.getService = function() {
  return /** @type{?proto.tetrate.api.liaison.v1alpha1.Service} */ (
    jspb.Message.getWrapperField(this, proto.tetrate.api.liaison.v1alpha1.Service, 1));
};


/** @param {?proto.tetrate.api.liaison.v1alpha1.Service|undefined} value */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tetrate.api.liaison.v1alpha1.CreateServiceRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.displayName = 'proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    service: (f = msg.getService()) && proto.tetrate.api.liaison.v1alpha1.Service.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest;
  return proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tetrate.api.liaison.v1alpha1.Service;
      reader.readMessage(value,proto.tetrate.api.liaison.v1alpha1.Service.deserializeBinaryFromReader);
      msg.setService(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getService();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tetrate.api.liaison.v1alpha1.Service.serializeBinaryToWriter
    );
  }
};


/**
 * optional Service service = 1;
 * @return {?proto.tetrate.api.liaison.v1alpha1.Service}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.getService = function() {
  return /** @type{?proto.tetrate.api.liaison.v1alpha1.Service} */ (
    jspb.Message.getWrapperField(this, proto.tetrate.api.liaison.v1alpha1.Service, 1));
};


/** @param {?proto.tetrate.api.liaison.v1alpha1.Service|undefined} value */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.setService = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.clearService = function() {
  this.setService(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tetrate.api.liaison.v1alpha1.UpdateServiceRequest.prototype.hasService = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.displayName = 'proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest;
  return proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest}
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tetrate.api.liaison.v1alpha1.DeleteServiceRequest.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.tetrate.api.liaison.v1alpha1);
