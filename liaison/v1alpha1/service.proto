// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.
syntax = "proto3";

package tetrate.api.liaison.v1alpha1;
option go_package = "github.com/tetrateio/tetrate/api/liaison/v1alpha1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

// A service destination for VirtualService routing rules.
message Service {
  // Resource name with format:
  //   "services/<FQDN>"
  // where the FQDN is the 'name' in tetrate.api.inventory.v1.Service.
  string name = 1 [(validate.rules).string.prefix = "services/"];

  // The name displayed to end users.
  string display_name = 2;
}

// REST API for the Service resource.
service Services {
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/services"
    };
  }

  rpc GetService(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=services/*}"
    };
  }

  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1alpha1/services"
      body: "service"
    };
  }

  rpc UpdateService(UpdateServiceRequest) returns (Service) {
    option (google.api.http) = {
      put: "/v1alpha1/{service.name=services/*}"
      body: "service"
    };
  }

  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=services/*}"
    };
  }
}

message ListServicesRequest {
}

message ListServicesResponse {
  repeated Service services = 1;
}

message GetServiceRequest {
  string name = 1;
}

message CreateServiceRequest {
  Service service = 1;
}

message UpdateServiceRequest {
  Service service = 1;
}

message DeleteServiceRequest {
  string name = 1;
}
