// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.
syntax = "proto3";

package tetrate.api.liaison.v1alpha1;
option go_package = "github.com/tetrateio/tetrate/api/liaison/v1alpha1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "networking/v1alpha3/gateway.proto";
import "validate/validate.proto";

// An IngressGateway corresponds to a single ingress Envoy. For simplicity, an
// ingress Envoy is associated with only a single Istio Gateway and a single
// Istio VirtualService, and the two apply to the same hosts.
message IngressGateway {
  // Resource name with format:
  //   "ingressGateways/<service name of ingress Envoy>"
  string name = 1 [(validate.rules).string.prefix = "ingressGateways/"];

  // The name displayed to end users.
  string display_name = 2;

  // The security zone this ingress gateway is within. This is just a label to
  // allow users to create logical groupings of ingress gateways. The intended
  // use case is for the platform owner to create "Security zones" so that
  // network admins can administer only the ingress gateways that they care
  // about.
  string zone = 3;

  // The Istio Gateway config object specifying traffic that this ingress Envoy
  // will allow through.
  istio.networking.v1alpha3.Gateway gateway = 4;
}

// REST API for the IngressGateway resource.
service IngressGateways {
  rpc ListIngressGateways(ListIngressGatewaysRequest) returns (ListIngressGatewaysResponse) {
    option (google.api.http) = {
      get: "/v1alpha1/ingressGateways"
    };
  }

  rpc GetIngressGateway(GetIngressGatewayRequest) returns (IngressGateway) {
    option (google.api.http) = {
      get: "/v1alpha1/{name=ingressGateways/*}"
    };
  }

  rpc CreateIngressGateway(CreateIngressGatewayRequest) returns (IngressGateway) {
    option (google.api.http) = {
      post: "/v1alpha1/ingressGateways"
      body: "ingress_gateway"
    };
  }

  rpc UpdateIngressGateway(UpdateIngressGatewayRequest) returns (IngressGateway) {
    option (google.api.http) = {
      put: "/v1alpha1/{ingress_gateway.name=ingressGateways/*}"
      body: "ingress_gateway"
    };
  }

  rpc DeleteIngressGateway(DeleteIngressGatewayRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1alpha1/{name=ingressGateways/*}"
    };
  }
}

message ListIngressGatewaysRequest {
}

message ListIngressGatewaysResponse {
  repeated IngressGateway ingress_gateways = 1;
}

message GetIngressGatewayRequest {
  string name = 1;
}

message CreateIngressGatewayRequest {
  IngressGateway ingress_gateway = 1;
}

message UpdateIngressGatewayRequest {
  IngressGateway ingress_gateway = 1;
}

message DeleteIngressGatewayRequest {
  string name = 1;
}
