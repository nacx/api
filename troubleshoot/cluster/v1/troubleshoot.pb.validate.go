// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: troubleshoot.proto

package clustertroubleshootv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on ClusterTroubleshootRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterTroubleshootRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	{
		tmp := m.GetTimeout()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ClusterTroubleshootRequestValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	switch m.Request.(type) {

	case *ClusterTroubleshootRequest_GetResources:

		{
			tmp := m.GetGetResources()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ClusterTroubleshootRequestValidationError{
						field:  "GetResources",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ClusterTroubleshootRequestValidationError is the validation error returned
// by ClusterTroubleshootRequest.Validate if the designated constraints aren't met.
type ClusterTroubleshootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterTroubleshootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterTroubleshootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterTroubleshootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterTroubleshootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterTroubleshootRequestValidationError) ErrorName() string {
	return "ClusterTroubleshootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterTroubleshootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterTroubleshootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterTroubleshootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterTroubleshootRequestValidationError{}

// Validate checks the field values on ClusterTroubleshootResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ClusterTroubleshootResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestId

	switch m.Request.(type) {

	case *ClusterTroubleshootResponse_ResourcesStatus:

		{
			tmp := m.GetResourcesStatus()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ClusterTroubleshootResponseValidationError{
						field:  "ResourcesStatus",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ClusterTroubleshootResponseValidationError is the validation error returned
// by ClusterTroubleshootResponse.Validate if the designated constraints
// aren't met.
type ClusterTroubleshootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterTroubleshootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterTroubleshootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterTroubleshootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterTroubleshootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterTroubleshootResponseValidationError) ErrorName() string {
	return "ClusterTroubleshootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterTroubleshootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterTroubleshootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterTroubleshootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterTroubleshootResponseValidationError{}

// Validate checks the field values on GetResourcesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResources() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetResourcesRequestValidationError{
						field:  fmt.Sprintf("Resources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetResourcesRequestValidationError is the validation error returned by
// GetResourcesRequest.Validate if the designated constraints aren't met.
type GetResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResourcesRequestValidationError) ErrorName() string {
	return "GetResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResourcesRequestValidationError{}

// Validate checks the field values on ResourceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResourceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ResourceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		return ResourceRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ResourceRequestValidationError is the validation error returned by
// ResourceRequest.Validate if the designated constraints aren't met.
type ResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceRequestValidationError) ErrorName() string { return "ResourceRequestValidationError" }

// Error satisfies the builtin error interface
func (e ResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceRequestValidationError{}

// Validate checks the field values on ResourcesStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResourcesStatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Resources

	return nil
}

// ResourcesStatusResponseValidationError is the validation error returned by
// ResourcesStatusResponse.Validate if the designated constraints aren't met.
type ResourcesStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourcesStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourcesStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourcesStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourcesStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourcesStatusResponseValidationError) ErrorName() string {
	return "ResourcesStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResourcesStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourcesStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourcesStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourcesStatusResponseValidationError{}

// Validate checks the field values on ResourceStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResourceStatus) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return ResourceStatusValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		return ResourceStatusValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ActiveEndpoints

	// no validation rules for TotalEndpoints

	return nil
}

// ResourceStatusValidationError is the validation error returned by
// ResourceStatus.Validate if the designated constraints aren't met.
type ResourceStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceStatusValidationError) ErrorName() string { return "ResourceStatusValidationError" }

// Error satisfies the builtin error interface
func (e ResourceStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceStatusValidationError{}
