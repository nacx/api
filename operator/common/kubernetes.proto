// Copyright (c) Tetrate, Inc 2020 All Rights Reserved.

syntax = "proto3";

package tetrateio.api.operator.common;
option go_package = "github.com/tetrateio/api/operator/common";

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/api/resource/generated.proto";
import "k8s.io/apimachinery/pkg/util/intstr/generated.proto";

// Almost the same as istio operator kubernetes proto

// Mirrors k8s.io.api.core.v1.ResourceRequirements for unmarshalling.
message Resources {
  map<string, string> limits = 1;
  map<string, string> requests = 2;
}

// Mirrors k8s.io.api.core.v1.
message Affinity {
  NodeAffinity nodeAffinity = 1;
  PodAffinity podAffinity = 2;
  PodAntiAffinity podAntiAffinity = 3;
}

message NodeAffinity {
  NodeSelector requiredDuringSchedulingIgnoredDuringExecution = 1;
  repeated PreferredSchedulingTerm preferredDuringSchedulingIgnoredDuringExecution = 2;
}

message NodeSelector {
  repeated NodeSelectorTerm nodeSelectorTerms = 1;
}

message NodeSelectorTerm {
  repeated NodeSelectorRequirement matchExpressions = 1;
  repeated NodeSelectorRequirement matchFields = 2;
}
message NodeSelectorRequirement {
  string key = 1;
  string operator = 2;
  repeated string values = 3;
}

message PodAffinity {
  repeated PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 1;
  repeated WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 2;
}

message PodAntiAffinity {
  repeated PodAffinityTerm requiredDuringSchedulingIgnoredDuringExecution = 1;
  repeated WeightedPodAffinityTerm preferredDuringSchedulingIgnoredDuringExecution = 2;
}

message PodAffinityTerm {
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector labelSelector = 1;
  repeated string namespaces = 2;
  string topologyKey = 3;
}

message WeightedPodAffinityTerm {
  int32 weight = 1;
  PodAffinityTerm podAffinityTerm = 2;
}

message PreferredSchedulingTerm {
  int32 weight = 1;
  NodeSelectorTerm preference = 2;
}

// Mirrors k8s.io.api.core.v1.Probe for unmarshalling.
message ReadinessProbe {
  ExecAction exec = 1;
  HTTPGetAction httpGet = 2;
  TCPSocketAction tcpSocket = 3;
  int32 initialDelaySeconds = 4;
  int32 timeoutSeconds = 5;
  int32 periodSeconds = 6;
  int32 successThreshold = 7;
  int32 failureThreshold = 8;
}

// Mirrors k8s.io.api.core.v1.ExecAction for unmarshalling.
message ExecAction {
  repeated string command = 1;
}

// Mirrors k8s.io.api.core.v1.HTTPGetAction for unmarshalling.
message HTTPGetAction {
  string path = 1;
  TypeIntOrStringForPB port = 2;
  string host = 3;
  string scheme = 4;
  repeated HTTPHeader httpHeaders = 5;
}

// Mirrors k8s.io.api.core.v1.HTTPHeader for unmarshalling.
message HTTPHeader {
  string name = 1;
  string value = 2;
}

// Mirrors k8s.io.api.core.v1.TCPSocketAction for unmarshalling.
message TCPSocketAction {
  TypeIntOrStringForPB port = 1;
  string host = 2;
}

// Mirrors k8s.io.api.policy.v1beta1.PodDisruptionBudget for unmarshalling.
message PodDisruptionBudgetSpec {
  uint32 minAvailable = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector selector = 2;
  uint32 maxUnavailable = 3;
}

// Mirrors k8s.io.api.apps.v1.DeploymentStrategy for unmarshalling.
message DeploymentStrategy {
  string type = 1;
  RollingUpdateDeployment rollingUpdate = 2;
}

// Mirrors k8s.io.api.apps.v1.RollingUpdateDeployment for unmarshalling.
message RollingUpdateDeployment {
  TypeIntOrStringForPB maxUnavailable = 1;
  TypeIntOrStringForPB maxSurge = 2;
}

message ObjectMeta {
  // From k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta.
  string name = 5;
  string namespace = 6;
}

message EnvVar {
  string name = 1;
  string value = 2;
  EnvVarSource valueFrom = 3;
}

message EnvVarSource {
  ObjectFieldSelector fieldRef = 1;
  ResourceFieldSelector resourceFieldRef = 2;
  ConfigMapKeySelector configMapKeyRef = 3;
  SecretKeySelector secretKeyRef = 4;
}

message ObjectFieldSelector {
  string apiVersion = 1;
  string fieldPath = 2;
}

message ResourceFieldSelector {
  string containerName = 1;
  string resource = 2;
  k8s.io.apimachinery.pkg.api.resource.Quantity divisor = 3;
}

message ConfigMapKeySelector {
  LocalObjectReference localObjectReference = 1;
  string key = 2;
  bool optional = 3;
}

message SecretKeySelector {
  LocalObjectReference localObjectReference = 1;
  string key = 2;
  bool optional = 3;
}

message LocalObjectReference {
  string name = 1;
}

message ServiceSpec {
  repeated ServicePort ports = 1;
  map<string, string> selector = 2;
  string clusterIP = 3;
  string type = 4;
  repeated string externalIPs = 5;
  string sessionAffinity = 7;
  string loadBalancerIP = 8;
  repeated string loadBalancerSourceRanges = 9;
  string externalName = 10;
  string externalTrafficPolicy = 11;
  int32 healthCheckNodePort = 12;
  bool publishNotReadyAddresses = 13;
  SessionAffinityConfig sessionAffinityConfig = 14;
}

message ServicePort {
  string name = 1;
  string protocol = 2;
  int32 port = 3;
  k8s.io.apimachinery.pkg.util.intstr.IntOrString targetPort = 4;
  int32 nodePort = 5;
}
message SessionAffinityConfig {
  ClientIPConfig clientIP = 1;
}
message ClientIPConfig {
  int32 timeoutSeconds = 1;
}
message Toleration {
  string key = 1;
  string operator = 2;
  string value = 3;
  string effect = 4;
  int64 tolerationSeconds = 5;
}

message VolumeClaimTemplate {
  repeated string accessModes = 1;
  Resources resources = 2;
}

// GOTYPE: []map[string]interface{}
message TypeSliceOfMapStringInterface {
}

// GOTYPE: *IntOrStringForPB
message TypeIntOrStringForPB {
}
