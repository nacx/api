// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spm/metadata/v1/metadata.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on EntityRegisterMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EntityRegisterMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for OwnerService

	return nil
}

// EntityRegisterMetadataValidationError is the validation error returned by
// EntityRegisterMetadata.Validate if the designated constraints aren't met.
type EntityRegisterMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityRegisterMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityRegisterMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityRegisterMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityRegisterMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityRegisterMetadataValidationError) ErrorName() string {
	return "EntityRegisterMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e EntityRegisterMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityRegisterMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityRegisterMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityRegisterMetadataValidationError{}

// Validate checks the field values on EntityMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EntityMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// EntityMetadataValidationError is the validation error returned by
// EntityMetadata.Validate if the designated constraints aren't met.
type EntityMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityMetadataValidationError) ErrorName() string { return "EntityMetadataValidationError" }

// Error satisfies the builtin error interface
func (e EntityMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityMetadataValidationError{}

// Validate checks the field values on EntityPingPackage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *EntityPingPackage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	return nil
}

// EntityPingPackageValidationError is the validation error returned by
// EntityPingPackage.Validate if the designated constraints aren't met.
type EntityPingPackageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityPingPackageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityPingPackageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityPingPackageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityPingPackageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityPingPackageValidationError) ErrorName() string {
	return "EntityPingPackageValidationError"
}

// Error satisfies the builtin error interface
func (e EntityPingPackageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityPingPackage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityPingPackageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityPingPackageValidationError{}

// Validate checks the field values on TSBDefaultResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TSBDefaultResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TSBDefaultRespValidationError is the validation error returned by
// TSBDefaultResp.Validate if the designated constraints aren't met.
type TSBDefaultRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TSBDefaultRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TSBDefaultRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TSBDefaultRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TSBDefaultRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TSBDefaultRespValidationError) ErrorName() string { return "TSBDefaultRespValidationError" }

// Error satisfies the builtin error interface
func (e TSBDefaultRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTSBDefaultResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TSBDefaultRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TSBDefaultRespValidationError{}

// Validate checks the field values on InstanceListCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InstanceListCondition) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetDuration()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return InstanceListConditionValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for ServiceId

	return nil
}

// InstanceListConditionValidationError is the validation error returned by
// InstanceListCondition.Validate if the designated constraints aren't met.
type InstanceListConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceListConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceListConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceListConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceListConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceListConditionValidationError) ErrorName() string {
	return "InstanceListConditionValidationError"
}

// Error satisfies the builtin error interface
func (e InstanceListConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceListCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceListConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceListConditionValidationError{}

// Validate checks the field values on EntityList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *EntityList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return EntityListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// EntityListValidationError is the validation error returned by
// EntityList.Validate if the designated constraints aren't met.
type EntityListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityListValidationError) ErrorName() string { return "EntityListValidationError" }

// Error satisfies the builtin error interface
func (e EntityListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityListValidationError{}

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Entity) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

// Validate checks the field values on Duration with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Duration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Start

	// no validation rules for End

	// no validation rules for Step

	return nil
}

// DurationValidationError is the validation error returned by
// Duration.Validate if the designated constraints aren't met.
type DurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DurationValidationError) ErrorName() string { return "DurationValidationError" }

// Error satisfies the builtin error interface
func (e DurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DurationValidationError{}
