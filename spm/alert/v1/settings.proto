// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

package tetrate.api.tcc.spm.alert.v1;
option go_package = "github.com/tetrateio/tetrate/api/spm/alert/v1";

import "google/protobuf/duration.proto";
import "validate/validate.proto";

// Settings
//
// A set of alert rules.
message Settings {
  map<string, Rule> rules = 1;

  // Recipient list at application level. Support list of emails as recipient.
  repeated Recipient recipients = 2;
}

// Alert recipient.
message Recipient {
  string email = 1 [(validate.rules).string.email = true];
}

// Rule
//
// An alert rule defines the condition when an alert should be triggered.
message Rule {
  // Short ID for this rule.
  // Id is generated by client. spmserver will add suffix "_rule" before sending rule to skywalking
  // and remove it when receiving message.
  string id = 1;

  // clang-format off

  // Metric name to be watched. Metric name is defined in
  // https://github.com/tetrateio/tetrate/blob/master/install/helm/tcc/charts/oap/templates/01-config.yml#L125-L139.
  string metric_name = 2 [(validate.rules).string = {in: 
    ["service_resp_time", "service_sla", "service_cpm", "service_apdex",
    "service_p99", "service_p95", "service_p90", "service_p75", "service_p50",
    "service_2xx", "service_4xx", "service_5xx", "service_percentile"]}];
  // clang-format on

  // clang-format off

  // The threshold value of a metric; depends on the operator, it triggers alert if the metric value
  // is not match. 
  uint32 threshold = 3 [(validate.rules).uint32 = { gte: 0, lte: 100 }];
  // clang-format on

  // The operator. E.g. greater-than, lower-than and equal.
  Operator operator = 4;

  // The period of an alert rule should be checked.
  google.protobuf.Duration period = 5 [(validate.rules).duration.lt.seconds = 1];

  // The number of "violation" in a certain period.
  uint32 count = 6 [(validate.rules).uint32.gte = 0];

  // Keep silence for some amount of time after an alarm is triggered. By default, the value is the
  // same as period.
  google.protobuf.Duration silence_period = 7;

  // Friendly name for a rule.
  string display_name = 8;

  // Whether this rule is enabled or disabled. Default to false or disabled.
  bool enabled = 9;

  // Included services in this rule. This field is deprecated. Use included_services that has
  // validation.
  repeated string include_services = 10 [deprecated = true];

  // Excluded services from this rule. This field is deprecated. Use excluded_services that has
  // validation.
  repeated string exclude_services = 11 [deprecated = true];

  // Included services in this rule. This will be translated into include-names in skywalking
  // configuration response.
  repeated Service included_services = 12 [(validate.rules).repeated .min_items = 1];

  // Excluded services from this rule. This will be translated into exclude-names in skywalking
  // configuration response.
  // spmserver will omit this from response if empty.
  repeated Service excluded_services = 13;

  // Service to be included or excluded.
  message Service {
    // Service name. Service name follows SPM noun.
    // https://github.com/tetrateio/SPM/blob/spm2/doc/spm-nouns.md#mapping Example:
    // subset|service|namespace|cluster|env, *|service|namespace|*|env,
    // subset|service|namespace|*|env. Allowed characters are 0-9, a-z, .~_*-.
    string name = 1 [(validate.rules).string.pattern =
                         "(?i)^[0-9a-z.~_*\\-]+\\|[0-9a-z.~_*\\-]+\\|[0-9a-z.~_*\\-]+\\|[0-9a-z.~_*"
                         "\\-]+\\|[0-9a-z.~_*\\-]+$"];
  }

  // Alert severity. Default to MEDIUM.
  Severity severity = 14;

  // Thresholds value as array to set multiple threshold values.
  // If this value is set, single value threshold will be ignored
  repeated AlertThreshold thresholds = 15 [(validate.rules).repeated = {
    min_items: 0,
    max_items: 5
  }];

  message AlertThreshold {
    // The threshold value of a metric; depends on the operator, it triggers alert if the metric
    // value is not match.
    string value = 1 [(validate.rules).string.min_len = 1];
  }
}

// Operator
//
// Possible operators to "judge" the current metric value against a particular threshold value.
enum Operator {
  EQ = 0;
  GT = 1;
  LT = 2;
  GTE = 3;
  LTE = 4;
}

// Severity
//
// Alert severity level from Informational to Critical.
// ALL_SEVERITIES is used for list Alert request to include all values.
enum Severity {
  MEDIUM = 0;
  CRITICAL = 1;
  HIGH = 2;
  LOW = 3;
  INFORMATIONAL = 4;
  ALL_SEVERITIES = 5;
}
