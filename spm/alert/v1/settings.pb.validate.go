// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spm/alert/v1/settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Settings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Rules

	for idx, item := range m.GetRecipients() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SettingsValidationError{
						field:  fmt.Sprintf("Recipients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SettingsValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Notification) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Condition

	for idx, item := range m.GetRecipients() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return NotificationValidationError{
						field:  fmt.Sprintf("Recipients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for Enabled

	return nil
}

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on Recipient with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Recipient) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	return nil
}

// RecipientValidationError is the validation error returned by
// Recipient.Validate if the designated constraints aren't met.
type RecipientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecipientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecipientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecipientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecipientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecipientValidationError) ErrorName() string { return "RecipientValidationError" }

// Error satisfies the builtin error interface
func (e RecipientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecipient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecipientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecipientValidationError{}

// Validate checks the field values on Rule with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Rule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for MetricName

	// no validation rules for Threshold

	// no validation rules for Operator

	{
		tmp := m.GetPeriod()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  "Period",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Count

	{
		tmp := m.GetSilencePeriod()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RuleValidationError{
					field:  "SilencePeriod",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for DisplayName

	// no validation rules for Enabled

	for idx, item := range m.GetIncludedServices() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RuleValidationError{
						field:  fmt.Sprintf("IncludedServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetExcludedServices() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RuleValidationError{
						field:  fmt.Sprintf("ExcludedServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for Severity

	for idx, item := range m.GetThresholds() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RuleValidationError{
						field:  fmt.Sprintf("Thresholds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// RuleValidationError is the validation error returned by Rule.Validate if the
// designated constraints aren't met.
type RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuleValidationError) ErrorName() string { return "RuleValidationError" }

// Error satisfies the builtin error interface
func (e RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuleValidationError{}

// Validate checks the field values on Rule_Service with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Rule_Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// Rule_ServiceValidationError is the validation error returned by
// Rule_Service.Validate if the designated constraints aren't met.
type Rule_ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Rule_ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Rule_ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Rule_ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Rule_ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Rule_ServiceValidationError) ErrorName() string { return "Rule_ServiceValidationError" }

// Error satisfies the builtin error interface
func (e Rule_ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule_Service.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Rule_ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Rule_ServiceValidationError{}

// Validate checks the field values on Rule_AlertThreshold with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Rule_AlertThreshold) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	return nil
}

// Rule_AlertThresholdValidationError is the validation error returned by
// Rule_AlertThreshold.Validate if the designated constraints aren't met.
type Rule_AlertThresholdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Rule_AlertThresholdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Rule_AlertThresholdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Rule_AlertThresholdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Rule_AlertThresholdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Rule_AlertThresholdValidationError) ErrorName() string {
	return "Rule_AlertThresholdValidationError"
}

// Error satisfies the builtin error interface
func (e Rule_AlertThresholdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRule_AlertThreshold.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Rule_AlertThresholdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Rule_AlertThresholdValidationError{}
