// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spm/notification/v1/alert_log.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_ALL    Status = 0
	Status_UNREAD Status = 1
	Status_READ   Status = 2
)

var Status_name = map[int32]string{
	0: "ALL",
	1: "UNREAD",
	2: "READ",
}

var Status_value = map[string]int32{
	"ALL":    0,
	"UNREAD": 1,
	"READ":   2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{0}
}

// AlertLog
//
// Message from alert backend.
type AlertLog struct {
	// Alert id. auto generated.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Time when the alert log was triggered.
	LastTriggered *types.Timestamp `protobuf:"bytes,2,opt,name=last_triggered,json=lastTriggered,proto3" json:"last_triggered,omitempty"`
	// Rule name that trigger this log.
	RuleName string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Application name where the rule belong to.
	Application string `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	// Alert log message.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// Read status of alert.
	Read bool `protobuf:"varint,6,opt,name=read,proto3" json:"read,omitempty"`
	// Key value pairs with additional information for the alert log.
	Properties           map[string]string `protobuf:"bytes,9,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AlertLog) Reset()         { *m = AlertLog{} }
func (m *AlertLog) String() string { return proto.CompactTextString(m) }
func (*AlertLog) ProtoMessage()    {}
func (*AlertLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{0}
}
func (m *AlertLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertLog.Merge(m, src)
}
func (m *AlertLog) XXX_Size() int {
	return m.Size()
}
func (m *AlertLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertLog.DiscardUnknown(m)
}

var xxx_messageInfo_AlertLog proto.InternalMessageInfo

func (m *AlertLog) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AlertLog) GetLastTriggered() *types.Timestamp {
	if m != nil {
		return m.LastTriggered
	}
	return nil
}

func (m *AlertLog) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *AlertLog) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *AlertLog) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AlertLog) GetRead() bool {
	if m != nil {
		return m.Read
	}
	return false
}

func (m *AlertLog) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Request to get the alert logs.
type ListAlertLogsRequest struct {
	Status               Status   `protobuf:"varint,2,opt,name=status,proto3,enum=tetrateio.api.tcc.spm.notification.v1.Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAlertLogsRequest) Reset()         { *m = ListAlertLogsRequest{} }
func (m *ListAlertLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAlertLogsRequest) ProtoMessage()    {}
func (*ListAlertLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{1}
}
func (m *ListAlertLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertLogsRequest.Merge(m, src)
}
func (m *ListAlertLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertLogsRequest proto.InternalMessageInfo

func (m *ListAlertLogsRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_ALL
}

// The list of alert logs.
type ListAlertLogsResponse struct {
	AlertLogs            []*AlertLog `protobuf:"bytes,1,rep,name=alert_logs,json=alertLogs,proto3" json:"alert_logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListAlertLogsResponse) Reset()         { *m = ListAlertLogsResponse{} }
func (m *ListAlertLogsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAlertLogsResponse) ProtoMessage()    {}
func (*ListAlertLogsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{2}
}
func (m *ListAlertLogsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertLogsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertLogsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertLogsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertLogsResponse.Merge(m, src)
}
func (m *ListAlertLogsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertLogsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertLogsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertLogsResponse proto.InternalMessageInfo

func (m *ListAlertLogsResponse) GetAlertLogs() []*AlertLog {
	if m != nil {
		return m.AlertLogs
	}
	return nil
}

// Request to delete the alert logs.
type DeleteAlertLogsRequest struct {
	// Log ids to delete.
	Ids                  []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAlertLogsRequest) Reset()         { *m = DeleteAlertLogsRequest{} }
func (m *DeleteAlertLogsRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAlertLogsRequest) ProtoMessage()    {}
func (*DeleteAlertLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{3}
}
func (m *DeleteAlertLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAlertLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAlertLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAlertLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAlertLogsRequest.Merge(m, src)
}
func (m *DeleteAlertLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAlertLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAlertLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAlertLogsRequest proto.InternalMessageInfo

func (m *DeleteAlertLogsRequest) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// Request to update alert logs read status.
type UpdateAlertLogReadStatusRequest struct {
	// Log ids to update.
	Ids                  []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAlertLogReadStatusRequest) Reset()         { *m = UpdateAlertLogReadStatusRequest{} }
func (m *UpdateAlertLogReadStatusRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAlertLogReadStatusRequest) ProtoMessage()    {}
func (*UpdateAlertLogReadStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fe214db06e2ae48, []int{4}
}
func (m *UpdateAlertLogReadStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAlertLogReadStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAlertLogReadStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAlertLogReadStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAlertLogReadStatusRequest.Merge(m, src)
}
func (m *UpdateAlertLogReadStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAlertLogReadStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAlertLogReadStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAlertLogReadStatusRequest proto.InternalMessageInfo

func (m *UpdateAlertLogReadStatusRequest) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterEnum("tetrateio.api.tcc.spm.notification.v1.Status", Status_name, Status_value)
	proto.RegisterType((*AlertLog)(nil), "tetrateio.api.tcc.spm.notification.v1.AlertLog")
	proto.RegisterMapType((map[string]string)(nil), "tetrateio.api.tcc.spm.notification.v1.AlertLog.PropertiesEntry")
	proto.RegisterType((*ListAlertLogsRequest)(nil), "tetrateio.api.tcc.spm.notification.v1.ListAlertLogsRequest")
	proto.RegisterType((*ListAlertLogsResponse)(nil), "tetrateio.api.tcc.spm.notification.v1.ListAlertLogsResponse")
	proto.RegisterType((*DeleteAlertLogsRequest)(nil), "tetrateio.api.tcc.spm.notification.v1.DeleteAlertLogsRequest")
	proto.RegisterType((*UpdateAlertLogReadStatusRequest)(nil), "tetrateio.api.tcc.spm.notification.v1.UpdateAlertLogReadStatusRequest")
}

func init() {
	proto.RegisterFile("spm/notification/v1/alert_log.proto", fileDescriptor_3fe214db06e2ae48)
}

var fileDescriptor_3fe214db06e2ae48 = []byte{
	// 689 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x41, 0x6f, 0xd3, 0x4a,
	0x10, 0xee, 0x3a, 0x69, 0x9a, 0x4c, 0xd5, 0x26, 0x6f, 0xd5, 0xd7, 0x5a, 0xe9, 0x53, 0x9b, 0xfa,
	0xbd, 0x27, 0x42, 0x44, 0x6d, 0x35, 0xbd, 0xa0, 0x40, 0x85, 0x12, 0x35, 0x5c, 0x88, 0x2a, 0xe4,
	0xb6, 0x17, 0x24, 0x14, 0x6d, 0x93, 0xa9, 0x59, 0x61, 0x7b, 0x8d, 0x77, 0x13, 0x91, 0x2b, 0xe2,
	0xc4, 0x95, 0x0b, 0x17, 0x4e, 0xfc, 0x19, 0x8e, 0x48, 0xdc, 0x11, 0xaa, 0xf8, 0x15, 0x3d, 0x21,
	0xdb, 0x71, 0x94, 0xa6, 0xad, 0x08, 0xdc, 0x66, 0x3d, 0xf3, 0x7d, 0xf3, 0xed, 0x37, 0xeb, 0x81,
	0x7f, 0x65, 0xe0, 0x59, 0xbe, 0x50, 0xfc, 0x9c, 0xf7, 0x98, 0xe2, 0xc2, 0xb7, 0x86, 0x7b, 0x16,
	0x73, 0x31, 0x54, 0x5d, 0x57, 0x38, 0x66, 0x10, 0x0a, 0x25, 0xe8, 0xff, 0x0a, 0x55, 0xc8, 0x14,
	0x72, 0x61, 0xb2, 0x80, 0x9b, 0xaa, 0xd7, 0x33, 0x65, 0xe0, 0x99, 0xd3, 0x30, 0x73, 0xb8, 0x57,
	0xfe, 0xc7, 0x11, 0xc2, 0x71, 0xd1, 0x62, 0x01, 0xb7, 0x98, 0xef, 0x0b, 0x15, 0x67, 0x64, 0x42,
	0x52, 0xde, 0x1c, 0x67, 0xe3, 0xd3, 0xd9, 0xe0, 0xdc, 0x42, 0x2f, 0x50, 0xa3, 0x71, 0x72, 0x7b,
	0x36, 0xa9, 0xb8, 0x87, 0x52, 0x31, 0x2f, 0x18, 0x17, 0x34, 0x1d, 0xae, 0x5e, 0x0c, 0xce, 0xcc,
	0x9e, 0xf0, 0x2c, 0xf4, 0x87, 0x62, 0x14, 0x84, 0xe2, 0xf5, 0x28, 0xa9, 0xef, 0xed, 0x3a, 0xe8,
	0xef, 0x0e, 0x99, 0xcb, 0xfb, 0x4c, 0xa1, 0x75, 0x2d, 0x48, 0x28, 0x8c, 0x0f, 0x19, 0xc8, 0x37,
	0xa3, 0x9b, 0x75, 0x84, 0x43, 0x37, 0x40, 0xe3, 0x7d, 0x9d, 0x54, 0x48, 0x35, 0xdb, 0x5a, 0xba,
	0x6c, 0x65, 0xeb, 0x5a, 0x75, 0xc1, 0xd6, 0x78, 0x9f, 0x3e, 0x81, 0x55, 0x97, 0x49, 0xd5, 0x55,
	0x21, 0x77, 0x1c, 0x0c, 0xb1, 0xaf, 0x6b, 0x15, 0x52, 0x5d, 0xae, 0x97, 0xcd, 0x44, 0xa2, 0x99,
	0x4a, 0x34, 0x4f, 0x52, 0x89, 0xad, 0xfc, 0x65, 0x6b, 0xf1, 0x1d, 0xd1, 0x4a, 0xc4, 0x5e, 0x89,
	0xb0, 0x27, 0x29, 0x94, 0xfe, 0x07, 0x85, 0x70, 0xe0, 0x62, 0xd7, 0x67, 0x1e, 0xea, 0x99, 0x0a,
	0xa9, 0x16, 0xe2, 0x66, 0x61, 0x54, 0x9a, 0x8f, 0x32, 0x47, 0xcc, 0x43, 0x7a, 0x17, 0x96, 0x59,
	0x10, 0xb8, 0x63, 0x27, 0xf5, 0xec, 0xd5, 0xba, 0xe9, 0x1c, 0xdd, 0x81, 0x25, 0x0f, 0xa5, 0x64,
	0x0e, 0xea, 0x8b, 0x57, 0xcb, 0xd2, 0xef, 0x94, 0x42, 0x36, 0x44, 0xd6, 0xd7, 0x73, 0x15, 0x52,
	0xcd, 0xdb, 0x71, 0x4c, 0xbb, 0x00, 0x41, 0x28, 0x02, 0x0c, 0x15, 0x47, 0xa9, 0x17, 0x2a, 0x99,
	0xea, 0x72, 0xfd, 0x91, 0x39, 0xd7, 0x54, 0xcd, 0xd4, 0x32, 0xf3, 0xe9, 0x84, 0xa1, 0xed, 0xab,
	0x70, 0x64, 0x4f, 0x51, 0x96, 0x0f, 0xa0, 0x38, 0x93, 0xa6, 0x25, 0xc8, 0xbc, 0xc4, 0x51, 0x6c,
	0x71, 0xc1, 0x8e, 0x42, 0xba, 0x06, 0x8b, 0x43, 0xe6, 0x0e, 0x30, 0x76, 0xb4, 0x60, 0x27, 0x87,
	0x86, 0x76, 0x9f, 0x18, 0xcf, 0x61, 0xad, 0xc3, 0xa5, 0x4a, 0x5b, 0x49, 0x1b, 0x5f, 0x0d, 0x50,
	0x2a, 0xda, 0x86, 0x9c, 0x54, 0x4c, 0x0d, 0x64, 0x0c, 0x59, 0xad, 0xef, 0xce, 0xa9, 0xf9, 0x38,
	0x06, 0xd9, 0x63, 0xb0, 0xe1, 0xc0, 0xdf, 0x33, 0xf4, 0x32, 0x10, 0xbe, 0x44, 0x7a, 0x04, 0x30,
	0x79, 0xeb, 0x52, 0x27, 0xb1, 0x2f, 0xd6, 0x6f, 0xfa, 0x62, 0x17, 0x58, 0xca, 0x6b, 0xd4, 0x60,
	0xfd, 0x10, 0x5d, 0x54, 0x78, 0xed, 0x26, 0x25, 0xc8, 0xf0, 0x7e, 0xd2, 0x22, 0x6b, 0x47, 0xa1,
	0xb1, 0x0f, 0xdb, 0xa7, 0x41, 0xf4, 0x3c, 0x27, 0x44, 0xc8, 0xfa, 0x63, 0xe1, 0xb7, 0x81, 0x6a,
	0x77, 0x20, 0x97, 0x94, 0xd0, 0x25, 0xc8, 0x34, 0x3b, 0x9d, 0xd2, 0x02, 0x05, 0xc8, 0x9d, 0x1e,
	0xd9, 0xed, 0xe6, 0x61, 0x89, 0xd0, 0x3c, 0x64, 0xe3, 0x48, 0xab, 0x7f, 0xcb, 0x40, 0x31, 0x25,
	0x3e, 0xc6, 0x70, 0xc8, 0x7b, 0x48, 0x3f, 0x11, 0x58, 0xb9, 0xe2, 0x03, 0x7d, 0x30, 0xe7, 0x5d,
	0x6f, 0x1a, 0x4e, 0xf9, 0xe1, 0x9f, 0x81, 0x13, 0xeb, 0x8d, 0x8d, 0x37, 0x5f, 0x7f, 0xbc, 0xd7,
	0xfe, 0xa2, 0xc5, 0x68, 0xe1, 0x44, 0xf6, 0x27, 0x5b, 0x47, 0xd2, 0xb7, 0x04, 0x8a, 0x33, 0x26,
	0xd2, 0x83, 0x39, 0x5b, 0xdd, 0x6c, 0x7e, 0x79, 0xfd, 0xda, 0xbf, 0xdb, 0x8e, 0x76, 0x8f, 0x51,
	0x8e, 0x35, 0xac, 0xd5, 0x66, 0x35, 0x34, 0x48, 0x8d, 0x7e, 0x24, 0xa0, 0xdf, 0x36, 0x1f, 0xfa,
	0x78, 0x4e, 0x3d, 0xbf, 0x18, 0xf0, 0xad, 0xc2, 0x76, 0x62, 0x61, 0x9b, 0xc6, 0xfa, 0x8c, 0x30,
	0x2b, 0x79, 0xd0, 0x0d, 0x52, 0x6b, 0x35, 0x3e, 0x5f, 0x6c, 0x91, 0x2f, 0x17, 0x5b, 0xe4, 0xfb,
	0xc5, 0x16, 0x79, 0x76, 0x6f, 0x6a, 0x3d, 0x4e, 0xa4, 0xc5, 0x8b, 0xf8, 0x86, 0xfd, 0x7e, 0x96,
	0x8b, 0xdb, 0xed, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xa8, 0xe5, 0x53, 0xfd, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlertLogServiceClient is the client API for AlertLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertLogServiceClient interface {
	// List alert logs.
	// Use 'status' parameter to get only unread alert. this can be used to show recent alert count.
	ListAlertLogs(ctx context.Context, in *ListAlertLogsRequest, opts ...grpc.CallOption) (*ListAlertLogsResponse, error)
	// Delete alert logs. This will remove alert logs from storage.
	DeleteAlertLogs(ctx context.Context, in *DeleteAlertLogsRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Update alert logs read status.
	UpdateAlertLogReadStatus(ctx context.Context, in *UpdateAlertLogReadStatusRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type alertLogServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlertLogServiceClient(cc *grpc.ClientConn) AlertLogServiceClient {
	return &alertLogServiceClient{cc}
}

func (c *alertLogServiceClient) ListAlertLogs(ctx context.Context, in *ListAlertLogsRequest, opts ...grpc.CallOption) (*ListAlertLogsResponse, error) {
	out := new(ListAlertLogsResponse)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/ListAlertLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertLogServiceClient) DeleteAlertLogs(ctx context.Context, in *DeleteAlertLogsRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/DeleteAlertLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertLogServiceClient) UpdateAlertLogReadStatus(ctx context.Context, in *UpdateAlertLogReadStatusRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/UpdateAlertLogReadStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertLogServiceServer is the server API for AlertLogService service.
type AlertLogServiceServer interface {
	// List alert logs.
	// Use 'status' parameter to get only unread alert. this can be used to show recent alert count.
	ListAlertLogs(context.Context, *ListAlertLogsRequest) (*ListAlertLogsResponse, error)
	// Delete alert logs. This will remove alert logs from storage.
	DeleteAlertLogs(context.Context, *DeleteAlertLogsRequest) (*types.Empty, error)
	// Update alert logs read status.
	UpdateAlertLogReadStatus(context.Context, *UpdateAlertLogReadStatusRequest) (*types.Empty, error)
}

// UnimplementedAlertLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAlertLogServiceServer struct {
}

func (*UnimplementedAlertLogServiceServer) ListAlertLogs(ctx context.Context, req *ListAlertLogsRequest) (*ListAlertLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlertLogs not implemented")
}
func (*UnimplementedAlertLogServiceServer) DeleteAlertLogs(ctx context.Context, req *DeleteAlertLogsRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlertLogs not implemented")
}
func (*UnimplementedAlertLogServiceServer) UpdateAlertLogReadStatus(ctx context.Context, req *UpdateAlertLogReadStatusRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlertLogReadStatus not implemented")
}

func RegisterAlertLogServiceServer(s *grpc.Server, srv AlertLogServiceServer) {
	s.RegisterService(&_AlertLogService_serviceDesc, srv)
}

func _AlertLogService_ListAlertLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertLogServiceServer).ListAlertLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/ListAlertLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertLogServiceServer).ListAlertLogs(ctx, req.(*ListAlertLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertLogService_DeleteAlertLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertLogServiceServer).DeleteAlertLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/DeleteAlertLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertLogServiceServer).DeleteAlertLogs(ctx, req.(*DeleteAlertLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertLogService_UpdateAlertLogReadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertLogReadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertLogServiceServer).UpdateAlertLogReadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.spm.notification.v1.AlertLogService/UpdateAlertLogReadStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertLogServiceServer).UpdateAlertLogReadStatus(ctx, req.(*UpdateAlertLogReadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tcc.spm.notification.v1.AlertLogService",
	HandlerType: (*AlertLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlertLogs",
			Handler:    _AlertLogService_ListAlertLogs_Handler,
		},
		{
			MethodName: "DeleteAlertLogs",
			Handler:    _AlertLogService_DeleteAlertLogs_Handler,
		},
		{
			MethodName: "UpdateAlertLogReadStatus",
			Handler:    _AlertLogService_UpdateAlertLogReadStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spm/notification/v1/alert_log.proto",
}

func (m *AlertLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAlertLog(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlertLog(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlertLog(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Read {
		i--
		if m.Read {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintAlertLog(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAlertLog(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintAlertLog(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x1a
	}
	if m.LastTriggered != nil {
		{
			size, err := m.LastTriggered.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlertLog(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAlertLog(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintAlertLog(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertLogsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertLogsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertLogsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AlertLogs) > 0 {
		for iNdEx := len(m.AlertLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlertLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlertLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAlertLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAlertLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAlertLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA3 := make([]byte, len(m.Ids)*10)
		var j2 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintAlertLog(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAlertLogReadStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAlertLogReadStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAlertLogReadStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ids) > 0 {
		dAtA5 := make([]byte, len(m.Ids)*10)
		var j4 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintAlertLog(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlertLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlertLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlertLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAlertLog(uint64(m.Id))
	}
	if m.LastTriggered != nil {
		l = m.LastTriggered.Size()
		n += 1 + l + sovAlertLog(uint64(l))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovAlertLog(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAlertLog(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAlertLog(uint64(l))
	}
	if m.Read {
		n += 2
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlertLog(uint64(len(k))) + 1 + len(v) + sovAlertLog(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlertLog(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovAlertLog(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertLogsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AlertLogs) > 0 {
		for _, e := range m.AlertLogs {
			l = e.Size()
			n += 1 + l + sovAlertLog(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAlertLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAlertLog(uint64(e))
		}
		n += 1 + sovAlertLog(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAlertLogReadStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAlertLog(uint64(e))
		}
		n += 1 + sovAlertLog(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlertLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlertLog(x uint64) (n int) {
	return sovAlertLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTriggered", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastTriggered == nil {
				m.LastTriggered = &types.Timestamp{}
			}
			if err := m.LastTriggered.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Read = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlertLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlertLog
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlertLog
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlertLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlertLog
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAlertLog
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlertLog(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAlertLog
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertLogsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertLogsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertLogsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlertLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlertLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertLogs = append(m.AlertLogs, &AlertLog{})
			if err := m.AlertLogs[len(m.AlertLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlertLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAlertLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAlertLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAlertLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlertLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlertLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlertLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAlertLogReadStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAlertLogReadStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAlertLogReadStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlertLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlertLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlertLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlertLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlertLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlertLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlertLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlertLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlertLog
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAlertLog
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlertLog
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlertLog(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAlertLog
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlertLog = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlertLog   = fmt.Errorf("proto: integer overflow")
)
