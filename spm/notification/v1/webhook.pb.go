// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webhook.proto

package v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AlertMessageRequest based on
// https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/backend-alarm.md#webhook
type AlertMessage struct {
	// All scopes are defined in org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.
	ScopeId int32  `protobuf:"varint,1,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// Target scope entity name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of scope entity, matched the name.
	Id0 int32 `protobuf:"varint,4,opt,name=id0,proto3" json:"id0,omitempty"`
	// Not used today.
	Id1 int32 `protobuf:"varint,5,opt,name=id1,proto3" json:"id1,omitempty"`
	// The rule name you configured in alarm-settings
	RuleName string `protobuf:"bytes,6,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	// Alarm text message.
	AlarmMessage string `protobuf:"bytes,7,opt,name=alarmMessage,proto3" json:"alarmMessage,omitempty"`
	// Alarm time measured in milliseconds, between the current time and midnight, January 1, 1970
	// UTC.
	StartTime            int64    `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AlertMessage) Reset()         { *m = AlertMessage{} }
func (m *AlertMessage) String() string { return proto.CompactTextString(m) }
func (*AlertMessage) ProtoMessage()    {}
func (*AlertMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a0479a603100288, []int{0}
}
func (m *AlertMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertMessage.Merge(m, src)
}
func (m *AlertMessage) XXX_Size() int {
	return m.Size()
}
func (m *AlertMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AlertMessage proto.InternalMessageInfo

func (m *AlertMessage) GetScopeId() int32 {
	if m != nil {
		return m.ScopeId
	}
	return 0
}

func (m *AlertMessage) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AlertMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlertMessage) GetId0() int32 {
	if m != nil {
		return m.Id0
	}
	return 0
}

func (m *AlertMessage) GetId1() int32 {
	if m != nil {
		return m.Id1
	}
	return 0
}

func (m *AlertMessage) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *AlertMessage) GetAlarmMessage() string {
	if m != nil {
		return m.AlarmMessage
	}
	return ""
}

func (m *AlertMessage) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func init() {
	proto.RegisterType((*AlertMessage)(nil), "tetrate.api.tcc.spm.notification.v1.AlertMessage")
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor_4a0479a603100288) }

var fileDescriptor_4a0479a603100288 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0xfb, 0x30,
	0x14, 0xc5, 0xff, 0x4e, 0xfa, 0x69, 0xf5, 0x2f, 0x55, 0x5e, 0xb0, 0x8a, 0x28, 0x55, 0x2b, 0x44,
	0x16, 0x6c, 0x22, 0x78, 0x01, 0xba, 0x31, 0xc0, 0x50, 0x31, 0xb1, 0xb9, 0xa9, 0x69, 0x2d, 0xe2,
	0xda, 0xb2, 0x6f, 0xcb, 0xf3, 0xf0, 0x1a, 0x4c, 0x8c, 0x8c, 0x3c, 0x02, 0xea, 0xc6, 0x5b, 0x20,
	0xa7, 0x09, 0x1f, 0xd9, 0x8e, 0xce, 0xef, 0xf8, 0xda, 0x3e, 0x17, 0xff, 0x7f, 0x92, 0xf3, 0x95,
	0x31, 0x8f, 0xcc, 0x3a, 0x03, 0x86, 0x4c, 0x40, 0x82, 0x13, 0x20, 0x99, 0xb0, 0x8a, 0x41, 0x96,
	0x31, 0x6f, 0x35, 0x5b, 0x1b, 0x50, 0x0f, 0x2a, 0x13, 0xa0, 0xcc, 0x9a, 0x6d, 0xd3, 0xc1, 0xc1,
	0x56, 0xe4, 0x6a, 0x21, 0x40, 0xf2, 0x4a, 0xec, 0x4f, 0x8f, 0x9f, 0x23, 0xdc, 0xbb, 0xca, 0xa5,
	0x83, 0x1b, 0xe9, 0xbd, 0x58, 0x4a, 0x32, 0xc1, 0x6d, 0x9f, 0x19, 0x2b, 0xaf, 0x17, 0x14, 0x8d,
	0x50, 0xd2, 0x9c, 0x76, 0x5f, 0x3e, 0x5f, 0xe3, 0xc6, 0x20, 0x4a, 0xfe, 0xcd, 0x2a, 0x42, 0x8e,
	0x71, 0xb3, 0x90, 0x34, 0x1a, 0xa1, 0xa4, 0x5b, 0x46, 0x5c, 0xd4, 0x47, 0xb3, 0xbd, 0x4f, 0x8e,
	0x70, 0x63, 0x2d, 0xb4, 0xa4, 0x71, 0x9d, 0x17, 0x36, 0x39, 0xc4, 0xb1, 0x5a, 0x9c, 0xd3, 0x46,
	0xfd, 0x82, 0xe0, 0x92, 0x7e, 0x80, 0x29, 0x6d, 0x06, 0x18, 0x9c, 0x94, 0x9c, 0xe0, 0x8e, 0xdb,
	0xe4, 0xf2, 0x36, 0x4c, 0x6c, 0xd5, 0x27, 0x7e, 0x23, 0x72, 0x86, 0x7b, 0x22, 0x17, 0x4e, 0x97,
	0x5f, 0xa1, 0xed, 0x7a, 0xf4, 0x0f, 0x26, 0xa7, 0xb8, 0xeb, 0x41, 0x38, 0xb8, 0x53, 0x5a, 0xd2,
	0xce, 0x08, 0x25, 0x71, 0x99, 0x1d, 0x87, 0xa7, 0xfc, 0xb0, 0xe9, 0xf4, 0x6d, 0x37, 0x44, 0xef,
	0xbb, 0x21, 0xfa, 0xd8, 0x0d, 0xd1, 0xfd, 0xe5, 0x52, 0xc1, 0x6a, 0x33, 0x67, 0x99, 0xd1, 0xbc,
	0xac, 0x5e, 0x99, 0x4a, 0x71, 0x61, 0x15, 0xf7, 0x56, 0xf3, 0xdf, 0x0b, 0xe0, 0xdb, 0x74, 0xde,
	0x2a, 0xea, 0xbe, 0xf8, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x77, 0x5d, 0x68, 0xe9, 0xbd, 0x01, 0x00,
	0x00,
}

func (m *AlertMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StartTime != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.AlarmMessage) > 0 {
		i -= len(m.AlarmMessage)
		copy(dAtA[i:], m.AlarmMessage)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.AlarmMessage)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id1 != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.Id1))
		i--
		dAtA[i] = 0x28
	}
	if m.Id0 != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.Id0))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeId != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.ScopeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebhook(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebhook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlertMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeId != 0 {
		n += 1 + sovWebhook(uint64(m.ScopeId))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	if m.Id0 != 0 {
		n += 1 + sovWebhook(uint64(m.Id0))
	}
	if m.Id1 != 0 {
		n += 1 + sovWebhook(uint64(m.Id1))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	l = len(m.AlarmMessage)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovWebhook(uint64(m.StartTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebhook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebhook(x uint64) (n int) {
	return sovWebhook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebhook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			m.ScopeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScopeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id0", wireType)
			}
			m.Id0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id0 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id1", wireType)
			}
			m.Id1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlarmMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebhook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebhook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebhook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebhook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebhook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebhook
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWebhook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebhook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebhook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWebhook
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebhook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebhook   = fmt.Errorf("proto: integer overflow")
)
