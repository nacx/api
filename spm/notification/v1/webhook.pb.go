// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webhook.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AlertMessageRequest based on
// https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/backend-alarm.md#webhook
type AlertMessageRequest struct {
	// All scopes are defined in org.apache.skywalking.oap.server.core.source.DefaultScopeDefine.
	ScopeId int32  `protobuf:"varint,1,opt,name=scopeId,proto3" json:"scopeId,omitempty"`
	Scope   string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	// Target scope entity name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of scope entity, matched the name.
	Id0 int32 `protobuf:"varint,4,opt,name=id0,proto3" json:"id0,omitempty"`
	// Not used today.
	Id1 int32 `protobuf:"varint,5,opt,name=id1,proto3" json:"id1,omitempty"`
	// The rule name you configured in alarm-settings
	RuleName string `protobuf:"bytes,6,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	// Alarm text message.
	AlarmMessage string `protobuf:"bytes,7,opt,name=alarmMessage,proto3" json:"alarmMessage,omitempty"`
	// Alarm time measured in milliseconds, between the current time and midnight, January 1, 1970
	// UTC.
	StartTime            *types.Timestamp `protobuf:"bytes,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AlertMessageRequest) Reset()         { *m = AlertMessageRequest{} }
func (m *AlertMessageRequest) String() string { return proto.CompactTextString(m) }
func (*AlertMessageRequest) ProtoMessage()    {}
func (*AlertMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a0479a603100288, []int{0}
}
func (m *AlertMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlertMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AlertMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AlertMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlertMessageRequest.Merge(m, src)
}
func (m *AlertMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *AlertMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AlertMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AlertMessageRequest proto.InternalMessageInfo

func (m *AlertMessageRequest) GetScopeId() int32 {
	if m != nil {
		return m.ScopeId
	}
	return 0
}

func (m *AlertMessageRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *AlertMessageRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlertMessageRequest) GetId0() int32 {
	if m != nil {
		return m.Id0
	}
	return 0
}

func (m *AlertMessageRequest) GetId1() int32 {
	if m != nil {
		return m.Id1
	}
	return 0
}

func (m *AlertMessageRequest) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *AlertMessageRequest) GetAlarmMessage() string {
	if m != nil {
		return m.AlarmMessage
	}
	return ""
}

func (m *AlertMessageRequest) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func init() {
	proto.RegisterType((*AlertMessageRequest)(nil), "tetrate.api.tcc.spm.notification.v1.AlertMessageRequest")
}

func init() { proto.RegisterFile("webhook.proto", fileDescriptor_4a0479a603100288) }

var fileDescriptor_4a0479a603100288 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xbd, 0x8e, 0xd4, 0x30,
	0x10, 0x96, 0xef, 0x6e, 0xef, 0x6e, 0xcd, 0x8f, 0xc0, 0xa0, 0x93, 0x15, 0x4e, 0xcb, 0x2a, 0x34,
	0x2b, 0x0a, 0x9b, 0x1c, 0x14, 0x27, 0x3a, 0x4e, 0xa2, 0xa0, 0x80, 0x22, 0xbb, 0x12, 0x12, 0x9d,
	0x93, 0x9d, 0xcd, 0x5a, 0xc4, 0xb1, 0x89, 0x27, 0x41, 0x88, 0x8e, 0x9e, 0x8a, 0x97, 0xa2, 0x44,
	0xe2, 0x05, 0xd0, 0x8a, 0x77, 0xa0, 0x45, 0x71, 0x12, 0xfe, 0x0b, 0xba, 0xef, 0xc7, 0x63, 0x7f,
	0xe3, 0x19, 0x7a, 0xe5, 0x35, 0x64, 0x5b, 0x6b, 0x5f, 0x0a, 0x57, 0x5b, 0xb4, 0xec, 0x0e, 0x02,
	0xd6, 0x0a, 0x41, 0x28, 0xa7, 0x05, 0xe6, 0xb9, 0xf0, 0xce, 0x88, 0xca, 0xa2, 0xde, 0xe8, 0x5c,
	0xa1, 0xb6, 0x95, 0x68, 0x93, 0xe8, 0xb4, 0xb0, 0xb6, 0x28, 0x41, 0x2a, 0xa7, 0xa5, 0xaa, 0x2a,
	0x8b, 0xc1, 0xf1, 0xfd, 0x15, 0xd1, 0xad, 0xc1, 0x0d, 0x2c, 0x6b, 0x36, 0x12, 0x8c, 0xc3, 0x37,
	0x83, 0x79, 0xfb, 0x4f, 0x13, 0xb5, 0x01, 0x8f, 0xca, 0xb8, 0xfe, 0x40, 0xfc, 0x8d, 0xd0, 0x1b,
	0x8f, 0x4a, 0xa8, 0xf1, 0x29, 0x78, 0xaf, 0x0a, 0x48, 0xe1, 0x55, 0x03, 0x1e, 0x19, 0xa7, 0x47,
	0x3e, 0xb7, 0x0e, 0x9e, 0xac, 0x39, 0x99, 0x93, 0xc5, 0x24, 0x1d, 0x29, 0xbb, 0x49, 0x27, 0x01,
	0xf2, 0xbd, 0x39, 0x59, 0x4c, 0xd3, 0x9e, 0x30, 0x46, 0x0f, 0x2a, 0x65, 0x80, 0xef, 0x07, 0x31,
	0x60, 0x76, 0x8d, 0xee, 0xeb, 0xf5, 0x3d, 0x7e, 0x10, 0xea, 0x3b, 0xd8, 0x2b, 0x09, 0x9f, 0x8c,
	0x4a, 0xc2, 0x22, 0x7a, 0x5c, 0x37, 0x25, 0x3c, 0xeb, 0x6a, 0x0f, 0x43, 0xed, 0x0f, 0xce, 0x62,
	0x7a, 0x59, 0x95, 0xaa, 0x36, 0x43, 0x34, 0x7e, 0x14, 0xfc, 0xdf, 0x34, 0x76, 0x4e, 0xa7, 0x1e,
	0x55, 0x8d, 0x2b, 0x6d, 0x80, 0x1f, 0xcf, 0xc9, 0xe2, 0xd2, 0x59, 0x24, 0xfa, 0xa6, 0xc5, 0xd8,
	0xb4, 0x58, 0x8d, 0x4d, 0xa7, 0x3f, 0x0f, 0x9f, 0xbd, 0x27, 0xf4, 0xea, 0xf3, 0x7e, 0x18, 0x4b,
	0xa8, 0x5b, 0x9d, 0x03, 0x7b, 0x4b, 0xa7, 0x4b, 0xa8, 0xd6, 0xe1, 0x3f, 0xd8, 0xb9, 0xf8, 0x8f,
	0xd9, 0x88, 0x7f, 0xfc, 0x5d, 0x74, 0xf2, 0x57, 0x80, 0xc7, 0xdd, 0x48, 0xe2, 0xd3, 0x77, 0x9f,
	0xbf, 0x7e, 0xd8, 0x3b, 0x89, 0xaf, 0xcb, 0x36, 0x91, 0xc3, 0x1e, 0x48, 0xd5, 0x5d, 0xf0, 0x90,
	0xdc, 0xbd, 0xb8, 0xf8, 0xb8, 0x9b, 0x91, 0x4f, 0xbb, 0x19, 0xf9, 0xb2, 0x9b, 0x91, 0x17, 0x0f,
	0x0a, 0x8d, 0xdb, 0x26, 0x13, 0xb9, 0x35, 0x72, 0xc8, 0xa1, 0xed, 0x88, 0xc2, 0x26, 0x78, 0x67,
	0xe4, 0xaf, 0x69, 0x64, 0x9b, 0x64, 0x87, 0xe1, 0xc5, 0xfb, 0xdf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xc9, 0x6c, 0x01, 0xc7, 0x66, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebhookServiceClient interface {
	// Send alert event to the audit system.
	SendAlert(ctx context.Context, in *AlertMessageRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type webhookServiceClient struct {
	cc *grpc.ClientConn
}

func NewWebhookServiceClient(cc *grpc.ClientConn) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) SendAlert(ctx context.Context, in *AlertMessageRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.spm.notification.v1.WebhookService/SendAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
type WebhookServiceServer interface {
	// Send alert event to the audit system.
	SendAlert(context.Context, *AlertMessageRequest) (*types.Empty, error)
}

// UnimplementedWebhookServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (*UnimplementedWebhookServiceServer) SendAlert(ctx context.Context, req *AlertMessageRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAlert not implemented")
}

func RegisterWebhookServiceServer(s *grpc.Server, srv WebhookServiceServer) {
	s.RegisterService(&_WebhookService_serviceDesc, srv)
}

func _WebhookService_SendAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).SendAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.spm.notification.v1.WebhookService/SendAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).SendAlert(ctx, req.(*AlertMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebhookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.spm.notification.v1.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAlert",
			Handler:    _WebhookService_SendAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webhook.proto",
}

func (m *AlertMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlertMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlertMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintWebhook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.AlarmMessage) > 0 {
		i -= len(m.AlarmMessage)
		copy(dAtA[i:], m.AlarmMessage)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.AlarmMessage)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id1 != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.Id1))
		i--
		dAtA[i] = 0x28
	}
	if m.Id0 != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.Id0))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintWebhook(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if m.ScopeId != 0 {
		i = encodeVarintWebhook(dAtA, i, uint64(m.ScopeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebhook(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebhook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AlertMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeId != 0 {
		n += 1 + sovWebhook(uint64(m.ScopeId))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	if m.Id0 != 0 {
		n += 1 + sovWebhook(uint64(m.Id0))
	}
	if m.Id1 != 0 {
		n += 1 + sovWebhook(uint64(m.Id1))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	l = len(m.AlarmMessage)
	if l > 0 {
		n += 1 + l + sovWebhook(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovWebhook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebhook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebhook(x uint64) (n int) {
	return sovWebhook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AlertMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebhook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlertMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlertMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			m.ScopeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScopeId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id0", wireType)
			}
			m.Id0 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id0 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id1", wireType)
			}
			m.Id1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlarmMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlarmMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebhook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebhook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebhook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebhook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebhook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebhook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebhook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebhook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebhook
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWebhook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebhook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebhook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWebhook
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebhook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebhook   = fmt.Errorf("proto: integer overflow")
)
