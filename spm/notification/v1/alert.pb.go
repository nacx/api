// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alert.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/tetrateio/tetrate/api/spm/alert/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Alert status is OPEN or CLOSED.
// ALL_STATUSES is used in list request, to include all values.
type AlertStatus int32

const (
	AlertStatus_OPEN         AlertStatus = 0
	AlertStatus_CLOSED       AlertStatus = 1
	AlertStatus_ALL_STATUSES AlertStatus = 2
)

var AlertStatus_name = map[int32]string{
	0: "OPEN",
	1: "CLOSED",
	2: "ALL_STATUSES",
}

var AlertStatus_value = map[string]int32{
	"OPEN":         0,
	"CLOSED":       1,
	"ALL_STATUSES": 2,
}

func (x AlertStatus) String() string {
	return proto.EnumName(AlertStatus_name, int32(x))
}

func (AlertStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{0}
}

// Alert
//
// Alert that created because of alert rule violation.
// Alert is defined as a resource under tenant.
type Alert struct {
	// Alert id. auto generated.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Alert name. auto generated. Name will be set to tenants/tetrate/alerts/id.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Tenant. Tenant is obtained from application name where alert rule defined.
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Rule name that trigger this alert.
	RuleName string `protobuf:"bytes,4,opt,name=rule_name,json=ruleName,proto3" json:"rule_name,omitempty"`
	// Application name where the rule belong to.
	Application string `protobuf:"bytes,5,opt,name=application,proto3" json:"application,omitempty"`
	// Alert message.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// Alert status.
	Status AlertStatus `protobuf:"varint,7,opt,name=status,proto3,enum=tetrate.api.tcc.spm.notification.v1.AlertStatus" json:"status,omitempty"`
	// Alert acked or not. When alert acked, it means someone is working on it and
	// notification will not be sent.
	Acknowledged bool `protobuf:"varint,8,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	// Time when the alert was triggered.
	Timestamp *types.Timestamp `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Alert severity.
	Severity v1.Severity `protobuf:"varint,10,opt,name=severity,proto3,enum=tetrate.api.tcc.spm.alert.v1.Severity" json:"severity,omitempty"`
	// Alert owner is user responsible to resolve alert.
	// User who acked will be added to owners.
	Owners []string `protobuf:"bytes,11,rep,name=owners,proto3" json:"owners,omitempty"`
	// Key value pairs with additional information for the alert.
	Properties           map[string]string `protobuf:"bytes,12,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Alert) Reset()         { *m = Alert{} }
func (m *Alert) String() string { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()    {}
func (*Alert) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{0}
}
func (m *Alert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Alert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Alert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Alert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Alert.Merge(m, src)
}
func (m *Alert) XXX_Size() int {
	return m.Size()
}
func (m *Alert) XXX_DiscardUnknown() {
	xxx_messageInfo_Alert.DiscardUnknown(m)
}

var xxx_messageInfo_Alert proto.InternalMessageInfo

func (m *Alert) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Alert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Alert) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Alert) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

func (m *Alert) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *Alert) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Alert) GetStatus() AlertStatus {
	if m != nil {
		return m.Status
	}
	return AlertStatus_OPEN
}

func (m *Alert) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

func (m *Alert) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Alert) GetSeverity() v1.Severity {
	if m != nil {
		return m.Severity
	}
	return v1.Severity_MEDIUM
}

func (m *Alert) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *Alert) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Request to get the alert. If not set, will return all available enum values.
type ListAlertsRequest struct {
	Tenant   string      `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Status   AlertStatus `protobuf:"varint,2,opt,name=status,proto3,enum=tetrate.api.tcc.spm.notification.v1.AlertStatus" json:"status,omitempty"`
	Severity v1.Severity `protobuf:"varint,3,opt,name=severity,proto3,enum=tetrate.api.tcc.spm.alert.v1.Severity" json:"severity,omitempty"`
	// Maximum number of results to be returned. Default is 20.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token to request a specific page of the list results. Set to "" for first page.
	PageToken            string   `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAlertsRequest) Reset()         { *m = ListAlertsRequest{} }
func (m *ListAlertsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAlertsRequest) ProtoMessage()    {}
func (*ListAlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{1}
}
func (m *ListAlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertsRequest.Merge(m, src)
}
func (m *ListAlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertsRequest proto.InternalMessageInfo

func (m *ListAlertsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListAlertsRequest) GetStatus() AlertStatus {
	if m != nil {
		return m.Status
	}
	return AlertStatus_OPEN
}

func (m *ListAlertsRequest) GetSeverity() v1.Severity {
	if m != nil {
		return m.Severity
	}
	return v1.Severity_MEDIUM
}

func (m *ListAlertsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListAlertsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// The list of alert.
type ListAlertsResponse struct {
	Alerts []*Alert `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts,omitempty"`
	// Pagination token to retrieve the next page of results.
	// If the value is "", it means no further results for the request.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAlertsResponse) Reset()         { *m = ListAlertsResponse{} }
func (m *ListAlertsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAlertsResponse) ProtoMessage()    {}
func (*ListAlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{2}
}
func (m *ListAlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAlertsResponse.Merge(m, src)
}
func (m *ListAlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListAlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAlertsResponse proto.InternalMessageInfo

func (m *ListAlertsResponse) GetAlerts() []*Alert {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *ListAlertsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type UpdateAlertRequest struct {
	Tenant               string      `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   uint64      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Status               AlertStatus `protobuf:"varint,3,opt,name=status,proto3,enum=tetrate.api.tcc.spm.notification.v1.AlertStatus" json:"status,omitempty"`
	Acknowledged         bool        `protobuf:"varint,4,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	Owners               []string    `protobuf:"bytes,5,rep,name=owners,proto3" json:"owners,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateAlertRequest) Reset()         { *m = UpdateAlertRequest{} }
func (m *UpdateAlertRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateAlertRequest) ProtoMessage()    {}
func (*UpdateAlertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{3}
}
func (m *UpdateAlertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAlertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAlertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAlertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAlertRequest.Merge(m, src)
}
func (m *UpdateAlertRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAlertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAlertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAlertRequest proto.InternalMessageInfo

func (m *UpdateAlertRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateAlertRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateAlertRequest) GetStatus() AlertStatus {
	if m != nil {
		return m.Status
	}
	return AlertStatus_OPEN
}

func (m *UpdateAlertRequest) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

func (m *UpdateAlertRequest) GetOwners() []string {
	if m != nil {
		return m.Owners
	}
	return nil
}

type DeleteAlertRequest struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteAlertRequest) Reset()         { *m = DeleteAlertRequest{} }
func (m *DeleteAlertRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteAlertRequest) ProtoMessage()    {}
func (*DeleteAlertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{4}
}
func (m *DeleteAlertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteAlertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteAlertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteAlertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteAlertRequest.Merge(m, src)
}
func (m *DeleteAlertRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteAlertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteAlertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteAlertRequest proto.InternalMessageInfo

func (m *DeleteAlertRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *DeleteAlertRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetAlertRequest struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAlertRequest) Reset()         { *m = GetAlertRequest{} }
func (m *GetAlertRequest) String() string { return proto.CompactTextString(m) }
func (*GetAlertRequest) ProtoMessage()    {}
func (*GetAlertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b11b2fb4e5b6d61, []int{5}
}
func (m *GetAlertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAlertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAlertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAlertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAlertRequest.Merge(m, src)
}
func (m *GetAlertRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAlertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAlertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAlertRequest proto.InternalMessageInfo

func (m *GetAlertRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *GetAlertRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("tetrate.api.tcc.spm.notification.v1.AlertStatus", AlertStatus_name, AlertStatus_value)
	proto.RegisterType((*Alert)(nil), "tetrate.api.tcc.spm.notification.v1.Alert")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.spm.notification.v1.Alert.PropertiesEntry")
	proto.RegisterType((*ListAlertsRequest)(nil), "tetrate.api.tcc.spm.notification.v1.ListAlertsRequest")
	proto.RegisterType((*ListAlertsResponse)(nil), "tetrate.api.tcc.spm.notification.v1.ListAlertsResponse")
	proto.RegisterType((*UpdateAlertRequest)(nil), "tetrate.api.tcc.spm.notification.v1.UpdateAlertRequest")
	proto.RegisterType((*DeleteAlertRequest)(nil), "tetrate.api.tcc.spm.notification.v1.DeleteAlertRequest")
	proto.RegisterType((*GetAlertRequest)(nil), "tetrate.api.tcc.spm.notification.v1.GetAlertRequest")
}

func init() { proto.RegisterFile("alert.proto", fileDescriptor_3b11b2fb4e5b6d61) }

var fileDescriptor_3b11b2fb4e5b6d61 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0xee, 0x38, 0x4e, 0x9a, 0xbc, 0x2c, 0xdd, 0x30, 0x42, 0xc5, 0x64, 0xe9, 0x62, 0x5c, 0x51,
	0x59, 0x8b, 0x64, 0xb3, 0xa1, 0x40, 0xb5, 0x12, 0x87, 0x0d, 0x8d, 0xe0, 0xb0, 0xea, 0xae, 0x9c,
	0xed, 0xa5, 0x97, 0xd5, 0x6c, 0xf2, 0x1a, 0x46, 0xeb, 0x5f, 0x78, 0x26, 0x2e, 0x69, 0x55, 0xa9,
	0xe2, 0xca, 0x11, 0x89, 0x3f, 0x80, 0x3f, 0x03, 0x2e, 0x1c, 0x39, 0x22, 0x71, 0xe1, 0x88, 0x56,
	0x1c, 0xe0, 0xbf, 0x40, 0x1e, 0xdb, 0x89, 0xd9, 0x54, 0xd4, 0xa5, 0x7b, 0x9b, 0x79, 0xdf, 0xbc,
	0x99, 0xef, 0x7d, 0xef, 0x7b, 0x71, 0xa0, 0xcb, 0x7c, 0x4c, 0xa4, 0x13, 0x27, 0x91, 0x8c, 0xe8,
	0x4d, 0x89, 0x32, 0x61, 0x12, 0x1d, 0x16, 0x73, 0x47, 0x4e, 0x26, 0x8e, 0x88, 0x03, 0x27, 0x8c,
	0x24, 0x7f, 0xc8, 0x27, 0x4c, 0xf2, 0x28, 0x74, 0xd2, 0xdd, 0xfe, 0xdb, 0xb3, 0x28, 0x9a, 0xf9,
	0xe8, 0xb2, 0x98, 0xbb, 0x2c, 0x0c, 0x23, 0xa9, 0x10, 0x91, 0x5f, 0xd1, 0xdf, 0x2a, 0x50, 0xb5,
	0x3b, 0x9d, 0x3f, 0x74, 0x31, 0x88, 0xe5, 0xa2, 0x00, 0xdf, 0xb9, 0x08, 0x4a, 0x1e, 0xa0, 0x90,
	0x2c, 0x88, 0x8b, 0x03, 0x6f, 0xa6, 0xcc, 0xe7, 0x53, 0x26, 0xd1, 0x2d, 0x17, 0x25, 0xa0, 0x68,
	0xba, 0xe9, 0xae, 0x2b, 0x50, 0x4a, 0x1e, 0xce, 0x8a, 0xf7, 0xac, 0x9f, 0x74, 0x68, 0xee, 0x67,
	0x18, 0xbd, 0x06, 0x1a, 0x9f, 0x1a, 0xc4, 0x24, 0xb6, 0xee, 0x69, 0x7c, 0x4a, 0x29, 0xe8, 0x21,
	0x0b, 0xd0, 0xd0, 0x4c, 0x62, 0x77, 0x3c, 0xb5, 0xa6, 0xd7, 0xa1, 0x25, 0x31, 0x64, 0xa1, 0x34,
	0x1a, 0x2a, 0x5a, 0xec, 0xe8, 0x16, 0x74, 0x92, 0xb9, 0x8f, 0x27, 0x2a, 0x41, 0x57, 0x50, 0x3b,
	0x0b, 0xdc, 0xcb, 0x92, 0x4c, 0xe8, 0xb2, 0x38, 0xf6, 0x0b, 0x09, 0x8c, 0xa6, 0x82, 0xab, 0x21,
	0x6a, 0xc0, 0xd5, 0x00, 0x85, 0x60, 0x33, 0x34, 0x5a, 0x0a, 0x2d, 0xb7, 0xf4, 0x0b, 0x68, 0x09,
	0xc9, 0xe4, 0x5c, 0x18, 0x57, 0x4d, 0x62, 0x5f, 0x1b, 0x7c, 0xe0, 0xd4, 0x90, 0xd8, 0x51, 0x05,
	0x8d, 0x55, 0x9e, 0x57, 0xe4, 0x53, 0x0b, 0x36, 0xd8, 0xe4, 0x2c, 0x8c, 0x1e, 0xf9, 0x38, 0x9d,
	0xe1, 0xd4, 0x68, 0x9b, 0xc4, 0x6e, 0x7b, 0xff, 0x8a, 0xd1, 0x3b, 0xd0, 0x59, 0x2a, 0x6a, 0x74,
	0x4c, 0x62, 0x77, 0x07, 0x7d, 0x27, 0xd7, 0xdc, 0x29, 0x35, 0x77, 0x8e, 0xcb, 0x13, 0xde, 0xea,
	0x30, 0x1d, 0x42, 0x5b, 0x60, 0x8a, 0x09, 0x97, 0x0b, 0x03, 0x14, 0xd3, 0x5b, 0xcf, 0x65, 0x9a,
	0xbb, 0x25, 0xdd, 0x75, 0xc6, 0xc5, 0x69, 0x6f, 0x99, 0x97, 0x89, 0x1b, 0x3d, 0x0a, 0x31, 0x11,
	0x46, 0xd7, 0x6c, 0x64, 0xe2, 0xe6, 0x3b, 0xfa, 0x00, 0x20, 0x4e, 0xa2, 0x18, 0x13, 0xc9, 0x51,
	0x18, 0x1b, 0x66, 0xc3, 0xee, 0x0e, 0xf6, 0xea, 0xeb, 0xe0, 0x1c, 0x2d, 0x93, 0x47, 0xa1, 0x4c,
	0x16, 0x5e, 0xe5, 0xb6, 0xfe, 0xa7, 0xb0, 0x79, 0x01, 0xa6, 0x3d, 0x68, 0x9c, 0xe1, 0x42, 0x19,
	0xa1, 0xe3, 0x65, 0x4b, 0xfa, 0x06, 0x34, 0x53, 0xe6, 0xcf, 0x4b, 0x2b, 0xe4, 0x9b, 0x3d, 0xed,
	0x0e, 0xb1, 0x9e, 0x69, 0xf0, 0xfa, 0x01, 0x17, 0x52, 0x3d, 0x24, 0x3c, 0xfc, 0x6a, 0x8e, 0x42,
	0xd2, 0x77, 0x97, 0x2e, 0x51, 0x97, 0x0c, 0x3b, 0x3f, 0xfe, 0xfd, 0x73, 0x43, 0x4f, 0xb4, 0x1e,
	0x59, 0x1a, 0x66, 0xd5, 0x57, 0xed, 0x15, 0xfb, 0x5a, 0x55, 0xbe, 0xf1, 0x3f, 0x95, 0xdf, 0x82,
	0x4e, 0xcc, 0x66, 0x78, 0x22, 0xf8, 0xe3, 0xdc, 0xbe, 0x4d, 0xaf, 0x9d, 0x05, 0xc6, 0xfc, 0x31,
	0xd2, 0x1b, 0x00, 0x0a, 0x94, 0xd1, 0x19, 0x96, 0xee, 0x55, 0xc7, 0x8f, 0xb3, 0x80, 0xf5, 0x8c,
	0x00, 0xad, 0x4a, 0x20, 0xe2, 0x28, 0x14, 0x48, 0x87, 0xd0, 0x52, 0x2f, 0x0a, 0x83, 0xa8, 0x86,
	0xed, 0xd4, 0x2f, 0xd0, 0x2b, 0x32, 0xe9, 0x2d, 0xd8, 0x0c, 0xf1, 0x6b, 0x79, 0x52, 0x79, 0x3e,
	0xef, 0xc0, 0x6b, 0x59, 0xf8, 0x68, 0x49, 0xe1, 0x77, 0x02, 0xf4, 0x7e, 0x9c, 0x4d, 0x7b, 0x9e,
	0x5f, 0xbf, 0x0d, 0x6f, 0xa9, 0x99, 0xcf, 0x2e, 0xd5, 0x0b, 0x78, 0xa0, 0xd9, 0x57, 0xd4, 0xf8,
	0xaf, 0x3a, 0xd4, 0xb8, 0xe4, 0xc9, 0xd3, 0x9f, 0x33, 0x79, 0x2b, 0xef, 0x37, 0xab, 0xde, 0xb7,
	0x3c, 0xa0, 0x77, 0xd1, 0xc7, 0xcb, 0xac, 0xcc, 0x3a, 0x84, 0xcd, 0xcf, 0x51, 0x5e, 0xde, 0x85,
	0x3b, 0x1f, 0x41, 0xb7, 0x52, 0x37, 0x6d, 0x83, 0x7e, 0x78, 0x34, 0xba, 0xd7, 0xbb, 0x42, 0x01,
	0x5a, 0x9f, 0x1d, 0x1c, 0x8e, 0x47, 0x77, 0x7b, 0x84, 0xf6, 0x60, 0x63, 0xff, 0xe0, 0xe0, 0x64,
	0x7c, 0xbc, 0x7f, 0x7c, 0x7f, 0x3c, 0x1a, 0xf7, 0xb4, 0xc1, 0x5f, 0x3a, 0x6c, 0xe4, 0x79, 0x98,
	0xa4, 0x7c, 0x82, 0xf4, 0x07, 0x02, 0xb0, 0xb2, 0x12, 0xfd, 0xb8, 0x96, 0xe2, 0x6b, 0xe3, 0xd7,
	0xff, 0xe4, 0xa5, 0xf3, 0x72, 0xcf, 0x5a, 0x37, 0xbf, 0xf9, 0xed, 0xcf, 0xef, 0xb4, 0x1b, 0x74,
	0x2b, 0xfb, 0x4e, 0xe4, 0x65, 0x0b, 0xf7, 0x49, 0xbe, 0x78, 0xea, 0x16, 0xa6, 0xfc, 0x9e, 0x40,
	0xbb, 0x94, 0x8f, 0xde, 0xae, 0xf5, 0xd4, 0x05, 0xb5, 0xfb, 0x2f, 0x31, 0x0b, 0x96, 0xad, 0x38,
	0x59, 0xd4, 0xfc, 0x0f, 0x4e, 0xee, 0x13, 0x3e, 0x7d, 0x4a, 0xbf, 0x25, 0xd0, 0xad, 0x4c, 0x01,
	0xad, 0x27, 0xc3, 0xfa, 0xdc, 0xf4, 0xaf, 0xaf, 0xfd, 0xe4, 0x8f, 0xb2, 0x6f, 0xb0, 0xf5, 0xbe,
	0xa2, 0xf2, 0x9e, 0xf5, 0x42, 0x2a, 0x7b, 0x64, 0x47, 0xb1, 0xa9, 0x38, 0xb7, 0x26, 0x9b, 0x75,
	0xaf, 0xbf, 0x88, 0xcd, 0x4e, 0x1d, 0x36, 0xc3, 0xe1, 0x2f, 0xe7, 0xdb, 0xe4, 0xd7, 0xf3, 0x6d,
	0xf2, 0xc7, 0xf9, 0x36, 0x79, 0x70, 0x7b, 0xc6, 0xe5, 0x97, 0xf3, 0x53, 0x67, 0x12, 0x05, 0x6e,
	0xc1, 0x8a, 0x47, 0xe5, 0x4a, 0xfd, 0x2f, 0x11, 0x71, 0xe0, 0x56, 0xb9, 0xb9, 0xe9, 0xee, 0x69,
	0x4b, 0x11, 0xf8, 0xf0, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x05, 0x3a, 0x78, 0xa2, 0xf2, 0x08,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlertServiceClient is the client API for AlertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlertServiceClient interface {
	// List alerts.
	// Alert can be filtered by both Status and Priority.
	ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error)
	// Get single alerts.
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*Alert, error)
	// Update alert. User can update alert status, ack, and owners.
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// Delete alert. This will remove alert from storage.
	DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type alertServiceClient struct {
	cc *grpc.ClientConn
}

func NewAlertServiceClient(cc *grpc.ClientConn) AlertServiceClient {
	return &alertServiceClient{cc}
}

func (c *alertServiceClient) ListAlerts(ctx context.Context, in *ListAlertsRequest, opts ...grpc.CallOption) (*ListAlertsResponse, error) {
	out := new(ListAlertsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.spm.notification.v1.AlertService/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*Alert, error) {
	out := new(Alert)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.spm.notification.v1.AlertService/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.spm.notification.v1.AlertService/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertServiceClient) DeleteAlert(ctx context.Context, in *DeleteAlertRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.spm.notification.v1.AlertService/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServiceServer is the server API for AlertService service.
type AlertServiceServer interface {
	// List alerts.
	// Alert can be filtered by both Status and Priority.
	ListAlerts(context.Context, *ListAlertsRequest) (*ListAlertsResponse, error)
	// Get single alerts.
	GetAlert(context.Context, *GetAlertRequest) (*Alert, error)
	// Update alert. User can update alert status, ack, and owners.
	UpdateAlert(context.Context, *UpdateAlertRequest) (*types.Empty, error)
	// Delete alert. This will remove alert from storage.
	DeleteAlert(context.Context, *DeleteAlertRequest) (*types.Empty, error)
}

// UnimplementedAlertServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAlertServiceServer struct {
}

func (*UnimplementedAlertServiceServer) ListAlerts(ctx context.Context, req *ListAlertsRequest) (*ListAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (*UnimplementedAlertServiceServer) GetAlert(ctx context.Context, req *GetAlertRequest) (*Alert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (*UnimplementedAlertServiceServer) UpdateAlert(ctx context.Context, req *UpdateAlertRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (*UnimplementedAlertServiceServer) DeleteAlert(ctx context.Context, req *DeleteAlertRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}

func RegisterAlertServiceServer(s *grpc.Server, srv AlertServiceServer) {
	s.RegisterService(&_AlertService_serviceDesc, srv)
}

func _AlertService_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.spm.notification.v1.AlertService/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).ListAlerts(ctx, req.(*ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.spm.notification.v1.AlertService/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).GetAlert(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.spm.notification.v1.AlertService/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AlertService_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServiceServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.spm.notification.v1.AlertService/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServiceServer).DeleteAlert(ctx, req.(*DeleteAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AlertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.spm.notification.v1.AlertService",
	HandlerType: (*AlertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAlerts",
			Handler:    _AlertService_ListAlerts_Handler,
		},
		{
			MethodName: "GetAlert",
			Handler:    _AlertService_GetAlert_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _AlertService_UpdateAlert_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _AlertService_DeleteAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alert.proto",
}

func (m *Alert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Alert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Alert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAlert(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlert(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlert(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintAlert(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.Severity != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x50
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAlert(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Acknowledged {
		i--
		if m.Acknowledged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RuleName) > 0 {
		i -= len(m.RuleName)
		copy(dAtA[i:], m.RuleName)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.RuleName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PageSize != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Severity != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Severity))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListAlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListAlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlert(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAlertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAlertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAlertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Owners[iNdEx])
			copy(dAtA[i:], m.Owners[iNdEx])
			i = encodeVarintAlert(dAtA, i, uint64(len(m.Owners[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Acknowledged {
		i--
		if m.Acknowledged {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteAlertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteAlertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteAlertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAlertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAlertRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAlertRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintAlert(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintAlert(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlert(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Alert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAlert(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAlert(uint64(m.Status))
	}
	if m.Acknowledged {
		n += 2
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Severity != 0 {
		n += 1 + sovAlert(uint64(m.Severity))
	}
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovAlert(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlert(uint64(len(k))) + 1 + len(v) + sovAlert(uint64(len(v)))
			n += mapEntrySize + 1 + sovAlert(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAlert(uint64(m.Status))
	}
	if m.Severity != 0 {
		n += 1 + sovAlert(uint64(m.Severity))
	}
	if m.PageSize != 0 {
		n += 1 + sovAlert(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovAlert(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAlertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAlert(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovAlert(uint64(m.Status))
	}
	if m.Acknowledged {
		n += 2
	}
	if len(m.Owners) > 0 {
		for _, s := range m.Owners {
			l = len(s)
			n += 1 + l + sovAlert(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteAlertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAlert(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAlertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovAlert(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovAlert(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlert(x uint64) (n int) {
	return sovAlert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Alert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Alert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Alert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AlertStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledged = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= v1.Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlert
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAlert
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlert(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAlert
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AlertStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Severity", wireType)
			}
			m.Severity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Severity |= v1.Severity(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, &Alert{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAlertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAlertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAlertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AlertStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acknowledged", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Acknowledged = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owners = append(m.Owners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteAlertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteAlertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteAlertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAlertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAlertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAlertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlert
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAlert
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAlert
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAlert(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAlert
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAlert = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlert   = fmt.Errorf("proto: integer overflow")
)
