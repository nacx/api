// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spm/notification/v1/activity.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Activity
//
// Activity is events happened in system that record user/system action to resources.
// Activity has three main components: actor, verb and object.
// Example of activities:
// - arif update application httpbin with alert rule
// - system create service_resp alert with id #1
// - dhi acked alert #1
// - dhi close alert #1
//
// Activity will trigger notification that sent to user.
// User will get notification for all activities related to resources where user has READ access.
// Example:
// - If user has READ access to Application httpbin.
//   User will get notification for all activities related to Application httpbin including Alerts.
//
type Activity struct {
	// Activity id. auto generated.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Activity name. auto generated. Name will be set to /tenants/tetrate/activities/id.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Tenant. Tenant is obtained from Actor.
	Tenant string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Time when the activity created.
	Timestamp *types.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Actor is entity capable of carrying out an Activity. Often this will be user or system.
	Actor *Object `protobuf:"bytes,6,opt,name=actor,proto3" json:"actor,omitempty"`
	// Verb is action that entity do. e.g. create, update, delete.
	Verb string `protobuf:"bytes,7,opt,name=verb,proto3" json:"verb,omitempty"`
	// Object is primary object of the Activity carried out by Actor.
	Object *Object `protobuf:"bytes,8,opt,name=object,proto3" json:"object,omitempty"`
	// Target is the target of the Activity. The precise meaning of the activity's target
	// is dependent on the activities verb, but will often be the object the English preposition "to".
	Target *Object `protobuf:"bytes,9,opt,name=target,proto3" json:"target,omitempty"`
	// Key value pairs with additional information for the activity.
	Properties           map[string]string `protobuf:"bytes,10,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Activity) Reset()         { *m = Activity{} }
func (m *Activity) String() string { return proto.CompactTextString(m) }
func (*Activity) ProtoMessage()    {}
func (*Activity) Descriptor() ([]byte, []int) {
	return fileDescriptor_b79c25cd13db6ca0, []int{0}
}
func (m *Activity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Activity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Activity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Activity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Activity.Merge(m, src)
}
func (m *Activity) XXX_Size() int {
	return m.Size()
}
func (m *Activity) XXX_DiscardUnknown() {
	xxx_messageInfo_Activity.DiscardUnknown(m)
}

var xxx_messageInfo_Activity proto.InternalMessageInfo

func (m *Activity) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Activity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Activity) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Activity) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Activity) GetActor() *Object {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *Activity) GetVerb() string {
	if m != nil {
		return m.Verb
	}
	return ""
}

func (m *Activity) GetObject() *Object {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *Activity) GetTarget() *Object {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Activity) GetProperties() map[string]string {
	if m != nil {
		return m.Properties
	}
	return nil
}

// Object represent entity involved in Activity.
type Object struct {
	// Name is TSB name (e.g. /tenants/tetrate/users/dhi).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type is TSB resource type (e.g. User, Team, Application, etc).
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_b79c25cd13db6ca0, []int{1}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(m, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

func (m *Object) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Object) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// Request to get the list activities. Support following query:
// - List all activities from an actor by name (e.g. list all activities for user
// /tenants/tetrate/users/dhi).
// - List all activities to object or target by name (e.g. list all activities for alert
// /tenants/tetrate/alerts/1).
type ListActivitiesRequest struct {
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// Supported filter.
	//
	// Types that are valid to be assigned to Filter:
	//	*ListActivitiesRequest_Actor
	//	*ListActivitiesRequest_ObjectOrTarget
	Filter isListActivitiesRequest_Filter `protobuf_oneof:"filter"`
	// Maximum number of results to be returned. Default is 20.
	PageSize int32 `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Page token to request a specific page of the list results. Set to "" for first page.
	PageToken            string   `protobuf:"bytes,5,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListActivitiesRequest) Reset()         { *m = ListActivitiesRequest{} }
func (m *ListActivitiesRequest) String() string { return proto.CompactTextString(m) }
func (*ListActivitiesRequest) ProtoMessage()    {}
func (*ListActivitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b79c25cd13db6ca0, []int{2}
}
func (m *ListActivitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListActivitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListActivitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListActivitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListActivitiesRequest.Merge(m, src)
}
func (m *ListActivitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListActivitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListActivitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListActivitiesRequest proto.InternalMessageInfo

type isListActivitiesRequest_Filter interface {
	isListActivitiesRequest_Filter()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ListActivitiesRequest_Actor struct {
	Actor string `protobuf:"bytes,2,opt,name=actor,proto3,oneof"`
}
type ListActivitiesRequest_ObjectOrTarget struct {
	ObjectOrTarget string `protobuf:"bytes,3,opt,name=object_or_target,json=objectOrTarget,proto3,oneof"`
}

func (*ListActivitiesRequest_Actor) isListActivitiesRequest_Filter()          {}
func (*ListActivitiesRequest_ObjectOrTarget) isListActivitiesRequest_Filter() {}

func (m *ListActivitiesRequest) GetFilter() isListActivitiesRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListActivitiesRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListActivitiesRequest) GetActor() string {
	if x, ok := m.GetFilter().(*ListActivitiesRequest_Actor); ok {
		return x.Actor
	}
	return ""
}

func (m *ListActivitiesRequest) GetObjectOrTarget() string {
	if x, ok := m.GetFilter().(*ListActivitiesRequest_ObjectOrTarget); ok {
		return x.ObjectOrTarget
	}
	return ""
}

func (m *ListActivitiesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListActivitiesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ListActivitiesRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ListActivitiesRequest_Actor)(nil),
		(*ListActivitiesRequest_ObjectOrTarget)(nil),
	}
}

// List of activities.
type ListActivitiesResponse struct {
	Activities []*Activity `protobuf:"bytes,1,rep,name=activities,proto3" json:"activities,omitempty"`
	// Pagination token to retrieve the next page of results.
	// If the value is "", it means no further results for the request.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListActivitiesResponse) Reset()         { *m = ListActivitiesResponse{} }
func (m *ListActivitiesResponse) String() string { return proto.CompactTextString(m) }
func (*ListActivitiesResponse) ProtoMessage()    {}
func (*ListActivitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b79c25cd13db6ca0, []int{3}
}
func (m *ListActivitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListActivitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListActivitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListActivitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListActivitiesResponse.Merge(m, src)
}
func (m *ListActivitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListActivitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListActivitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListActivitiesResponse proto.InternalMessageInfo

func (m *ListActivitiesResponse) GetActivities() []*Activity {
	if m != nil {
		return m.Activities
	}
	return nil
}

func (m *ListActivitiesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func init() {
	proto.RegisterType((*Activity)(nil), "tetrateio.api.tcc.spm.notification.v1.Activity")
	proto.RegisterMapType((map[string]string)(nil), "tetrateio.api.tcc.spm.notification.v1.Activity.PropertiesEntry")
	proto.RegisterType((*Object)(nil), "tetrateio.api.tcc.spm.notification.v1.Object")
	proto.RegisterType((*ListActivitiesRequest)(nil), "tetrateio.api.tcc.spm.notification.v1.ListActivitiesRequest")
	proto.RegisterType((*ListActivitiesResponse)(nil), "tetrateio.api.tcc.spm.notification.v1.ListActivitiesResponse")
}

func init() { proto.RegisterFile("spm/notification/v1/activity.proto", fileDescriptor_b79c25cd13db6ca0) }

var fileDescriptor_b79c25cd13db6ca0 = []byte{
	// 623 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6b, 0x13, 0x41,
	0x14, 0x77, 0xd2, 0x24, 0x4d, 0x5e, 0xb1, 0x2d, 0x83, 0xd6, 0x25, 0x6a, 0x1b, 0x03, 0x6a, 0x10,
	0x9d, 0xb5, 0xf5, 0x52, 0x8a, 0x45, 0x8c, 0x14, 0x3c, 0x08, 0x2d, 0xdb, 0x9e, 0xbc, 0x84, 0xc9,
	0xf6, 0x35, 0x8e, 0x4d, 0x76, 0xd6, 0xd9, 0x97, 0x60, 0x2a, 0x5e, 0xbc, 0x78, 0x16, 0xbf, 0x8b,
	0x1f, 0xc0, 0x93, 0x78, 0x12, 0xfc, 0x02, 0x52, 0xfc, 0x14, 0x9e, 0x64, 0x67, 0x76, 0xb7, 0xb1,
	0xf4, 0x50, 0x7b, 0x7b, 0x7f, 0x7f, 0xf3, 0x9b, 0xf7, 0x7b, 0x3c, 0x68, 0x25, 0xf1, 0xd0, 0x8f,
	0x34, 0xa9, 0x03, 0x15, 0x4a, 0x52, 0x3a, 0xf2, 0xc7, 0xab, 0xbe, 0x0c, 0x49, 0x8d, 0x15, 0x4d,
	0x44, 0x6c, 0x34, 0x69, 0x7e, 0x9b, 0x90, 0x8c, 0x24, 0x54, 0x5a, 0xc8, 0x58, 0x09, 0x0a, 0x43,
	0x91, 0xc4, 0x43, 0x31, 0xdd, 0x25, 0xc6, 0xab, 0x8d, 0x1b, 0x7d, 0xad, 0xfb, 0x03, 0xf4, 0x65,
	0xac, 0x7c, 0x19, 0x45, 0x9a, 0x6c, 0x26, 0x71, 0x20, 0x8d, 0x95, 0x2c, 0x6b, 0xbd, 0xde, 0xe8,
	0xc0, 0x27, 0x35, 0xc4, 0x84, 0xe4, 0x30, 0xce, 0x0a, 0xae, 0x8d, 0xe5, 0x40, 0xed, 0x4b, 0x42,
	0x3f, 0x37, 0x5c, 0xa2, 0xf5, 0xb1, 0x0c, 0xb5, 0xa7, 0x19, 0x23, 0x3e, 0x0f, 0x25, 0xb5, 0xef,
	0xb1, 0x26, 0x6b, 0x97, 0x83, 0x92, 0xda, 0xe7, 0x1c, 0xca, 0x91, 0x1c, 0xa2, 0x57, 0x6a, 0xb2,
	0x76, 0x3d, 0xb0, 0x36, 0x5f, 0x82, 0x2a, 0x61, 0x24, 0x23, 0xf2, 0xca, 0x36, 0x9a, 0x79, 0x7c,
	0x1d, 0xea, 0xc5, 0xa3, 0x5e, 0xa5, 0xc9, 0xda, 0x73, 0x6b, 0x0d, 0xe1, 0x68, 0x89, 0x9c, 0x96,
	0xd8, 0xcb, 0x2b, 0x82, 0x93, 0x62, 0xfe, 0x0c, 0x2a, 0x32, 0x24, 0x6d, 0xbc, 0xaa, 0xed, 0x7a,
	0x20, 0xce, 0x35, 0x11, 0xb1, 0xdd, 0x7b, 0x8d, 0x21, 0x05, 0xae, 0x37, 0xa5, 0x3a, 0x46, 0xd3,
	0xf3, 0x66, 0x1d, 0xd5, 0xd4, 0xe6, 0x5b, 0x50, 0xd5, 0xb6, 0xc8, 0xab, 0x5d, 0x04, 0x39, 0x6b,
	0x4e, 0x61, 0x48, 0x9a, 0x3e, 0x92, 0x57, 0xbf, 0x10, 0x8c, 0x6b, 0xe6, 0x5d, 0x80, 0xd8, 0xe8,
	0x18, 0x0d, 0x29, 0x4c, 0x3c, 0x68, 0xce, 0xb4, 0xe7, 0xd6, 0x9e, 0x9c, 0x13, 0x2a, 0x57, 0x48,
	0xec, 0x14, 0x08, 0x5b, 0x11, 0x99, 0x49, 0x30, 0x05, 0xd9, 0xd8, 0x84, 0x85, 0x53, 0x69, 0xbe,
	0x08, 0x33, 0x87, 0x38, 0xb1, 0x8a, 0xd6, 0x83, 0xd4, 0xe4, 0x57, 0xa0, 0x32, 0x96, 0x83, 0x51,
	0xae, 0xa9, 0x73, 0x36, 0x4a, 0xeb, 0xac, 0xf5, 0x10, 0xaa, 0x8e, 0x71, 0x21, 0x3b, 0x9b, 0x92,
	0x9d, 0x43, 0x99, 0x26, 0x71, 0xb1, 0x0a, 0xa9, 0xdd, 0xfa, 0xca, 0xe0, 0xea, 0x0b, 0x95, 0x50,
	0xc6, 0x4e, 0x61, 0x12, 0xe0, 0x9b, 0x11, 0x26, 0xc4, 0x57, 0x8a, 0x25, 0xb1, 0x18, 0x9d, 0xd9,
	0x3f, 0x9d, 0xb2, 0x29, 0x2d, 0xb2, 0x62, 0x5b, 0x96, 0x72, 0xcd, 0x2d, 0xde, 0xf3, 0x4b, 0xb9,
	0x8c, 0xf7, 0x60, 0xd1, 0x4d, 0xbd, 0xab, 0x4d, 0x37, 0x9b, 0xfa, 0x4c, 0x56, 0x32, 0xef, 0x32,
	0xdb, 0x66, 0xcf, 0x0d, 0xf4, 0x3a, 0xd4, 0x63, 0xd9, 0xc7, 0x6e, 0xa2, 0x8e, 0xd0, 0x2e, 0x63,
	0x25, 0xa8, 0xa5, 0x81, 0x5d, 0x75, 0x84, 0xfc, 0x26, 0x80, 0x4d, 0x92, 0x3e, 0xc4, 0xc8, 0xee,
	0x63, 0x3d, 0xb0, 0xe5, 0x7b, 0x69, 0xa0, 0x53, 0x83, 0xea, 0x81, 0x1a, 0x10, 0x9a, 0xd6, 0x27,
	0x06, 0x4b, 0xa7, 0x3f, 0x91, 0xc4, 0x3a, 0x4a, 0x90, 0x6f, 0x03, 0xc8, 0x22, 0xea, 0x31, 0xab,
	0x98, 0xff, 0x9f, 0x8a, 0x05, 0x53, 0x10, 0xfc, 0x0e, 0x2c, 0x44, 0xf8, 0x96, 0xba, 0x53, 0xcc,
	0xdc, 0x3c, 0x2f, 0xa7, 0xe1, 0x9d, 0x9c, 0xdd, 0xda, 0x77, 0x06, 0x0b, 0x39, 0xc0, 0x2e, 0x9a,
	0xb1, 0x0a, 0x91, 0x7f, 0x61, 0x30, 0xff, 0x2f, 0x4f, 0xfe, 0xf8, 0x9c, 0x5c, 0xce, 0xd4, 0xa8,
	0xb1, 0x79, 0xc1, 0x6e, 0x37, 0x9c, 0xd6, 0xdd, 0x0f, 0x3f, 0x7f, 0x7f, 0x2e, 0xdd, 0xe2, 0x2b,
	0xe9, 0x4d, 0x73, 0xaa, 0x26, 0xfe, 0x3b, 0x67, 0xbc, 0xf7, 0x4f, 0x3e, 0xdd, 0xd9, 0xf8, 0x76,
	0xbc, 0xcc, 0x7e, 0x1c, 0x2f, 0xb3, 0x5f, 0xc7, 0xcb, 0xec, 0xe5, 0xfd, 0xbe, 0xa2, 0x57, 0xa3,
	0x9e, 0x08, 0xf5, 0xd0, 0x2f, 0xde, 0xb7, 0x57, 0xed, 0x8c, 0x5b, 0xd9, 0xab, 0xda, 0xcb, 0xf1,
	0xe8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x27, 0x3a, 0x64, 0x8f, 0x49, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActivityServiceClient interface {
	// List Activities. Activities can be filtered by actor or object name.
	ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error)
}

type activityServiceClient struct {
	cc *grpc.ClientConn
}

func NewActivityServiceClient(cc *grpc.ClientConn) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) ListActivities(ctx context.Context, in *ListActivitiesRequest, opts ...grpc.CallOption) (*ListActivitiesResponse, error) {
	out := new(ListActivitiesResponse)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.spm.notification.v1.ActivityService/ListActivities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
type ActivityServiceServer interface {
	// List Activities. Activities can be filtered by actor or object name.
	ListActivities(context.Context, *ListActivitiesRequest) (*ListActivitiesResponse, error)
}

// UnimplementedActivityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (*UnimplementedActivityServiceServer) ListActivities(ctx context.Context, req *ListActivitiesRequest) (*ListActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivities not implemented")
}

func RegisterActivityServiceServer(s *grpc.Server, srv ActivityServiceServer) {
	s.RegisterService(&_ActivityService_serviceDesc, srv)
}

func _ActivityService_ListActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ListActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.spm.notification.v1.ActivityService/ListActivities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ListActivities(ctx, req.(*ListActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ActivityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tcc.spm.notification.v1.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListActivities",
			Handler:    _ActivityService_ListActivities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spm/notification/v1/activity.proto",
}

func (m *Activity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Activity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Activity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintActivity(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintActivity(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintActivity(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Verb) > 0 {
		i -= len(m.Verb)
		copy(dAtA[i:], m.Verb)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Verb)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Actor != nil {
		{
			size, err := m.Actor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActivity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Object) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListActivitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListActivitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListActivitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PageToken) > 0 {
		i -= len(m.PageToken)
		copy(dAtA[i:], m.PageToken)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.PageToken)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PageSize != 0 {
		i = encodeVarintActivity(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListActivitiesRequest_Actor) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ListActivitiesRequest_Actor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Actor)
	copy(dAtA[i:], m.Actor)
	i = encodeVarintActivity(dAtA, i, uint64(len(m.Actor)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *ListActivitiesRequest_ObjectOrTarget) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *ListActivitiesRequest_ObjectOrTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.ObjectOrTarget)
	copy(dAtA[i:], m.ObjectOrTarget)
	i = encodeVarintActivity(dAtA, i, uint64(len(m.ObjectOrTarget)))
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}
func (m *ListActivitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListActivitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListActivitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NextPageToken) > 0 {
		i -= len(m.NextPageToken)
		copy(dAtA[i:], m.NextPageToken)
		i = encodeVarintActivity(dAtA, i, uint64(len(m.NextPageToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Activities) > 0 {
		for iNdEx := len(m.Activities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Activities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintActivity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintActivity(dAtA []byte, offset int, v uint64) int {
	offset -= sovActivity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Activity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivity(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Actor != nil {
		l = m.Actor.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	l = len(m.Verb)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovActivity(uint64(len(k))) + 1 + len(v) + sovActivity(uint64(len(v)))
			n += mapEntrySize + 1 + sovActivity(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListActivitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	if m.PageSize != 0 {
		n += 1 + sovActivity(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListActivitiesRequest_Actor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Actor)
	n += 1 + l + sovActivity(uint64(l))
	return n
}
func (m *ListActivitiesRequest_ObjectOrTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObjectOrTarget)
	n += 1 + l + sovActivity(uint64(l))
	return n
}
func (m *ListActivitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Activities) > 0 {
		for _, e := range m.Activities {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	l = len(m.NextPageToken)
	if l > 0 {
		n += 1 + l + sovActivity(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovActivity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActivity(x uint64) (n int) {
	return sovActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Activity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Activity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Activity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Actor == nil {
				m.Actor = &Object{}
			}
			if err := m.Actor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &Object{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Object{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthActivity
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthActivity
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActivity
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthActivity
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthActivity
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipActivity(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthActivity
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListActivitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListActivitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListActivitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Actor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &ListActivitiesRequest_Actor{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectOrTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &ListActivitiesRequest_ObjectOrTarget{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListActivitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListActivitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListActivitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activities = append(m.Activities, &Activity{})
			if err := m.Activities[len(m.Activities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthActivity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextPageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActivity
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthActivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthActivity
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivity   = fmt.Errorf("proto: integer overflow")
)
