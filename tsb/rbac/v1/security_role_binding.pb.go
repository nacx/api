// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/rbac/v1/security_role_binding.proto

// `SecurityRoleBinding` is an assignment of roles to a set of users or
// teams to access resources under a Security group.  The user or team
// information is obtained from an LDAP server that should have been
// configured as part of Service Bridge installation. Note that a
// `SecurityRoleBinding` can be created or modified only by users who
// have `set_rbac` permission on the Security group.
//
// The following example assigns the `security-admin` role to users
// `alice`, `bob`, and members of the `security-ops` team for
// the security group `g1` under workspace `w1` owned by the tenant
// `mycompany`.
//
// ```yaml
// apiVersion: rbac.tsb.tetrate.io/v1
// kind: SecurityRoleBinding
// metadata:
//   name: security-g1
//   tenant: mycompany
//   workspace: w1
//   group: g1
// spec:
//   role: security-admin
//   subjects:
//   - user: alice
//   - user: bob
//   - team: security-ops
//```
//

package v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// `SecurityRoleBinding` assigns permissions to users of security groups.
type SecurityRoleBinding struct {
	// The role being assinged to the subjects.
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The set of users who are being assigned the role.
	Subjects             []*Subject `protobuf:"bytes,2,rep,name=subjects,proto3" json:"subjects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SecurityRoleBinding) Reset()         { *m = SecurityRoleBinding{} }
func (m *SecurityRoleBinding) String() string { return proto.CompactTextString(m) }
func (*SecurityRoleBinding) ProtoMessage()    {}
func (*SecurityRoleBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_1403c894e6c7e052, []int{0}
}
func (m *SecurityRoleBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SecurityRoleBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SecurityRoleBinding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SecurityRoleBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SecurityRoleBinding.Merge(m, src)
}
func (m *SecurityRoleBinding) XXX_Size() int {
	return m.Size()
}
func (m *SecurityRoleBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_SecurityRoleBinding.DiscardUnknown(m)
}

var xxx_messageInfo_SecurityRoleBinding proto.InternalMessageInfo

func (m *SecurityRoleBinding) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *SecurityRoleBinding) GetSubjects() []*Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func init() {
	proto.RegisterType((*SecurityRoleBinding)(nil), "tetrateio.api.tsb.rbac.v1.SecurityRoleBinding")
}

func init() {
	proto.RegisterFile("tsb/rbac/v1/security_role_binding.proto", fileDescriptor_1403c894e6c7e052)
}

var fileDescriptor_1403c894e6c7e052 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x58, 0xa5, 0xa6, 0x17, 0x89, 0x20, 0xb5, 0x87, 0x58, 0x8a, 0x60, 0x2f, 0xdd,
	0xa5, 0xf5, 0x09, 0x9a, 0xab, 0xb7, 0xf4, 0xe6, 0x25, 0xec, 0x26, 0x63, 0xba, 0x12, 0x33, 0x61,
	0x33, 0x09, 0xe6, 0xea, 0x23, 0xf8, 0x54, 0x1e, 0x7d, 0x84, 0x92, 0xc7, 0xf0, 0x24, 0xd9, 0x94,
	0x12, 0x10, 0x6f, 0xcb, 0xec, 0xfc, 0x1f, 0xdf, 0x3f, 0xee, 0x03, 0x95, 0x4a, 0x18, 0x25, 0x63,
	0x51, 0xaf, 0x45, 0x09, 0x71, 0x65, 0x34, 0x35, 0x91, 0xc1, 0x0c, 0x22, 0xa5, 0xf3, 0x44, 0xe7,
	0x29, 0x2f, 0x0c, 0x12, 0x7a, 0xb7, 0x04, 0x64, 0x24, 0x81, 0x46, 0x2e, 0x0b, 0xcd, 0xa9, 0x54,
	0xbc, 0x8b, 0xf1, 0x7a, 0x3d, 0xbb, 0x4b, 0x11, 0xd3, 0x0c, 0x84, 0x2c, 0xb4, 0x78, 0xd1, 0x90,
	0x25, 0x91, 0x82, 0xbd, 0xac, 0x35, 0x9a, 0x3e, 0x3b, 0xdb, 0xa6, 0x9a, 0xf6, 0x95, 0xe2, 0x31,
	0xbe, 0x09, 0xc8, 0x6b, 0x6c, 0x0a, 0x83, 0xef, 0x8d, 0xb0, 0x9f, 0xf1, 0x2a, 0x85, 0x7c, 0x55,
	0xcb, 0x4c, 0x27, 0x92, 0x40, 0xfc, 0x79, 0x1c, 0x11, 0x37, 0x43, 0xcf, 0x4e, 0xaf, 0x9f, 0x2f,
	0x3e, 0x98, 0x7b, 0xbd, 0x3b, 0x6a, 0x87, 0x98, 0x41, 0xd0, 0x4b, 0x7b, 0xbe, 0x3b, 0xea, 0xb6,
	0xa6, 0x6c, 0xce, 0x96, 0x97, 0x81, 0x7b, 0xd8, 0x3a, 0x3f, 0xc1, 0xc8, 0x38, 0x57, 0x2c, 0xb4,
	0x73, 0xef, 0xc9, 0x1d, 0x97, 0x95, 0x7a, 0x85, 0x98, 0xca, 0xa9, 0x33, 0x3f, 0x5b, 0x4e, 0x36,
	0x0b, 0xfe, 0x6f, 0x43, 0xbe, 0xeb, 0x57, 0x83, 0x89, 0xe5, 0x9c, 0x7f, 0x32, 0x67, 0xcc, 0xc2,
	0x13, 0x20, 0xd8, 0x7c, 0xb5, 0x3e, 0xfb, 0x6e, 0x7d, 0x76, 0x68, 0x7d, 0xf6, 0x7c, 0x3f, 0x68,
	0x7b, 0x42, 0xda, 0xe3, 0x0c, 0x3a, 0xa8, 0x0b, 0xeb, 0xff, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xd3, 0xf6, 0xfb, 0x6a, 0x81, 0x01, 0x00, 0x00,
}

func (m *SecurityRoleBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SecurityRoleBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SecurityRoleBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subjects) > 0 {
		for iNdEx := len(m.Subjects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subjects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSecurityRoleBinding(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintSecurityRoleBinding(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSecurityRoleBinding(dAtA []byte, offset int, v uint64) int {
	offset -= sovSecurityRoleBinding(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SecurityRoleBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovSecurityRoleBinding(uint64(l))
	}
	if len(m.Subjects) > 0 {
		for _, e := range m.Subjects {
			l = e.Size()
			n += 1 + l + sovSecurityRoleBinding(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSecurityRoleBinding(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSecurityRoleBinding(x uint64) (n int) {
	return sovSecurityRoleBinding(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SecurityRoleBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecurityRoleBinding
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SecurityRoleBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SecurityRoleBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityRoleBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecurityRoleBinding
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, &Subject{})
			if err := m.Subjects[len(m.Subjects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecurityRoleBinding(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSecurityRoleBinding
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecurityRoleBinding(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecurityRoleBinding
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityRoleBinding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecurityRoleBinding
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSecurityRoleBinding
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSecurityRoleBinding
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSecurityRoleBinding
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSecurityRoleBinding(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSecurityRoleBinding
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSecurityRoleBinding = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecurityRoleBinding   = fmt.Errorf("proto: integer overflow")
)
