// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/traffic/v1/service_route.proto

// Service Routes can be used by service owners to configure traffic
// shifting across different versions of a service in a traffic
// group. Traffic to this service can originate from sidecars in same
// or different traffic groups as well as gateways.
//
// The following example creates a traffic group for the sidecars in
// `ns1`, `ns2` and `ns3` namespaces owned by its parent workspace
// `w1` under tenant `mycompany` and defines a service route for the
// `reviews` service in `ns1` namespace with two subsets `v1` and
// `v2`. 80% of the traffic to the reviews service is sent to `v1`
// while the remaining 20% is sent to `v2`.
//
// ```yaml
// apiVersion: traffic.tsb.io/v1
// kind: Group
// metadata:
//   name: t1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelectors:
//   - name: */ns1
//   - name: */ns2
//   - name: */ns3
//   configMode: TETRATE
//```
//
// And the service route for `reviews.com` service in `ns1` namespace
//
// ```yaml
// apiVersion: traffic.tsb.io/v1
// kind: ServiceRoute
// metadata:
//   name: reviews
//   group: t1
//   workspace: w1
//   tenant: mycompany
// spec:
//   service: ns1/reviews.com
//   subsets:
//   - name: v1
//     labels:
//       version: v1
//     weight: 80
//   - name: v2
//     labels:
//       version: v2
//     weight: 20
//```
//

package v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A service route controls routing configurations for traffic to a
// service in a traffic group.
type ServiceRoute struct {
	// The service on which the configuration is being applied. Must be in namespace/FQDN format.
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// The set of versions of a service and the percentage of traffic to
	// send to each version.
	Subsets              []*ServiceRoute_Subset `protobuf:"bytes,2,rep,name=subsets,proto3" json:"subsets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ServiceRoute) Reset()         { *m = ServiceRoute{} }
func (m *ServiceRoute) String() string { return proto.CompactTextString(m) }
func (*ServiceRoute) ProtoMessage()    {}
func (*ServiceRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f15e54ddeb0f0b, []int{0}
}
func (m *ServiceRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRoute.Merge(m, src)
}
func (m *ServiceRoute) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRoute.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRoute proto.InternalMessageInfo

func (m *ServiceRoute) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ServiceRoute) GetSubsets() []*ServiceRoute_Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

// Subset denotes a specific version of a service. The pods/VMs of a
// subset should be uniquely identifiable using their labels.
type ServiceRoute_Subset struct {
	// Name used to refer to the subset.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels apply a filter over the endpoints of a service in the service registry.
	Labels map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Percentage of traffic to be sent to this subset. The sum of
	// weights across all subsets should add up to 100.
	Weight               uint32   `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceRoute_Subset) Reset()         { *m = ServiceRoute_Subset{} }
func (m *ServiceRoute_Subset) String() string { return proto.CompactTextString(m) }
func (*ServiceRoute_Subset) ProtoMessage()    {}
func (*ServiceRoute_Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_22f15e54ddeb0f0b, []int{0, 0}
}
func (m *ServiceRoute_Subset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceRoute_Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceRoute_Subset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceRoute_Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRoute_Subset.Merge(m, src)
}
func (m *ServiceRoute_Subset) XXX_Size() int {
	return m.Size()
}
func (m *ServiceRoute_Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRoute_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRoute_Subset proto.InternalMessageInfo

func (m *ServiceRoute_Subset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceRoute_Subset) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ServiceRoute_Subset) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*ServiceRoute)(nil), "tetrateio.api.tsb.traffic.v1.ServiceRoute")
	proto.RegisterType((*ServiceRoute_Subset)(nil), "tetrateio.api.tsb.traffic.v1.ServiceRoute.Subset")
	proto.RegisterMapType((map[string]string)(nil), "tetrateio.api.tsb.traffic.v1.ServiceRoute.Subset.LabelsEntry")
}

func init() { proto.RegisterFile("tsb/traffic/v1/service_route.proto", fileDescriptor_22f15e54ddeb0f0b) }

var fileDescriptor_22f15e54ddeb0f0b = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0xeb, 0xd3, 0x30,
	0x14, 0xc7, 0x49, 0xab, 0x1d, 0x66, 0x0e, 0x35, 0x08, 0x2b, 0x55, 0xe6, 0x18, 0x82, 0x03, 0x59,
	0x42, 0x27, 0x82, 0x0a, 0x1e, 0x36, 0xf0, 0xa4, 0xa7, 0xee, 0x36, 0x71, 0x23, 0xed, 0xde, 0xba,
	0x60, 0xd7, 0x94, 0x34, 0xad, 0xf6, 0x3f, 0xf4, 0xe8, 0xc5, 0xfb, 0xd8, 0xc1, 0x3f, 0xc2, 0x93,
	0x2c, 0x69, 0x65, 0x22, 0x08, 0xbf, 0x4b, 0x79, 0xfd, 0xbe, 0x7c, 0xbf, 0xef, 0x13, 0x5e, 0xf0,
	0x44, 0x97, 0x31, 0xd3, 0x8a, 0xef, 0xf7, 0x22, 0x61, 0x75, 0xc8, 0x4a, 0x50, 0xb5, 0x48, 0x60,
	0xab, 0x64, 0xa5, 0x81, 0x16, 0x4a, 0x6a, 0x49, 0x1e, 0x6b, 0xd0, 0x8a, 0x6b, 0x10, 0x92, 0xf2,
	0x42, 0x50, 0x5d, 0xc6, 0xb4, 0x75, 0xd0, 0x3a, 0x0c, 0x9e, 0xa4, 0x52, 0xa6, 0x19, 0x30, 0x5e,
	0x08, 0xb6, 0x17, 0x90, 0xed, 0xb6, 0x31, 0x1c, 0x78, 0x2d, 0xa4, 0xb2, 0xf6, 0x60, 0x91, 0x0a,
	0x7d, 0xa8, 0x62, 0x9a, 0xc8, 0x23, 0x83, 0xbc, 0x96, 0x4d, 0xa1, 0xe4, 0xd7, 0x86, 0x99, 0x66,
	0x32, 0x4b, 0x21, 0x9f, 0xd5, 0x3c, 0x13, 0x3b, 0xae, 0x81, 0xfd, 0x53, 0xd8, 0x88, 0xc9, 0x4f,
	0x07, 0xdf, 0x5d, 0x59, 0xb2, 0xe8, 0x02, 0x46, 0x42, 0xdc, 0x6b, 0x49, 0x7d, 0x34, 0x46, 0xd3,
	0x3b, 0xcb, 0xe1, 0x69, 0xe1, 0xfc, 0x5a, 0x3e, 0x50, 0xf7, 0xe6, 0x83, 0xcd, 0xc7, 0x0d, 0xfb,
	0xf4, 0x9c, 0x99, 0xef, 0xd3, 0xa8, 0x3b, 0x47, 0xde, 0xe3, 0x5e, 0x59, 0xc5, 0x25, 0xe8, 0xd2,
	0x77, 0xc6, 0xee, 0xb4, 0x3f, 0x0f, 0xe9, 0xff, 0xee, 0x45, 0xaf, 0xe7, 0xd1, 0x95, 0x71, 0x46,
	0x5d, 0x42, 0xf0, 0x03, 0x61, 0xcf, 0x6a, 0x64, 0x88, 0x6f, 0xe5, 0xfc, 0xd8, 0x71, 0xb8, 0xa7,
	0x85, 0x13, 0x19, 0x81, 0xac, 0xb1, 0x97, 0xf1, 0x18, 0xb2, 0x6e, 0xde, 0xdb, 0x1b, 0xcf, 0xa3,
	0x1f, 0x8c, 0xff, 0x5d, 0xae, 0x55, 0x63, 0x93, 0xdb, 0x44, 0xf2, 0x08, 0x7b, 0x5f, 0x40, 0xa4,
	0x07, 0xed, 0xbb, 0x63, 0x34, 0x1d, 0xb4, 0x4d, 0x2b, 0x05, 0xaf, 0x71, 0xff, 0xca, 0x48, 0xee,
	0x63, 0xf7, 0x33, 0x34, 0x96, 0x2f, 0xba, 0x94, 0xe4, 0x21, 0xbe, 0x5d, 0xf3, 0xac, 0x02, 0xdf,
	0x31, 0x9a, 0xfd, 0x79, 0xe3, 0xbc, 0x42, 0xcb, 0x97, 0xdf, 0xce, 0x23, 0xf4, 0xfd, 0x3c, 0x42,
	0xa7, 0xf3, 0x08, 0xad, 0x9f, 0x5d, 0x6d, 0xee, 0x0f, 0xbb, 0x59, 0xf4, 0xdf, 0xaf, 0x26, 0xf6,
	0xcc, 0x9a, 0x5e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xa3, 0xe2, 0x21, 0x4e, 0x02, 0x00,
	0x00,
}

func (m *ServiceRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Subsets) > 0 {
		for iNdEx := len(m.Subsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintServiceRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintServiceRoute(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceRoute_Subset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceRoute_Subset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceRoute_Subset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != 0 {
		i = encodeVarintServiceRoute(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintServiceRoute(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintServiceRoute(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintServiceRoute(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintServiceRoute(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovServiceRoute(uint64(l))
	}
	if len(m.Subsets) > 0 {
		for _, e := range m.Subsets {
			l = e.Size()
			n += 1 + l + sovServiceRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceRoute_Subset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovServiceRoute(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovServiceRoute(uint64(len(k))) + 1 + len(v) + sovServiceRoute(uint64(len(v)))
			n += mapEntrySize + 1 + sovServiceRoute(uint64(mapEntrySize))
		}
	}
	if m.Weight != 0 {
		n += 1 + sovServiceRoute(uint64(m.Weight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServiceRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceRoute(x uint64) (n int) {
	return sovServiceRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subsets = append(m.Subsets, &ServiceRoute_Subset{})
			if err := m.Subsets[len(m.Subsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceRoute_Subset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServiceRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowServiceRoute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceRoute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthServiceRoute
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthServiceRoute
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowServiceRoute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthServiceRoute
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthServiceRoute
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipServiceRoute(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthServiceRoute
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServiceRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceRoute
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthServiceRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServiceRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServiceRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthServiceRoute
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServiceRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceRoute   = fmt.Errorf("proto: integer overflow")
)
