// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/internal/v1/internal.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v11 "github.com/tetrateio/api/tsb/rbac/v1"
	v1 "github.com/tetrateio/api/tsb/types/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_a702199a77438d56, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type TenantName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TenantName) Reset()         { *m = TenantName{} }
func (m *TenantName) String() string { return proto.CompactTextString(m) }
func (*TenantName) ProtoMessage()    {}
func (*TenantName) Descriptor() ([]byte, []int) {
	return fileDescriptor_a702199a77438d56, []int{1}
}
func (m *TenantName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantName.Merge(m, src)
}
func (m *TenantName) XXX_Size() int {
	return m.Size()
}
func (m *TenantName) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantName.DiscardUnknown(m)
}

var xxx_messageInfo_TenantName proto.InternalMessageInfo

func (m *TenantName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ObjectArray struct {
	Values               *v1.Object `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ObjectArray) Reset()         { *m = ObjectArray{} }
func (m *ObjectArray) String() string { return proto.CompactTextString(m) }
func (*ObjectArray) ProtoMessage()    {}
func (*ObjectArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_a702199a77438d56, []int{2}
}
func (m *ObjectArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectArray.Merge(m, src)
}
func (m *ObjectArray) XXX_Size() int {
	return m.Size()
}
func (m *ObjectArray) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectArray.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectArray proto.InternalMessageInfo

func (m *ObjectArray) GetValues() *v1.Object {
	if m != nil {
		return m.Values
	}
	return nil
}

type UserResources struct {
	Values               []*UserResources_ResourceAndPermission `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *UserResources) Reset()         { *m = UserResources{} }
func (m *UserResources) String() string { return proto.CompactTextString(m) }
func (*UserResources) ProtoMessage()    {}
func (*UserResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_a702199a77438d56, []int{3}
}
func (m *UserResources) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserResources.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResources.Merge(m, src)
}
func (m *UserResources) XXX_Size() int {
	return m.Size()
}
func (m *UserResources) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResources.DiscardUnknown(m)
}

var xxx_messageInfo_UserResources proto.InternalMessageInfo

func (m *UserResources) GetValues() []*UserResources_ResourceAndPermission {
	if m != nil {
		return m.Values
	}
	return nil
}

type UserResources_ResourceAndPermission struct {
	// This is the TSB object without the spec field to reduce the
	// load on the server.  The object will have object meta,
	// apiVersion and the Kind fields to be able to identify the the
	// resource.
	Resource             *v1.Object     `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Permission           v11.Permission `protobuf:"varint,2,opt,name=permission,proto3,enum=tetrateio.api.tsb.rbac.v1.Permission" json:"permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserResources_ResourceAndPermission) Reset()         { *m = UserResources_ResourceAndPermission{} }
func (m *UserResources_ResourceAndPermission) String() string { return proto.CompactTextString(m) }
func (*UserResources_ResourceAndPermission) ProtoMessage()    {}
func (*UserResources_ResourceAndPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_a702199a77438d56, []int{3, 0}
}
func (m *UserResources_ResourceAndPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserResources_ResourceAndPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserResources_ResourceAndPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserResources_ResourceAndPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResources_ResourceAndPermission.Merge(m, src)
}
func (m *UserResources_ResourceAndPermission) XXX_Size() int {
	return m.Size()
}
func (m *UserResources_ResourceAndPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResources_ResourceAndPermission.DiscardUnknown(m)
}

var xxx_messageInfo_UserResources_ResourceAndPermission proto.InternalMessageInfo

func (m *UserResources_ResourceAndPermission) GetResource() *v1.Object {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *UserResources_ResourceAndPermission) GetPermission() v11.Permission {
	if m != nil {
		return m.Permission
	}
	return v11.Permission_INVALID
}

func init() {
	proto.RegisterType((*User)(nil), "tetrateio.api.tsb.internal.v1.User")
	proto.RegisterType((*TenantName)(nil), "tetrateio.api.tsb.internal.v1.TenantName")
	proto.RegisterType((*ObjectArray)(nil), "tetrateio.api.tsb.internal.v1.ObjectArray")
	proto.RegisterType((*UserResources)(nil), "tetrateio.api.tsb.internal.v1.UserResources")
	proto.RegisterType((*UserResources_ResourceAndPermission)(nil), "tetrateio.api.tsb.internal.v1.UserResources.ResourceAndPermission")
}

func init() { proto.RegisterFile("tsb/internal/v1/internal.proto", fileDescriptor_a702199a77438d56) }

var fileDescriptor_a702199a77438d56 = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xd3, 0x2a, 0x2a, 0x13, 0xc1, 0x61, 0xa5, 0x96, 0xc8, 0x12, 0x56, 0x64, 0x84, 0x14,
	0x10, 0xac, 0x15, 0x23, 0x71, 0xe0, 0x80, 0x94, 0x20, 0x88, 0x7a, 0xa1, 0x28, 0xc0, 0xa5, 0xb7,
	0xb5, 0x3b, 0x02, 0x23, 0x67, 0xd7, 0xda, 0x1d, 0x1b, 0xe5, 0xc0, 0x1f, 0xf0, 0x0d, 0x7c, 0x0f,
	0x47, 0x3e, 0x01, 0xe5, 0xca, 0x4f, 0xa0, 0x5d, 0x3b, 0x8e, 0x81, 0xa8, 0x6d, 0x6e, 0x63, 0xcf,
	0x7b, 0x6f, 0x66, 0xde, 0xcc, 0x42, 0x40, 0x26, 0x89, 0x32, 0x49, 0xa8, 0xa5, 0xc8, 0xa3, 0x6a,
	0xd2, 0xc6, 0xbc, 0xd0, 0x8a, 0x14, 0xbb, 0x47, 0x48, 0x5a, 0x10, 0x66, 0x8a, 0x8b, 0x22, 0xe3,
	0x64, 0x12, 0xde, 0x22, 0xaa, 0x89, 0x7f, 0x6a, 0xe9, 0x3a, 0x11, 0xa9, 0xa5, 0x6a, 0x95, 0x63,
	0x4d, 0xf3, 0x87, 0xf6, 0x3f, 0xad, 0x0a, 0x34, 0x36, 0xe1, 0x82, 0x3a, 0x13, 0xc6, 0x70, 0xf4,
	0xc1, 0xa0, 0x66, 0x0c, 0x8e, 0xa4, 0x58, 0xe2, 0xd0, 0x1b, 0x79, 0xe3, 0x5b, 0x0b, 0x17, 0xb3,
	0x53, 0xe8, 0x13, 0x4a, 0x21, 0x69, 0xd8, 0x73, 0x7f, 0x9b, 0xaf, 0x70, 0x04, 0xf0, 0xde, 0x45,
	0x6f, 0x2c, 0x6a, 0x07, 0x33, 0x3c, 0x83, 0xc1, 0x79, 0xf2, 0x19, 0x53, 0x9a, 0x6a, 0x2d, 0x56,
	0xec, 0x39, 0xf4, 0x2b, 0x91, 0x97, 0x68, 0x1c, 0x68, 0x10, 0x87, 0xfc, 0xff, 0x31, 0xea, 0xa6,
	0xaa, 0x09, 0xaf, 0x89, 0x8b, 0x86, 0x11, 0x7e, 0xeb, 0xc1, 0x6d, 0xdb, 0xe1, 0x02, 0x8d, 0x2a,
	0x75, 0x8a, 0x86, 0x5d, 0xb4, 0x6a, 0x87, 0xa3, 0xc3, 0xf1, 0x20, 0x9e, 0xf1, 0x2b, 0x4d, 0xe1,
	0x7f, 0xb1, 0xf9, 0x26, 0x9a, 0xca, 0xcb, 0xb7, 0xa8, 0x97, 0x99, 0x31, 0x99, 0x92, 0x9b, 0x6a,
	0xfe, 0x77, 0x0f, 0x4e, 0x76, 0x22, 0xd8, 0x0b, 0x38, 0xd6, 0x4d, 0x62, 0x8f, 0x29, 0x5a, 0x0e,
	0x7b, 0x05, 0x50, 0xb4, 0x6a, 0xce, 0xd0, 0x3b, 0xf1, 0x83, 0x1d, 0x0a, 0x76, 0x7b, 0x56, 0xa0,
	0xd3, 0x5c, 0x87, 0x18, 0xff, 0xee, 0xc1, 0xf1, 0x59, 0x33, 0x1c, 0x2b, 0xe0, 0x64, 0x8e, 0x34,
	0xcd, 0xf3, 0x7a, 0x1d, 0x5b, 0x8b, 0x1e, 0x5e, 0x63, 0xc9, 0x76, 0x7d, 0xfe, 0xa3, 0x6b, 0xa0,
	0x9d, 0x3d, 0x86, 0x07, 0xec, 0x2b, 0x04, 0x73, 0xa4, 0x97, 0x79, 0x69, 0xa8, 0x63, 0xea, 0x6b,
	0xa5, 0xdf, 0x61, 0x8e, 0x29, 0x29, 0xcd, 0x9e, 0x5c, 0xe5, 0x8a, 0xad, 0x68, 0x0a, 0x91, 0xe2,
	0x06, 0xbe, 0x67, 0x79, 0x09, 0x77, 0xe7, 0xb8, 0x9d, 0xf3, 0xfc, 0x8b, 0xc4, 0xcb, 0xd9, 0xca,
	0x1d, 0xf0, 0xfd, 0x1b, 0x5c, 0x81, 0xff, 0x78, 0x9f, 0x53, 0x09, 0x0f, 0x66, 0xcf, 0x7e, 0xac,
	0x03, 0xef, 0xe7, 0x3a, 0xf0, 0x7e, 0xad, 0x03, 0xef, 0x62, 0xfc, 0x31, 0xa3, 0x4f, 0x65, 0xc2,
	0x53, 0xb5, 0x8c, 0x5a, 0x9d, 0x48, 0x14, 0x59, 0xf4, 0xcf, 0xab, 0x4d, 0xfa, 0xee, 0x71, 0x3d,
	0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x00, 0xea, 0x32, 0x8f, 0xcf, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalClient interface {
	// Used by tsbd. Argument is an object containing the tenant name.
	// Returns an array of objects.
	// Look at the object metadata of each element to identify the type.
	GetAllTenantResources(ctx context.Context, in *TenantName, opts ...grpc.CallOption) (*ObjectArray, error)
	// Used by UI.
	// returns an array of Cluster objects.
	// Where each cluster has the list of namespaces/services selected by the selector.
	GetClusterResourcesForSelector(ctx context.Context, in *v1.NamespaceSelector, opts ...grpc.CallOption) (*ObjectArray, error)
	// Used by UI.
	// returns an array of object metadata and the user's permissions on that object.
	GetResourcesOwnedByUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResources, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetAllTenantResources(ctx context.Context, in *TenantName, opts ...grpc.CallOption) (*ObjectArray, error) {
	out := new(ObjectArray)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.internal.v1.Internal/GetAllTenantResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetClusterResourcesForSelector(ctx context.Context, in *v1.NamespaceSelector, opts ...grpc.CallOption) (*ObjectArray, error) {
	out := new(ObjectArray)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.internal.v1.Internal/GetClusterResourcesForSelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetResourcesOwnedByUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResources, error) {
	out := new(UserResources)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.internal.v1.Internal/GetResourcesOwnedByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
type InternalServer interface {
	// Used by tsbd. Argument is an object containing the tenant name.
	// Returns an array of objects.
	// Look at the object metadata of each element to identify the type.
	GetAllTenantResources(context.Context, *TenantName) (*ObjectArray, error)
	// Used by UI.
	// returns an array of Cluster objects.
	// Where each cluster has the list of namespaces/services selected by the selector.
	GetClusterResourcesForSelector(context.Context, *v1.NamespaceSelector) (*ObjectArray, error)
	// Used by UI.
	// returns an array of object metadata and the user's permissions on that object.
	GetResourcesOwnedByUser(context.Context, *User) (*UserResources, error)
}

// UnimplementedInternalServer can be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (*UnimplementedInternalServer) GetAllTenantResources(ctx context.Context, req *TenantName) (*ObjectArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTenantResources not implemented")
}
func (*UnimplementedInternalServer) GetClusterResourcesForSelector(ctx context.Context, req *v1.NamespaceSelector) (*ObjectArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterResourcesForSelector not implemented")
}
func (*UnimplementedInternalServer) GetResourcesOwnedByUser(ctx context.Context, req *User) (*UserResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesOwnedByUser not implemented")
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_GetAllTenantResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetAllTenantResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.internal.v1.Internal/GetAllTenantResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetAllTenantResources(ctx, req.(*TenantName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetClusterResourcesForSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.NamespaceSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetClusterResourcesForSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.internal.v1.Internal/GetClusterResourcesForSelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetClusterResourcesForSelector(ctx, req.(*v1.NamespaceSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetResourcesOwnedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetResourcesOwnedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.internal.v1.Internal/GetResourcesOwnedByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetResourcesOwnedByUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tsb.internal.v1.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTenantResources",
			Handler:    _Internal_GetAllTenantResources_Handler,
		},
		{
			MethodName: "GetClusterResourcesForSelector",
			Handler:    _Internal_GetClusterResourcesForSelector_Handler,
		},
		{
			MethodName: "GetResourcesOwnedByUser",
			Handler:    _Internal_GetResourcesOwnedByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsb/internal/v1/internal.proto",
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TenantName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ObjectArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Values != nil {
		{
			size, err := m.Values.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserResources) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Values[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInternal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserResources_ResourceAndPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserResources_ResourceAndPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserResources_ResourceAndPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Permission != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TenantName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ObjectArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Values != nil {
		l = m.Values.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserResources_ResourceAndPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovInternal(uint64(m.Permission))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Values == nil {
				m.Values = &v1.Object{}
			}
			if err := m.Values.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserResources) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserResources: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserResources: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &UserResources_ResourceAndPermission{})
			if err := m.Values[len(m.Values)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserResources_ResourceAndPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAndPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAndPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &v1.Object{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= v11.Permission(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthInternal
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInternal(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthInternal
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInternal = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal   = fmt.Errorf("proto: integer overflow")
)
