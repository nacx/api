// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/internal/v1/internal.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/tetrateio/api/tsb/types/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tsb/internal/v1/internal.proto", fileDescriptor_a702199a77438d56) }

var fileDescriptor_a702199a77438d56 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4a, 0xc6, 0x30,
	0x14, 0x46, 0xcd, 0x22, 0x92, 0x31, 0x20, 0xca, 0x0f, 0x66, 0xe8, 0xe4, 0x62, 0x42, 0x15, 0xdc,
	0x75, 0xb0, 0xb8, 0x28, 0xa8, 0x93, 0xdb, 0x4d, 0xb8, 0x68, 0x24, 0x4d, 0x42, 0x72, 0x5b, 0xf0,
	0x0d, 0x1d, 0x7d, 0x01, 0x41, 0xfa, 0x24, 0xd2, 0x56, 0x2b, 0x28, 0xfc, 0x74, 0xbb, 0xc3, 0x39,
	0xe7, 0xc2, 0xc7, 0x25, 0x15, 0xa3, 0x5d, 0x20, 0xcc, 0x01, 0xbc, 0xee, 0xeb, 0xe5, 0x56, 0x29,
	0x47, 0x8a, 0xe2, 0x88, 0x90, 0x32, 0x10, 0xba, 0xa8, 0x20, 0x39, 0x45, 0xc5, 0xa8, 0x85, 0xe8,
	0xeb, 0xcd, 0xe1, 0xa8, 0xd3, 0x6b, 0xc2, 0x32, 0xba, 0xd3, 0x31, 0x8b, 0xa7, 0x1f, 0x8c, 0xef,
	0x5d, 0x7f, 0x93, 0x02, 0xf8, 0x7e, 0x83, 0x74, 0xe1, 0xfd, 0x03, 0x06, 0x08, 0x74, 0x87, 0x25,
	0x76, 0xd9, 0x62, 0x11, 0x95, 0xfa, 0xdf, 0x9f, 0x2b, 0x7d, 0xad, 0x6e, 0xcd, 0x0b, 0x5a, 0xda,
	0xac, 0x60, 0xaa, 0x1d, 0x11, 0xf8, 0x41, 0x83, 0xbf, 0xe5, 0xab, 0x98, 0xef, 0xd1, 0xa3, 0xa5,
	0x98, 0xc5, 0xc9, 0xb6, 0xc0, 0x0d, 0xb4, 0x58, 0x12, 0x58, 0xfc, 0xc1, 0xd7, 0xfd, 0xbb, 0x3c,
	0x7f, 0x1b, 0x24, 0x7b, 0x1f, 0x24, 0xfb, 0x1c, 0x24, 0x7b, 0x3c, 0x7e, 0x72, 0xf4, 0xdc, 0x19,
	0x65, 0x63, 0xab, 0x17, 0x5b, 0x43, 0x72, 0xfa, 0xcf, 0xbe, 0x66, 0x77, 0x9a, 0xe7, 0xec, 0x2b,
	0x00, 0x00, 0xff, 0xff, 0x47, 0x57, 0x3a, 0xa5, 0x79, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalClient interface {
	// Used by UI and tsbd.
	// Returns an array of objects embedded inside the Object.spec.
	// Look at the object metadata of each element to identify the type.
	GetAllTenantResources(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error)
	// Used by UI.
	// returns an array of Cluster objects.
	// Where each cluster has the list of namespaces/services selected by the selector.
	GetResourcesForSelector(ctx context.Context, in *v1.NamespaceSelector, opts ...grpc.CallOption) (*v1.Object, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) GetAllTenantResources(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error) {
	out := new(v1.Object)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.internal.v1.Internal/GetAllTenantResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) GetResourcesForSelector(ctx context.Context, in *v1.NamespaceSelector, opts ...grpc.CallOption) (*v1.Object, error) {
	out := new(v1.Object)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.internal.v1.Internal/GetResourcesForSelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
type InternalServer interface {
	// Used by UI and tsbd.
	// Returns an array of objects embedded inside the Object.spec.
	// Look at the object metadata of each element to identify the type.
	GetAllTenantResources(context.Context, *v1.Object) (*v1.Object, error)
	// Used by UI.
	// returns an array of Cluster objects.
	// Where each cluster has the list of namespaces/services selected by the selector.
	GetResourcesForSelector(context.Context, *v1.NamespaceSelector) (*v1.Object, error)
}

// UnimplementedInternalServer can be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (*UnimplementedInternalServer) GetAllTenantResources(ctx context.Context, req *v1.Object) (*v1.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTenantResources not implemented")
}
func (*UnimplementedInternalServer) GetResourcesForSelector(ctx context.Context, req *v1.NamespaceSelector) (*v1.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcesForSelector not implemented")
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_GetAllTenantResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetAllTenantResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.internal.v1.Internal/GetAllTenantResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetAllTenantResources(ctx, req.(*v1.Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_GetResourcesForSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.NamespaceSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).GetResourcesForSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.internal.v1.Internal/GetResourcesForSelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).GetResourcesForSelector(ctx, req.(*v1.NamespaceSelector))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tsb.internal.v1.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTenantResources",
			Handler:    _Internal_GetAllTenantResources_Handler,
		},
		{
			MethodName: "GetResourcesForSelector",
			Handler:    _Internal_GetResourcesForSelector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsb/internal/v1/internal.proto",
}
