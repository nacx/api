// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/v1/service_account.proto

// `ServiceAccount` represents a local service account that can be used to log.
// into the platform.
// Service accounts are usually issued by the paltform itself for the different
// agents, but can be used to integrate with the platform.
// The following example creates a service account named `check` under the tenant
// `mycompany` .
//
// ```yaml
// apiVersion: api.tsb.tetrate.io/v1
// kind: ServiceAccount
// metadata:
//   name: check
//   tenant: mycompany
// spec:
//   principalName: check
//```
//

package v1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// `User` represents a user from the identity Provider that is allowed to log into
// the platform.
type ServiceAccount struct {
	// The name of the principal this service account represents.
	PrincipalName        string   `protobuf:"bytes,1,opt,name=principal_name,json=principalName,proto3" json:"principal_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAccount) Reset()         { *m = ServiceAccount{} }
func (m *ServiceAccount) String() string { return proto.CompactTextString(m) }
func (*ServiceAccount) ProtoMessage()    {}
func (*ServiceAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_70e6db1b276a5f95, []int{0}
}
func (m *ServiceAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccount.Merge(m, src)
}
func (m *ServiceAccount) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccount proto.InternalMessageInfo

func (m *ServiceAccount) GetPrincipalName() string {
	if m != nil {
		return m.PrincipalName
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceAccount)(nil), "tetrateio.api.tsb.v1.ServiceAccount")
}

func init() { proto.RegisterFile("tsb/v1/service_account.proto", fileDescriptor_70e6db1b276a5f95) }

var fileDescriptor_70e6db1b276a5f95 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0x49, 0x11, 0xc1, 0x80, 0x45, 0x8a, 0xa0, 0x14, 0xd9, 0x8a, 0x27, 0x2f, 0x26, 0x2c,
	0x3e, 0x41, 0xd7, 0xbb, 0x07, 0xbd, 0x79, 0x59, 0x26, 0xe9, 0xb8, 0x1d, 0xc8, 0xee, 0x84, 0xec,
	0x34, 0xcf, 0xe8, 0xd1, 0x47, 0x28, 0xfb, 0x18, 0x9e, 0x84, 0x86, 0xee, 0x6d, 0x60, 0xfe, 0x9f,
	0xef, 0xfb, 0xf5, 0x83, 0x8c, 0xce, 0xe6, 0xda, 0x8e, 0x98, 0x32, 0x79, 0x6c, 0xc1, 0x7b, 0x3e,
	0x0c, 0x62, 0x62, 0x62, 0xe1, 0xd5, 0xad, 0xa0, 0x24, 0x10, 0x24, 0x36, 0x10, 0xc9, 0xc8, 0xe8,
	0x4c, 0xae, 0xd7, 0x9b, 0x8e, 0xb9, 0x0b, 0x68, 0x21, 0x92, 0xfd, 0x26, 0x0c, 0xbb, 0xd6, 0xe1,
	0x1e, 0x32, 0x71, 0x2a, 0xb5, 0xf5, 0x5d, 0x86, 0x40, 0x3b, 0x10, 0xb4, 0xe7, 0xa3, 0x3c, 0x9e,
	0xde, 0xf4, 0xf2, 0xb3, 0x80, 0xb6, 0x85, 0xb3, 0xaa, 0xf5, 0x32, 0x26, 0x1a, 0x3c, 0x45, 0x08,
	0xed, 0x00, 0x3d, 0xde, 0xab, 0x47, 0xf5, 0x7c, 0xd5, 0xe8, 0xe3, 0x76, 0xf1, 0xd7, 0x5c, 0xa4,
	0xc5, 0x8d, 0xfa, 0xb8, 0x9e, 0x13, 0xef, 0xd0, 0x63, 0xf3, 0xf2, 0x33, 0x55, 0xea, 0x77, 0xaa,
	0xd4, 0x71, 0xaa, 0xd4, 0xd7, 0xa6, 0x23, 0xd9, 0x1f, 0x9c, 0xf1, 0xdc, 0xdb, 0xd9, 0xf6, 0xa4,
	0x56, 0x96, 0xb9, 0xcb, 0x13, 0xfa, 0xf5, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x40, 0xd8, 0x0d, 0xd5,
	0xea, 0x00, 0x00, 0x00,
}

func (m *ServiceAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PrincipalName) > 0 {
		i -= len(m.PrincipalName)
		copy(dAtA[i:], m.PrincipalName)
		i = encodeVarintServiceAccount(dAtA, i, uint64(len(m.PrincipalName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintServiceAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovServiceAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServiceAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrincipalName)
	if l > 0 {
		n += 1 + l + sovServiceAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovServiceAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozServiceAccount(x uint64) (n int) {
	return sovServiceAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServiceAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServiceAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServiceAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServiceAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServiceAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrincipalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServiceAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServiceAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServiceAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServiceAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServiceAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServiceAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServiceAccount
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthServiceAccount
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServiceAccount
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServiceAccount(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthServiceAccount
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServiceAccount = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServiceAccount   = fmt.Errorf("proto: integer overflow")
)
