// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

// $title: Security Group
// $description: Configurations to group a set of sidecars in a workspace for security.
// $location: https://tetrate.io/docs/reference/config/security/v1/group.html

// Security Groups allow grouping the sidecars in a set of namespaces
// owned by its parent workspace. Security related configurations can
// then be applied on the group to control the behavior of these
// sidecars. The group can be in one of two modes: `TETRATE` and
// `ISTIO`. `TETRATE` mode is a minimalistic mode that allows users to
// quickly configure the most commonly used features in the service
// mesh using Tetrate specific APIs, while the `ISTIO` mode provides
// more flexibility for power users by allowing them to configure the
// sidecar's security properties using a restricted subset of Istio
// Security APIs.
//
// The following example creates a security group for the sidecars in
// `ns1`, `ns2` and `ns3` namespaces owned by its parent workspace
// `w1` under tenant `mycompany`
//
// ```yaml
// apiVersion: security.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: t1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelectors:
//   - name: */ns1
//   - name: */ns2
//   - name: */ns3
//   configMode: TETRATE
//```
//
// And the associated security settings for the sidecars in the group
//
// ```yaml
// apiVersion: security.tsb.tetrate.io/v1
// kind: SecuritySetting
// metadata:
//   name: defaults
//   group: t1
//   workspace: w1
//   tenant: mycompany
// spec:
//   authentication: REQUIRED
//```
//
// Under the hood, Service Bridge translates these minimalistic
// settings into Istio APIs such as `PeerAuthentication`,
// `AuthorizationPolicy`, etc. for the namespaces managed by the
// security group. These APIs are then pushed to the Istio control
// planes of clusters where the workspace is applicable.
//
// It is possible to create a security group for namespaces in a
// specific cluster as long as the parent workspace owns those
// namespaces in that cluster. For example,
//
// ```yaml
// apiVersion: security.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: t1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelectors:
//   - name: c1/ns1 # pick ns1 namespace only from c1 cluster
//   - name: */ns2
//   - name: */ns3
//   configMode: TETRATE
//```
//
// In the `ISTIO` mode, it is possible to directly attach Istio
// `PeerAuthentication`, `RequestAuthentication`, and
// `AuthorizationPolicy` to the security group. These configurations
// will be validated for correctness and conflict free operations and
// then pushed to the appropriate Istio control planes.
//
// The following example declares a `PeerAuthentication` policy for a
// specific workload in the `ns1` namespace:
//
// ```yaml
// apiVersion: security.istio.io/v1beta1
// kind: PeerAuthentication
// metadata:
//   name: workload-mtls-disable
//   namespace: ns1
//   annotations:
//     tsb.tetrate.io/tenant: mycompany
//     tsb.tetrate.io/workspace: w1
//     tsb.tetrate.io/securityGroup: t1
// spec:
//   selector:
//     matchLabels:
//       app: reviews
//   mtls:
//     mode: DISABLE
// ```
//
// The namespace where the Istio APIs are applied will need to be part
// of the parent security group. In addition, each API object will need
// to have annotations to indicate the tenant, workspace and the
// security group to which it belongs to.
//
// TODO(rshriram): Document the list of fields in Istio APIs that are
// disallowed.
package tetrateio.api.tsb.security.v1;
option go_package = "github.com/tetrateio/api/tsb/security/v1";

import "tsb/types/v1/types.proto";

// A security group manages the security properties of sidecars in a
// group of namespaces owned by the parent workspace.
message Group {
  // Set of namespaces owned exclusively by this group. If omitted,
  // applies to all resources owned by the workspace.
  repeated tetrateio.api.tsb.types.v1.NamespaceSelector namespace_selectors = 1;

  // The Configuration types that will be added to this
  // group. `TETRATE` mode indicates that configurations added to this
  // group will use Tetrate APIs such as `SecuritySetting`. `ISTIO`
  // mode indicates that configurations added to this group will use
  // Istio Security APIs such as `PeerAuthentication`,
  // `RequestAuthentication`, and `AuthorizationPolicy`. Defaults to
  // `TETRATE` mode.
  tetrateio.api.tsb.types.v1.ConfigMode config_mode = 2;
}
