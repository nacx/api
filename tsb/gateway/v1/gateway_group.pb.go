// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/gateway/v1/gateway_group.proto

// Gateway Groups allow grouping the gateways in a set of namespaces
// owned by its parent workspace. Gateway related configurations can
// then be applied on the group to control the behavior of these
// gateways. The group can be in one of two modes: `TETRATE` and
// `ISTIO`. `TETRATE` mode is a minimalistic mode that allows users to
// quickly configure the most commonly used features in the service
// mesh using Tetrate specific APIs, while the `ISTIO` mode provides
// more flexibility for power users by allowing them to configure the
// gateways's traffic and security properties using a restricted
// subset of Istio Networking and Security APIs.
//
// The following example creates a gateway group for the gateways in
// `ns1`, `ns2` and `ns3` namespaces owned by its parent workspace
// `w1` under tenant `mycompany`
//
// ```yaml
// apiVersion: gateway.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: g1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelectors:
//   - name: */ns1
//   - name: */ns2
//   - name: */ns3
//   configMode: TETRATE
//```
//
// Under the hood, Service Bridge translates these minimalistic
// settings into Istio APIs such as `Gateway`, `VirtualService`,
// `AuthorizationPolicy`, etc. for the namespaces managed by the
// gateway group. These APIs are then pushed to the Istio control
// planes of clusters where the workspace is applicable.
//
// It is possible to create a gateway group for namespaces in a
// specific cluster as long as the parent workspace owns those
// namespaces in that cluster. For example,
//
// ```yaml
// apiVersion: gateway.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: g1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelectors:
//   - name: c1/ns1 # pick ns1 namespace only from c1 cluster
//   - name: */ns2
//   - name: */ns3
//   configMode: TETRATE
//```
//
// In the `ISTIO` mode, it is possible to directly attach Istio
// `VirtualService`, and `Gateway` to the gateway group. These
// configurations will be validated for correctness and conflict free
// operations and then pushed to the appropriate Istio control planes.
//
// The following example declares a `Gateway` and a `VirtualService`
// for a specific workload in the `ns1` namespace:
//
// ```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: Gateway
// metadata:
//   name: ingress
//   namespace: ns1
//   annotations:
//     tsb.tetrate.io/tenant: mycompany
//     tsb.tetrate.io/workspace: w1
//     tsb.tetrate.io/gatewayGroup: g1
// spec:
//   selector:
//       app: my-ingress-gateway
//   servers:
//   - port:
//       number: 80
//       name: http
//       protocol: HTTP
//     hosts:
//     - uk.bookinfo.com
//     - eu.bookinfo.com
// ```
//
// and the associated `VirtualService`
//
//```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: VirtualService
// metadata:
//   name: ingress-rule
//   namespace: ns1
//   annotations:
//     tsb.tetrate.io/tenant: mycompany
//     tsb.tetrate.io/workspace: w1
//     tsb.tetrate.io/gatewayGroup: g1
// spec:
//   hosts:
//   - uk.bookinfo.com
//   - eu.bookinfo.com
//   gateways:
//   - ns1/ingress # Has to bind to the same gateway
//   http:
//   - route:
//     - destination:
//         port:
//           number: 7777
//         host: reviews.ns1.svc.cluster.local
//```
//
// The namespace where the Istio APIs are applied will need to be part
// of the parent gateway group. In addition, each API object will need
// to have annotations to indicate the tenant, workspace and the
// gateway group to which it belongs to.
//
// TODO(rshriram): Document the list of fields in Istio APIs that are
// disallowed.

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/tetrateio/api/tsb/types/v1"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// A gateway group manages the gateways in a group of namespaces owned
// by the parent workspace.
type Group struct {
	// Set of namespaces owned exclusively by this group. If omitted,
	// applies to all resources owned by the workspace.
	NamespaceSelectors []*v1.NamespaceSelector `protobuf:"bytes,1,rep,name=namespace_selectors,json=namespaceSelectors,proto3" json:"namespace_selectors,omitempty"`
	// The Configuration types that will be added to this
	// group. `TETRATE` mode indicates that configurations added to this
	// group will use Tetrate APIs such as `IngressGateway`. `ISTIO`
	// mode indicates that configurations added to this group will use
	// Istio Networking APIs such as `Gateway` and
	// `VirtualService`. Defaults to `TETRATE` mode.
	ConfigMode           v1.ConfigMode `protobuf:"varint,2,opt,name=config_mode,json=configMode,proto3,enum=tetrateio.api.tsb.types.v1.ConfigMode" json:"config_mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2fab70b32ccea63, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetNamespaceSelectors() []*v1.NamespaceSelector {
	if m != nil {
		return m.NamespaceSelectors
	}
	return nil
}

func (m *Group) GetConfigMode() v1.ConfigMode {
	if m != nil {
		return m.ConfigMode
	}
	return v1.ConfigMode_TETRATE
}

func init() {
	proto.RegisterType((*Group)(nil), "tetrateio.api.tsb.gateway.v1.Group")
}

func init() { proto.RegisterFile("tsb/gateway/v1/gateway_group.proto", fileDescriptor_c2fab70b32ccea63) }

var fileDescriptor_c2fab70b32ccea63 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x29, 0x4e, 0xd2,
	0x4f, 0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0xd4, 0x2f, 0x33, 0x84, 0x31, 0xe3, 0xd3, 0x8b, 0xf2,
	0x4b, 0x0b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x64, 0x4a, 0x52, 0x4b, 0x8a, 0x12, 0x4b,
	0x52, 0x33, 0xf3, 0xf5, 0x12, 0x0b, 0x32, 0xf5, 0x4a, 0x8a, 0x93, 0xf4, 0xa0, 0xca, 0xf4, 0xca,
	0x0c, 0xa5, 0x24, 0x40, 0x26, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x83, 0xf4, 0x83, 0x19, 0x10, 0x7d,
	0x4a, 0x1b, 0x18, 0xb9, 0x58, 0xdd, 0x41, 0xe6, 0x08, 0xc5, 0x71, 0x09, 0xe7, 0x25, 0xe6, 0xa6,
	0x16, 0x17, 0x24, 0x26, 0xa7, 0xc6, 0x17, 0xa7, 0xe6, 0xa4, 0x26, 0x97, 0xe4, 0x17, 0x15, 0x4b,
	0x30, 0x2a, 0x30, 0x6b, 0x70, 0x1b, 0xe9, 0xea, 0x61, 0x9a, 0x0f, 0x31, 0xa6, 0xcc, 0x50, 0xcf,
	0x0f, 0xa6, 0x2d, 0x18, 0xaa, 0x2b, 0x48, 0x28, 0x0f, 0x5d, 0xa8, 0x58, 0xc8, 0x9d, 0x8b, 0x3b,
	0x39, 0x3f, 0x2f, 0x2d, 0x33, 0x3d, 0x3e, 0x37, 0x3f, 0x25, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83,
	0xcf, 0x48, 0x0d, 0x9f, 0xb9, 0xce, 0x60, 0xe5, 0xbe, 0xf9, 0x29, 0xa9, 0x41, 0x5c, 0xc9, 0x70,
	0xb6, 0x93, 0xe9, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x18,
	0xa5, 0x9e, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x37, 0x4b, 0x3f,
	0xb1, 0x20, 0x53, 0x1f, 0x35, 0xd4, 0x92, 0xd8, 0xc0, 0x1e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xce, 0x07, 0x99, 0xaa, 0x4e, 0x01, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConfigMode != 0 {
		i = encodeVarintGatewayGroup(dAtA, i, uint64(m.ConfigMode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NamespaceSelectors) > 0 {
		for iNdEx := len(m.NamespaceSelectors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NamespaceSelectors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGatewayGroup(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGatewayGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGatewayGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NamespaceSelectors) > 0 {
		for _, e := range m.NamespaceSelectors {
			l = e.Size()
			n += 1 + l + sovGatewayGroup(uint64(l))
		}
	}
	if m.ConfigMode != 0 {
		n += 1 + sovGatewayGroup(uint64(m.ConfigMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGatewayGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGatewayGroup(x uint64) (n int) {
	return sovGatewayGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGatewayGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceSelectors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGatewayGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGatewayGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceSelectors = append(m.NamespaceSelectors, &v1.NamespaceSelector{})
			if err := m.NamespaceSelectors[len(m.NamespaceSelectors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigMode", wireType)
			}
			m.ConfigMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGatewayGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigMode |= v1.ConfigMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGatewayGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGatewayGroup
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGatewayGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGatewayGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGatewayGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGatewayGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGatewayGroup
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGatewayGroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGatewayGroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGatewayGroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGatewayGroup
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGatewayGroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGatewayGroup   = fmt.Errorf("proto: integer overflow")
)
