// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tsb/gateway/v1/ingress_gateway.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on IngressGateway with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IngressGateway) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetWorkloadSelector()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return IngressGatewayValidationError{
					field:  "WorkloadSelector",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetHttp() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return IngressGatewayValidationError{
						field:  fmt.Sprintf("Http[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// IngressGatewayValidationError is the validation error returned by
// IngressGateway.Validate if the designated constraints aren't met.
type IngressGatewayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IngressGatewayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IngressGatewayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IngressGatewayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IngressGatewayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IngressGatewayValidationError) ErrorName() string { return "IngressGatewayValidationError" }

// Error satisfies the builtin error interface
func (e IngressGatewayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIngressGateway.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IngressGatewayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IngressGatewayValidationError{}

// Validate checks the field values on HttpServer with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HttpServer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	{
		tmp := m.GetTls()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpServerValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAuthentication()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpServerValidationError{
					field:  "Authentication",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAuthorization()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpServerValidationError{
					field:  "Authorization",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetRouting()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpServerValidationError{
					field:  "Routing",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HttpServerValidationError is the validation error returned by
// HttpServer.Validate if the designated constraints aren't met.
type HttpServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpServerValidationError) ErrorName() string { return "HttpServerValidationError" }

// Error satisfies the builtin error interface
func (e HttpServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpServerValidationError{}

// Validate checks the field values on HttpRouting with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HttpRouting) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetStickySession()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpRoutingValidationError{
					field:  "StickySession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetCorsPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpRoutingValidationError{
					field:  "CorsPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRoutingValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// HttpRoutingValidationError is the validation error returned by
// HttpRouting.Validate if the designated constraints aren't met.
type HttpRoutingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRoutingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRoutingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRoutingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRoutingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRoutingValidationError) ErrorName() string { return "HttpRoutingValidationError" }

// Error satisfies the builtin error interface
func (e HttpRoutingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRouting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRoutingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRoutingValidationError{}

// Validate checks the field values on HttpRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HttpRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetModify()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpRuleValidationError{
					field:  "Modify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	switch m.RouteOrRedirect.(type) {

	case *HttpRule_Route:

		{
			tmp := m.GetRoute()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  "Route",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HttpRule_Redirect:

		{
			tmp := m.GetRedirect()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  "Redirect",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// HttpRuleValidationError is the validation error returned by
// HttpRule.Validate if the designated constraints aren't met.
type HttpRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRuleValidationError) ErrorName() string { return "HttpRuleValidationError" }

// Error satisfies the builtin error interface
func (e HttpRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRuleValidationError{}

// Validate checks the field values on HttpMatchCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpMatchCondition) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetUri()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpMatchConditionValidationError{
					field:  "Uri",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Headers

	return nil
}

// HttpMatchConditionValidationError is the validation error returned by
// HttpMatchCondition.Validate if the designated constraints aren't met.
type HttpMatchConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpMatchConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpMatchConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpMatchConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpMatchConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpMatchConditionValidationError) ErrorName() string {
	return "HttpMatchConditionValidationError"
}

// Error satisfies the builtin error interface
func (e HttpMatchConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpMatchCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpMatchConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpMatchConditionValidationError{}

// Validate checks the field values on StringMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringMatch) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		// no validation rules for Exact

	case *StringMatch_Prefix:
		// no validation rules for Prefix

	case *StringMatch_Regex:
		// no validation rules for Regex

	}

	return nil
}

// StringMatchValidationError is the validation error returned by
// StringMatch.Validate if the designated constraints aren't met.
type StringMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMatchValidationError) ErrorName() string { return "StringMatchValidationError" }

// Error satisfies the builtin error interface
func (e StringMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMatchValidationError{}

// Validate checks the field values on HTTPRewrite with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPRewrite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// HTTPRewriteValidationError is the validation error returned by
// HTTPRewrite.Validate if the designated constraints aren't met.
type HTTPRewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRewriteValidationError) ErrorName() string { return "HTTPRewriteValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRewriteValidationError{}

// Validate checks the field values on Headers with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Headers) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRequest()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HeadersValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetResponse()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HeadersValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HeadersValidationError is the validation error returned by Headers.Validate
// if the designated constraints aren't met.
type HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeadersValidationError) ErrorName() string { return "HeadersValidationError" }

// Error satisfies the builtin error interface
func (e HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeadersValidationError{}

// Validate checks the field values on HttpModifyAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HttpModifyAction) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRewrite()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpModifyActionValidationError{
					field:  "Rewrite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetHeaders()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpModifyActionValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HttpModifyActionValidationError is the validation error returned by
// HttpModifyAction.Validate if the designated constraints aren't met.
type HttpModifyActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpModifyActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpModifyActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpModifyActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpModifyActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpModifyActionValidationError) ErrorName() string { return "HttpModifyActionValidationError" }

// Error satisfies the builtin error interface
func (e HttpModifyActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpModifyAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpModifyActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpModifyActionValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Route) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Host

	// no validation rules for Port

	return nil
}

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on Redirect with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Redirect) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// RedirectValidationError is the validation error returned by
// Redirect.Validate if the designated constraints aren't met.
type RedirectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectValidationError) ErrorName() string { return "RedirectValidationError" }

// Error satisfies the builtin error interface
func (e RedirectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectValidationError{}

// Validate checks the field values on CorsPolicy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CorsPolicy) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetMaxAge()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CorsPolicyValidationError{
					field:  "MaxAge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAllowCredentials()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CorsPolicyValidationError{
					field:  "AllowCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CorsPolicyValidationError is the validation error returned by
// CorsPolicy.Validate if the designated constraints aren't met.
type CorsPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorsPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorsPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorsPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorsPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorsPolicyValidationError) ErrorName() string { return "CorsPolicyValidationError" }

// Error satisfies the builtin error interface
func (e CorsPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorsPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorsPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorsPolicyValidationError{}

// Validate checks the field values on ServerTLSSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServerTLSSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Mode

	// no validation rules for SecretName

	return nil
}

// ServerTLSSettingsValidationError is the validation error returned by
// ServerTLSSettings.Validate if the designated constraints aren't met.
type ServerTLSSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerTLSSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerTLSSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerTLSSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerTLSSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerTLSSettingsValidationError) ErrorName() string {
	return "ServerTLSSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ServerTLSSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerTLSSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerTLSSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerTLSSettingsValidationError{}

// Validate checks the field values on Authentication with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Authentication) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Authn.(type) {

	case *Authentication_Jwt:

		{
			tmp := m.GetJwt()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return AuthenticationValidationError{
						field:  "Jwt",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// AuthenticationValidationError is the validation error returned by
// Authentication.Validate if the designated constraints aren't met.
type AuthenticationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticationValidationError) ErrorName() string { return "AuthenticationValidationError" }

// Error satisfies the builtin error interface
func (e AuthenticationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthentication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticationValidationError{}

// Validate checks the field values on Authorization with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Authorization) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Authz.(type) {

	case *Authorization_External:

		{
			tmp := m.GetExternal()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return AuthorizationValidationError{
						field:  "External",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *Authorization_Local:

		{
			tmp := m.GetLocal()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return AuthorizationValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// AuthorizationValidationError is the validation error returned by
// Authorization.Validate if the designated constraints aren't met.
type AuthorizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizationValidationError) ErrorName() string { return "AuthorizationValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizationValidationError{}

// Validate checks the field values on LocalAuthzRule with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LocalAuthzRule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetFrom() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return LocalAuthzRuleValidationError{
						field:  fmt.Sprintf("From[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetTo() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return LocalAuthzRuleValidationError{
						field:  fmt.Sprintf("To[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// LocalAuthzRuleValidationError is the validation error returned by
// LocalAuthzRule.Validate if the designated constraints aren't met.
type LocalAuthzRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalAuthzRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalAuthzRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalAuthzRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalAuthzRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalAuthzRuleValidationError) ErrorName() string { return "LocalAuthzRuleValidationError" }

// Error satisfies the builtin error interface
func (e LocalAuthzRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalAuthzRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalAuthzRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalAuthzRuleValidationError{}

// Validate checks the field values on Subject with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subject) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetJwt()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SubjectValidationError{
					field:  "Jwt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SubjectValidationError is the validation error returned by Subject.Validate
// if the designated constraints aren't met.
type SubjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubjectValidationError) ErrorName() string { return "SubjectValidationError" }

// Error satisfies the builtin error interface
func (e SubjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubjectValidationError{}

// Validate checks the field values on HttpRouting_HTTPCookie with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpRouting_HTTPCookie) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Path

	{
		tmp := m.GetTtl()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpRouting_HTTPCookieValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HttpRouting_HTTPCookieValidationError is the validation error returned by
// HttpRouting_HTTPCookie.Validate if the designated constraints aren't met.
type HttpRouting_HTTPCookieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRouting_HTTPCookieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRouting_HTTPCookieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRouting_HTTPCookieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRouting_HTTPCookieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRouting_HTTPCookieValidationError) ErrorName() string {
	return "HttpRouting_HTTPCookieValidationError"
}

// Error satisfies the builtin error interface
func (e HttpRouting_HTTPCookieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRouting_HTTPCookie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRouting_HTTPCookieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRouting_HTTPCookieValidationError{}

// Validate checks the field values on HttpRouting_StickySession with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpRouting_StickySession) Validate() error {
	if m == nil {
		return nil
	}

	switch m.HashKey.(type) {

	case *HttpRouting_StickySession_Header:
		// no validation rules for Header

	case *HttpRouting_StickySession_Cookie:

		{
			tmp := m.GetCookie()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRouting_StickySessionValidationError{
						field:  "Cookie",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HttpRouting_StickySession_UseSourceIp:
		// no validation rules for UseSourceIp

	}

	return nil
}

// HttpRouting_StickySessionValidationError is the validation error returned by
// HttpRouting_StickySession.Validate if the designated constraints aren't met.
type HttpRouting_StickySessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRouting_StickySessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRouting_StickySessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRouting_StickySessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRouting_StickySessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRouting_StickySessionValidationError) ErrorName() string {
	return "HttpRouting_StickySessionValidationError"
}

// Error satisfies the builtin error interface
func (e HttpRouting_StickySessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRouting_StickySession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRouting_StickySessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRouting_StickySessionValidationError{}

// Validate checks the field values on Headers_HeaderOperations with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Headers_HeaderOperations) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Set

	// no validation rules for Add

	return nil
}

// Headers_HeaderOperationsValidationError is the validation error returned by
// Headers_HeaderOperations.Validate if the designated constraints aren't met.
type Headers_HeaderOperationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Headers_HeaderOperationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Headers_HeaderOperationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Headers_HeaderOperationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Headers_HeaderOperationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Headers_HeaderOperationsValidationError) ErrorName() string {
	return "Headers_HeaderOperationsValidationError"
}

// Error satisfies the builtin error interface
func (e Headers_HeaderOperationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaders_HeaderOperations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Headers_HeaderOperationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Headers_HeaderOperationsValidationError{}

// Validate checks the field values on Authentication_JWT with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Authentication_JWT) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Issuer

	switch m.Keys.(type) {

	case *Authentication_JWT_JwksUri:
		// no validation rules for JwksUri

	case *Authentication_JWT_Jwks:
		// no validation rules for Jwks

	}

	return nil
}

// Authentication_JWTValidationError is the validation error returned by
// Authentication_JWT.Validate if the designated constraints aren't met.
type Authentication_JWTValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Authentication_JWTValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Authentication_JWTValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Authentication_JWTValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Authentication_JWTValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Authentication_JWTValidationError) ErrorName() string {
	return "Authentication_JWTValidationError"
}

// Error satisfies the builtin error interface
func (e Authentication_JWTValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthentication_JWT.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Authentication_JWTValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Authentication_JWTValidationError{}

// Validate checks the field values on Authorization_ExternalAuthzBackend with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *Authorization_ExternalAuthzBackend) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	return nil
}

// Authorization_ExternalAuthzBackendValidationError is the validation error
// returned by Authorization_ExternalAuthzBackend.Validate if the designated
// constraints aren't met.
type Authorization_ExternalAuthzBackendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Authorization_ExternalAuthzBackendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Authorization_ExternalAuthzBackendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Authorization_ExternalAuthzBackendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Authorization_ExternalAuthzBackendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Authorization_ExternalAuthzBackendValidationError) ErrorName() string {
	return "Authorization_ExternalAuthzBackendValidationError"
}

// Error satisfies the builtin error interface
func (e Authorization_ExternalAuthzBackendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorization_ExternalAuthzBackend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Authorization_ExternalAuthzBackendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Authorization_ExternalAuthzBackendValidationError{}

// Validate checks the field values on Authorization_LocalAuthz with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Authorization_LocalAuthz) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRules() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Authorization_LocalAuthzValidationError{
						field:  fmt.Sprintf("Rules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// Authorization_LocalAuthzValidationError is the validation error returned by
// Authorization_LocalAuthz.Validate if the designated constraints aren't met.
type Authorization_LocalAuthzValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Authorization_LocalAuthzValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Authorization_LocalAuthzValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Authorization_LocalAuthzValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Authorization_LocalAuthzValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Authorization_LocalAuthzValidationError) ErrorName() string {
	return "Authorization_LocalAuthzValidationError"
}

// Error satisfies the builtin error interface
func (e Authorization_LocalAuthzValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorization_LocalAuthz.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Authorization_LocalAuthzValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Authorization_LocalAuthzValidationError{}

// Validate checks the field values on LocalAuthzRule_HttpOperation with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LocalAuthzRule_HttpOperation) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LocalAuthzRule_HttpOperationValidationError is the validation error returned
// by LocalAuthzRule_HttpOperation.Validate if the designated constraints
// aren't met.
type LocalAuthzRule_HttpOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocalAuthzRule_HttpOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocalAuthzRule_HttpOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocalAuthzRule_HttpOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocalAuthzRule_HttpOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocalAuthzRule_HttpOperationValidationError) ErrorName() string {
	return "LocalAuthzRule_HttpOperationValidationError"
}

// Error satisfies the builtin error interface
func (e LocalAuthzRule_HttpOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocalAuthzRule_HttpOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocalAuthzRule_HttpOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocalAuthzRule_HttpOperationValidationError{}

// Validate checks the field values on Subject_JWTClaims with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Subject_JWTClaims) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Iss

	// no validation rules for Sub

	// no validation rules for Other

	return nil
}

// Subject_JWTClaimsValidationError is the validation error returned by
// Subject_JWTClaims.Validate if the designated constraints aren't met.
type Subject_JWTClaimsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Subject_JWTClaimsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Subject_JWTClaimsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Subject_JWTClaimsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Subject_JWTClaimsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Subject_JWTClaimsValidationError) ErrorName() string {
	return "Subject_JWTClaimsValidationError"
}

// Error satisfies the builtin error interface
func (e Subject_JWTClaimsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubject_JWTClaims.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Subject_JWTClaimsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Subject_JWTClaimsValidationError{}
