// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

// $title: Gateway Group
// $description: Configurations to group a set of gateways in a workspace.
// $location: https://tetrate.io/docs/reference/config/gateway/v1/group.html

// Gateway Groups allow grouping the gateways in a set of namespaces
// owned by its parent workspace. Gateway related configurations can
// then be applied on the group to control the behavior of these
// gateways. The group can be in one of two modes: `TETRATE` and
// `ISTIO`. `TETRATE` mode is a minimalistic mode that allows users to
// quickly configure the most commonly used features in the service
// mesh using Tetrate specific APIs, while the `ISTIO` mode provides
// more flexibility for power users by allowing them to configure the
// gateways's traffic and security properties using a restricted
// subset of Istio Networking and Security APIs.
//
// The following example creates a gateway group for the gateways in
// `ns1`, `ns2` and `ns3` namespaces owned by its parent workspace
// `w1` under tenant `mycompany`
//
// ```yaml
// apiVersion: gateway.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: g1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelector:
//     names:
//     - */ns1
//     - */ns2
//     - */ns3
//   configMode: TETRATE
//```
//
// Under the hood, Service Bridge translates these minimalistic
// settings into Istio APIs such as `Gateway`, `VirtualService`,
// `AuthorizationPolicy`, etc. for the namespaces managed by the
// gateway group. These APIs are then pushed to the Istio control
// planes of clusters where the workspace is applicable.
//
// It is possible to create a gateway group for namespaces in a
// specific cluster as long as the parent workspace owns those
// namespaces in that cluster. For example,
//
// ```yaml
// apiVersion: gateway.tsb.tetrate.io/v1
// kind: Group
// metadata:
//   name: g1
//   workspace: w1
//   tenant: mycompany
// spec:
//   namespaceSelector:
//     names:
//     - c1/ns1 # pick ns1 namespace only from c1 cluster
//     - */ns2
//     - */ns3
//   configMode: TETRATE
//```
//
// In the `ISTIO` mode, it is possible to directly attach Istio
// Networking v1beta1 APIs - `VirtualService`, and `Gateway`, and
// Istio Security v1beta1 APIs - `RequestAuthentication`, and
// `AuthorizationPolicy` to the gateway group. These configurations
// will be validated for correctness and conflict free operations and
// then pushed to the appropriate Istio control planes.
//
// The following example declares a `Gateway` and a `VirtualService`
// for a specific workload in the `ns1` namespace:
//
// ```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: Gateway
// metadata:
//   name: ingress
//   namespace: ns1
//   annotations:
//     tsb.tetrate.io/tenant: mycompany
//     tsb.tetrate.io/workspace: w1
//     tsb.tetrate.io/gatewayGroup: g1
// spec:
//   selector:
//       app: my-ingress-gateway
//   servers:
//   - port:
//       number: 80
//       name: http
//       protocol: HTTP
//     hosts:
//     - uk.bookinfo.com
//     - eu.bookinfo.com
// ```
//
// and the associated `VirtualService`
//
//```yaml
// apiVersion: networking.istio.io/v1beta1
// kind: VirtualService
// metadata:
//   name: ingress-rule
//   namespace: ns1
//   annotations:
//     tsb.tetrate.io/tenant: mycompany
//     tsb.tetrate.io/workspace: w1
//     tsb.tetrate.io/gatewayGroup: g1
// spec:
//   hosts:
//   - uk.bookinfo.com
//   - eu.bookinfo.com
//   gateways:
//   - ns1/ingress # Has to bind to the same gateway
//   http:
//   - route:
//     - destination:
//         port:
//           number: 7777
//         host: reviews.ns1.svc.cluster.local
//```
//
// The namespace where the Istio APIs are applied will need to be part
// of the parent gateway group. In addition, each API object will need
// to have annotations to indicate the tenant, workspace and the
// gateway group to which it belongs to.
//
// TODO(rshriram): Document the list of fields in Istio APIs that are
// disallowed.
package tetrateio.api.tsb.gateway.v1;
option go_package = "github.com/tetrateio/api/tsb/gateway/v1";

import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "tsb/types/v1/types.proto";

// A gateway group manages the gateways in a group of namespaces owned
// by the parent workspace.
message Group {
  // Set of namespaces owned exclusively by this group. If omitted,
  // applies to all resources owned by the workspace. Use `*/*` to
  // claim all cluster resources under the workspace.
  tetrateio.api.tsb.types.v1.NamespaceSelector namespace_selector = 1 [(google.api.field_behavior) = REQUIRED, (validate.rules).message.required = true];

  // The Configuration types that will be added to this
  // group. `TETRATE` mode indicates that configurations added to this
  // group will use Tetrate APIs such as `IngressGateway`. `ISTIO`
  // mode indicates that configurations added to this group will use
  // Istio Networking v1beta1 APIs such as `Gateway` and
  // `VirtualService`, Istio Security v1beta1 APIs such as
  // `RequestAuthentication` and `AuthorizationPolicy`. Defaults to
  // `TETRATE` mode.
  tetrateio.api.tsb.types.v1.ConfigMode config_mode = 2;
}
