// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsb/service/v1/service.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	v1 "github.com/tetrateio/api/tsb/types/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("tsb/service/v1/service.proto", fileDescriptor_640333e1baaa521f) }

var fileDescriptor_640333e1baaa521f = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x29, 0x4e, 0xd2,
	0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2f, 0x33, 0x84, 0x31, 0xf5, 0x0a, 0x8a, 0xf2,
	0x4b, 0xf2, 0x85, 0x64, 0x4a, 0x52, 0x4b, 0x8a, 0x12, 0x4b, 0x52, 0x33, 0xf3, 0xf5, 0x12, 0x0b,
	0x32, 0xf5, 0x4a, 0x8a, 0x93, 0xf4, 0x60, 0x0a, 0xca, 0x0c, 0xa5, 0x24, 0x40, 0x7a, 0x4b, 0x2a,
	0x0b, 0x52, 0x8b, 0x41, 0x3a, 0xc1, 0x0c, 0x88, 0x3e, 0xa3, 0xbf, 0x8c, 0x5c, 0xcc, 0x21, 0xc1,
	0x4e, 0x42, 0x81, 0x5c, 0xac, 0x8e, 0x05, 0x05, 0x39, 0x95, 0x42, 0x4a, 0x7a, 0x98, 0x26, 0x41,
	0x34, 0x94, 0x19, 0xea, 0xf9, 0x27, 0x65, 0xa5, 0x26, 0x97, 0x48, 0x11, 0xa1, 0x46, 0x89, 0x41,
	0xc8, 0x9f, 0x8b, 0xd9, 0x3d, 0xb5, 0x84, 0x8a, 0x06, 0x06, 0x71, 0xb1, 0xb9, 0xa4, 0xe6, 0xa4,
	0x96, 0xa4, 0x52, 0xcf, 0x4c, 0x27, 0xd3, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x31, 0x4a, 0x3d, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57,
	0x1f, 0xae, 0x5b, 0x3f, 0xb1, 0x20, 0x53, 0x1f, 0x35, 0xf0, 0x93, 0xd8, 0xc0, 0xa1, 0x67, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x69, 0x15, 0x60, 0x95, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TSBClient is the client API for TSB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TSBClient interface {
	// used by bridge apply -f, the UI
	// No REST API. UI and cli will use grpc directly.
	Apply(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error)
	// for both list and get
	Get(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error)
	Delete(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error)
}

type tSBClient struct {
	cc *grpc.ClientConn
}

func NewTSBClient(cc *grpc.ClientConn) TSBClient {
	return &tSBClient{cc}
}

func (c *tSBClient) Apply(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error) {
	out := new(v1.Object)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.service.v1.TSB/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSBClient) Get(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error) {
	out := new(v1.Object)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.service.v1.TSB/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tSBClient) Delete(ctx context.Context, in *v1.Object, opts ...grpc.CallOption) (*v1.Object, error) {
	out := new(v1.Object)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tsb.service.v1.TSB/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TSBServer is the server API for TSB service.
type TSBServer interface {
	// used by bridge apply -f, the UI
	// No REST API. UI and cli will use grpc directly.
	Apply(context.Context, *v1.Object) (*v1.Object, error)
	// for both list and get
	Get(context.Context, *v1.Object) (*v1.Object, error)
	Delete(context.Context, *v1.Object) (*v1.Object, error)
}

// UnimplementedTSBServer can be embedded to have forward compatible implementations.
type UnimplementedTSBServer struct {
}

func (*UnimplementedTSBServer) Apply(ctx context.Context, req *v1.Object) (*v1.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (*UnimplementedTSBServer) Get(ctx context.Context, req *v1.Object) (*v1.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTSBServer) Delete(ctx context.Context, req *v1.Object) (*v1.Object, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterTSBServer(s *grpc.Server, srv TSBServer) {
	s.RegisterService(&_TSB_serviceDesc, srv)
}

func _TSB_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSBServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.service.v1.TSB/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSBServer).Apply(ctx, req.(*v1.Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.service.v1.TSB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSBServer).Get(ctx, req.(*v1.Object))
	}
	return interceptor(ctx, in, info, handler)
}

func _TSB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Object)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TSBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tsb.service.v1.TSB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TSBServer).Delete(ctx, req.(*v1.Object))
	}
	return interceptor(ctx, in, info, handler)
}

var _TSB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tsb.service.v1.TSB",
	HandlerType: (*TSBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _TSB_Apply_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TSB_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TSB_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsb/service/v1/service.proto",
}
