// Code generated by protoc-gen-go. DO NOT EDIT.
// source: install/managementplane/v1alpha1/spec.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ManagementPlaneSpec defines the desired installed state of TSB management plane components.
// Specifying an empty ManagementPlaneSpec results in a default installation.
type ManagementPlaneSpec struct {
	// TSB container hub path e.g. docker.io/tetrate.
	Hub string `protobuf:"bytes,1,opt,name=hub,proto3" json:"hub,omitempty"`
	// The set of components that make up the management plane.
	// Use this to override settings for individual components.
	Components *ManagementPlaneComponentSet `protobuf:"bytes,50,opt,name=components,proto3" json:"components,omitempty"`
	// Configure the data store for TSB to persist its data to.
	// This is a mandatory setting for production. If omitted, the operator will assume
	// a demo installation and for your convenience install a demo grade data store.
	//
	// Types that are valid to be assigned to DataStore:
	//	*ManagementPlaneSpec_Postgres
	DataStore isManagementPlaneSpec_DataStore `protobuf_oneof:"data_store"`
	// Configure the store that TSB will use to persist application telemetry data
	// This is a mandatory setting for production. If omitted, the operator will assume
	// a demo installation and for your convenience install a demo grade telemetry store.
	//
	// Types that are valid to be assigned to TelemetryStore:
	//	*ManagementPlaneSpec_Elastic
	TelemetryStore isManagementPlaneSpec_TelemetryStore `protobuf_oneof:"telemetry_store"`
	// Configure the Identity Provider TSB will use as the source of users.
	// This identity provider is used for user authentication and to periodically synchronize the
	// information of existing users and groups into the platform.
	// This is a mandatory setting for production. If omitted, the operator will assume
	// a demo installation and for your convenience install a demo identity provider.
	//
	// Types that are valid to be assigned to IdentityProvider:
	//	*ManagementPlaneSpec_Ldap
	IdentityProvider     isManagementPlaneSpec_IdentityProvider `protobuf_oneof:"identity_provider"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *ManagementPlaneSpec) Reset()         { *m = ManagementPlaneSpec{} }
func (m *ManagementPlaneSpec) String() string { return proto.CompactTextString(m) }
func (*ManagementPlaneSpec) ProtoMessage()    {}
func (*ManagementPlaneSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_888f663ada7417b1, []int{0}
}

func (m *ManagementPlaneSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementPlaneSpec.Unmarshal(m, b)
}
func (m *ManagementPlaneSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementPlaneSpec.Marshal(b, m, deterministic)
}
func (m *ManagementPlaneSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementPlaneSpec.Merge(m, src)
}
func (m *ManagementPlaneSpec) XXX_Size() int {
	return xxx_messageInfo_ManagementPlaneSpec.Size(m)
}
func (m *ManagementPlaneSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementPlaneSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementPlaneSpec proto.InternalMessageInfo

func (m *ManagementPlaneSpec) GetHub() string {
	if m != nil {
		return m.Hub
	}
	return ""
}

func (m *ManagementPlaneSpec) GetComponents() *ManagementPlaneComponentSet {
	if m != nil {
		return m.Components
	}
	return nil
}

type isManagementPlaneSpec_DataStore interface {
	isManagementPlaneSpec_DataStore()
}

type ManagementPlaneSpec_Postgres struct {
	Postgres *PostgresSettings `protobuf:"bytes,100,opt,name=postgres,proto3,oneof"`
}

func (*ManagementPlaneSpec_Postgres) isManagementPlaneSpec_DataStore() {}

func (m *ManagementPlaneSpec) GetDataStore() isManagementPlaneSpec_DataStore {
	if m != nil {
		return m.DataStore
	}
	return nil
}

func (m *ManagementPlaneSpec) GetPostgres() *PostgresSettings {
	if x, ok := m.GetDataStore().(*ManagementPlaneSpec_Postgres); ok {
		return x.Postgres
	}
	return nil
}

type isManagementPlaneSpec_TelemetryStore interface {
	isManagementPlaneSpec_TelemetryStore()
}

type ManagementPlaneSpec_Elastic struct {
	Elastic *ElasticSearchSettings `protobuf:"bytes,200,opt,name=elastic,proto3,oneof"`
}

func (*ManagementPlaneSpec_Elastic) isManagementPlaneSpec_TelemetryStore() {}

func (m *ManagementPlaneSpec) GetTelemetryStore() isManagementPlaneSpec_TelemetryStore {
	if m != nil {
		return m.TelemetryStore
	}
	return nil
}

func (m *ManagementPlaneSpec) GetElastic() *ElasticSearchSettings {
	if x, ok := m.GetTelemetryStore().(*ManagementPlaneSpec_Elastic); ok {
		return x.Elastic
	}
	return nil
}

type isManagementPlaneSpec_IdentityProvider interface {
	isManagementPlaneSpec_IdentityProvider()
}

type ManagementPlaneSpec_Ldap struct {
	Ldap *LDAPSettings `protobuf:"bytes,300,opt,name=ldap,proto3,oneof"`
}

func (*ManagementPlaneSpec_Ldap) isManagementPlaneSpec_IdentityProvider() {}

func (m *ManagementPlaneSpec) GetIdentityProvider() isManagementPlaneSpec_IdentityProvider {
	if m != nil {
		return m.IdentityProvider
	}
	return nil
}

func (m *ManagementPlaneSpec) GetLdap() *LDAPSettings {
	if x, ok := m.GetIdentityProvider().(*ManagementPlaneSpec_Ldap); ok {
		return x.Ldap
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ManagementPlaneSpec) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ManagementPlaneSpec_Postgres)(nil),
		(*ManagementPlaneSpec_Elastic)(nil),
		(*ManagementPlaneSpec_Ldap)(nil),
	}
}

// The set of components that make up the management plane
type ManagementPlaneComponentSet struct {
	ApiServer            *ApiServer              `protobuf:"bytes,1,opt,name=api_server,json=apiServer,proto3" json:"api_server,omitempty"`
	IamServer            *IamServer              `protobuf:"bytes,2,opt,name=iam_server,json=iamServer,proto3" json:"iam_server,omitempty"`
	WebUi                *WebUi                  `protobuf:"bytes,3,opt,name=web_ui,json=webUi,proto3" json:"web_ui,omitempty"`
	FrontEnvoy           *FrontEnvoy             `protobuf:"bytes,4,opt,name=front_envoy,json=frontEnvoy,proto3" json:"front_envoy,omitempty"`
	SpmServer            *SpmServer              `protobuf:"bytes,5,opt,name=spm_server,json=spmServer,proto3" json:"spm_server,omitempty"`
	SpmSync              *SpmSync                `protobuf:"bytes,6,opt,name=spm_sync,json=spmSync,proto3" json:"spm_sync,omitempty"`
	TeamSync             *TeamSync               `protobuf:"bytes,7,opt,name=team_sync,json=teamSync,proto3" json:"team_sync,omitempty"`
	Oap                  *Oap                    `protobuf:"bytes,8,opt,name=oap,proto3" json:"oap,omitempty"`
	Zipkin               *Zipkin                 `protobuf:"bytes,9,opt,name=zipkin,proto3" json:"zipkin,omitempty"`
	Collector            *OpenTelemetryCollector `protobuf:"bytes,10,opt,name=collector,proto3" json:"collector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ManagementPlaneComponentSet) Reset()         { *m = ManagementPlaneComponentSet{} }
func (m *ManagementPlaneComponentSet) String() string { return proto.CompactTextString(m) }
func (*ManagementPlaneComponentSet) ProtoMessage()    {}
func (*ManagementPlaneComponentSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_888f663ada7417b1, []int{1}
}

func (m *ManagementPlaneComponentSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagementPlaneComponentSet.Unmarshal(m, b)
}
func (m *ManagementPlaneComponentSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagementPlaneComponentSet.Marshal(b, m, deterministic)
}
func (m *ManagementPlaneComponentSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagementPlaneComponentSet.Merge(m, src)
}
func (m *ManagementPlaneComponentSet) XXX_Size() int {
	return xxx_messageInfo_ManagementPlaneComponentSet.Size(m)
}
func (m *ManagementPlaneComponentSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagementPlaneComponentSet.DiscardUnknown(m)
}

var xxx_messageInfo_ManagementPlaneComponentSet proto.InternalMessageInfo

func (m *ManagementPlaneComponentSet) GetApiServer() *ApiServer {
	if m != nil {
		return m.ApiServer
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetIamServer() *IamServer {
	if m != nil {
		return m.IamServer
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetWebUi() *WebUi {
	if m != nil {
		return m.WebUi
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetFrontEnvoy() *FrontEnvoy {
	if m != nil {
		return m.FrontEnvoy
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetSpmServer() *SpmServer {
	if m != nil {
		return m.SpmServer
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetSpmSync() *SpmSync {
	if m != nil {
		return m.SpmSync
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetTeamSync() *TeamSync {
	if m != nil {
		return m.TeamSync
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetOap() *Oap {
	if m != nil {
		return m.Oap
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetZipkin() *Zipkin {
	if m != nil {
		return m.Zipkin
	}
	return nil
}

func (m *ManagementPlaneComponentSet) GetCollector() *OpenTelemetryCollector {
	if m != nil {
		return m.Collector
	}
	return nil
}

func init() {
	proto.RegisterType((*ManagementPlaneSpec)(nil), "tetrateio.api.install.managementplane.v1alpha1.ManagementPlaneSpec")
	proto.RegisterType((*ManagementPlaneComponentSet)(nil), "tetrateio.api.install.managementplane.v1alpha1.ManagementPlaneComponentSet")
}

func init() {
	proto.RegisterFile("install/managementplane/v1alpha1/spec.proto", fileDescriptor_888f663ada7417b1)
}

var fileDescriptor_888f663ada7417b1 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0xd5, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x07, 0xf0, 0x5f, 0xda, 0xad, 0x6b, 0xbd, 0x9f, 0x04, 0xf3, 0x2e, 0x88, 0x86, 0x10, 0xd3,
	0xae, 0x26, 0x21, 0x25, 0x6c, 0x13, 0x7f, 0x06, 0x5c, 0xb0, 0x8e, 0x4e, 0x20, 0x06, 0x4c, 0xce,
	0x26, 0xd0, 0x90, 0xa8, 0x4e, 0x92, 0xb3, 0xd6, 0x5a, 0x62, 0x5b, 0xb6, 0xd7, 0xa9, 0x3c, 0x02,
	0xcf, 0xc2, 0x83, 0xf0, 0x18, 0x3c, 0x02, 0xd7, 0x5c, 0x20, 0x14, 0x37, 0x09, 0x68, 0x17, 0x4c,
	0xe9, 0x55, 0x8f, 0x5c, 0x7f, 0x3f, 0xc7, 0x3e, 0x52, 0x5d, 0x72, 0x8f, 0x0b, 0x63, 0x21, 0xcb,
	0xc2, 0x1c, 0x04, 0x8c, 0x30, 0x47, 0x61, 0x55, 0x06, 0x02, 0xc3, 0xc9, 0x16, 0x64, 0x6a, 0x0c,
	0x5b, 0xa1, 0x51, 0x98, 0x04, 0x4a, 0x4b, 0x2b, 0x69, 0x60, 0xd1, 0x6a, 0xb0, 0xc8, 0x65, 0x00,
	0x8a, 0x07, 0x65, 0x34, 0xb8, 0x12, 0x0d, 0xaa, 0xe8, 0xda, 0xdd, 0x91, 0x94, 0xa3, 0x0c, 0x43,
	0x50, 0x3c, 0x3c, 0xe3, 0x98, 0xa5, 0xc3, 0x18, 0xc7, 0x30, 0xe1, 0x52, 0xcf, 0xc0, 0xb5, 0x5b,
	0x13, 0xc8, 0x78, 0x0a, 0x16, 0xc3, 0xaa, 0x28, 0xbf, 0xb8, 0x7f, 0xed, 0xb1, 0x12, 0x99, 0x2b,
	0x29, 0x50, 0xd8, 0x32, 0x11, 0x5e, 0x7f, 0x11, 0xb4, 0x96, 0x8b, 0x91, 0x99, 0x05, 0x36, 0x7e,
	0xb4, 0xc9, 0xea, 0x9b, 0x7a, 0xef, 0x51, 0xb1, 0x37, 0x52, 0x98, 0xd0, 0x3b, 0xa4, 0x3d, 0xbe,
	0x88, 0x7d, 0x6f, 0xdd, 0xdb, 0xec, 0xf5, 0x97, 0xbf, 0xef, 0xb5, 0x7e, 0xf6, 0x17, 0xbf, 0x78,
	0xad, 0x9b, 0x1e, 0x2b, 0xd6, 0xe9, 0x39, 0x21, 0x75, 0x6b, 0xe3, 0x6f, 0xaf, 0x7b, 0x9b, 0xcb,
	0xdb, 0xaf, 0x1b, 0x0e, 0x26, 0xb8, 0xd2, 0x77, 0xbf, 0x02, 0x23, 0xb4, 0xec, 0x2f, 0x9e, 0x7e,
	0x22, 0x5d, 0x25, 0x8d, 0x1d, 0x69, 0x34, 0x7e, 0xea, 0x5a, 0x3d, 0x6f, 0xda, 0xea, 0xa8, 0xcc,
	0x47, 0xe5, 0xed, 0x5f, 0xfe, 0xc7, 0x6a, 0x93, 0xc6, 0x64, 0x09, 0x33, 0x30, 0x96, 0x27, 0xfe,
	0x37, 0xcf, 0xf9, 0x83, 0xa6, 0xfe, 0x60, 0x96, 0x8f, 0x10, 0x74, 0x32, 0xae, 0x9b, 0x78, 0xac,
	0x82, 0x69, 0x44, 0x16, 0xb2, 0x14, 0x94, 0xff, 0xb5, 0xe5, 0x1a, 0x3c, 0x6b, 0xda, 0xe0, 0xf0,
	0xc5, 0xde, 0x51, 0xed, 0xb6, 0x98, 0xc3, 0xfa, 0xff, 0x13, 0x92, 0x82, 0x85, 0xa1, 0xb1, 0x52,
	0x63, 0x7f, 0x85, 0xdc, 0xb0, 0x98, 0x61, 0x8e, 0x56, 0x4f, 0xcb, 0xa5, 0x55, 0xb2, 0xc2, 0x53,
	0x14, 0x96, 0xdb, 0xe9, 0x50, 0x69, 0x39, 0xe1, 0x29, 0xea, 0x8d, 0x5f, 0x1d, 0x72, 0xfb, 0x1f,
	0xa3, 0xa7, 0x1f, 0x08, 0x01, 0xc5, 0x87, 0x06, 0xf5, 0x04, 0xb5, 0x3f, 0x1b, 0xc8, 0x6e, 0xd3,
	0xf3, 0xee, 0x29, 0x1e, 0x39, 0x80, 0xf5, 0xa0, 0x2a, 0x0b, 0x99, 0x43, 0x5e, 0xc9, 0xad, 0xf9,
	0xe4, 0x57, 0x90, 0x57, 0x32, 0xaf, 0x4a, 0x7a, 0x48, 0x3a, 0x97, 0x18, 0x0f, 0x2f, 0xb8, 0xdf,
	0x76, 0xea, 0x83, 0xa6, 0xea, 0x7b, 0x8c, 0x4f, 0x38, 0x5b, 0xbc, 0x2c, 0x3e, 0xe8, 0x47, 0xb2,
	0x7c, 0xa6, 0xa5, 0xb0, 0x43, 0x14, 0x13, 0x39, 0xf5, 0x17, 0x1c, 0xf9, 0xa4, 0x29, 0x79, 0x50,
	0x10, 0x83, 0x42, 0x60, 0xe4, 0xac, 0xae, 0x8b, 0x21, 0x18, 0x55, 0x0f, 0x61, 0x71, 0xbe, 0x21,
	0x44, 0xaa, 0x1e, 0x82, 0xa9, 0x4a, 0xca, 0x48, 0xd7, 0xc9, 0x53, 0x91, 0xf8, 0x1d, 0xe7, 0x3e,
	0x9a, 0xc7, 0x9d, 0x8a, 0x84, 0x2d, 0x99, 0x59, 0x41, 0x4f, 0x48, 0xcf, 0x22, 0x94, 0xe8, 0x92,
	0x43, 0x1f, 0x37, 0x45, 0x8f, 0x11, 0x66, 0x6a, 0xd7, 0x96, 0x15, 0x1d, 0x90, 0xb6, 0x04, 0xe5,
	0x77, 0x1d, 0xb8, 0xd3, 0x14, 0x7c, 0x07, 0x8a, 0x15, 0x79, 0xfa, 0x96, 0x74, 0x3e, 0x73, 0x75,
	0xce, 0x85, 0xdf, 0x73, 0xd2, 0xc3, 0xa6, 0xd2, 0xa9, 0x4b, 0xb3, 0x52, 0xa1, 0x29, 0xe9, 0x25,
	0x32, 0xcb, 0x30, 0xb1, 0x52, 0xfb, 0xc4, 0x91, 0x07, 0x8d, 0x0f, 0xa7, 0x50, 0x1c, 0x57, 0xbf,
	0xc3, 0xfd, 0x4a, 0x63, 0x7f, 0xe0, 0xfe, 0xd3, 0xd3, 0xdd, 0x11, 0xb7, 0xe3, 0x8b, 0x38, 0x48,
	0x64, 0x1e, 0xd6, 0xbc, 0xfb, 0x83, 0xb8, 0xee, 0xfd, 0x8e, 0x3b, 0xee, 0xdd, 0xde, 0xf9, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x46, 0x35, 0xbb, 0x51, 0xb3, 0x06, 0x00, 0x00,
}
