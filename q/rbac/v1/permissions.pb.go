// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: permissions.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RequiredPermission
//
// Configures the sets of permissions that are required to invoke the method where this option is
// applied.
type RequiredPermission struct {
	// The required set of permissions. The full name of each permission (such as ReadApplication)
	// will be inferred from the name of the method where this option is applied.
	Permissions []Permission `protobuf:"varint,1,rep,packed,name=permissions,proto3,enum=tetrate.api.q.rbac.v1.Permission" json:"permissions,omitempty"`
	// Set of raw permission names values. Only use this if the method being protected does not follow
	// the common naming convention and the proper name of the permission cannot be inferred just by
	// using the Permission enum and the method name.
	RawPermissions []string `protobuf:"bytes,2,rep,name=raw_permissions,json=rawPermissions,proto3" json:"raw_permissions,omitempty"`
	// When this flag is set to true, the permission checks will not be made at the API surface.
	// This is usually needed when there is not an explicit set of permissions that can be
	// preconfigured for the API methods, so the access control checks will be implemented at runtime
	// by the application.
	// The default value is 'false' and will only be taken into account if the permission properties
	// are empty. If any permission is set, this flag will be ignored.
	DeferPermissionCheckToApplication bool     `protobuf:"varint,3,opt,name=defer_permission_check_to_application,json=deferPermissionCheckToApplication,proto3" json:"defer_permission_check_to_application,omitempty"`
	XXX_NoUnkeyedLiteral              struct{} `json:"-"`
	XXX_unrecognized                  []byte   `json:"-"`
	XXX_sizecache                     int32    `json:"-"`
}

func (m *RequiredPermission) Reset()         { *m = RequiredPermission{} }
func (m *RequiredPermission) String() string { return proto.CompactTextString(m) }
func (*RequiredPermission) ProtoMessage()    {}
func (*RequiredPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_46cca66312ac1c30, []int{0}
}
func (m *RequiredPermission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequiredPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequiredPermission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequiredPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequiredPermission.Merge(m, src)
}
func (m *RequiredPermission) XXX_Size() int {
	return m.Size()
}
func (m *RequiredPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_RequiredPermission.DiscardUnknown(m)
}

var xxx_messageInfo_RequiredPermission proto.InternalMessageInfo

func (m *RequiredPermission) GetPermissions() []Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *RequiredPermission) GetRawPermissions() []string {
	if m != nil {
		return m.RawPermissions
	}
	return nil
}

func (m *RequiredPermission) GetDeferPermissionCheckToApplication() bool {
	if m != nil {
		return m.DeferPermissionCheckToApplication
	}
	return false
}

var E_DefaultRequires = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.ServiceOptions)(nil),
	ExtensionType: (*RequiredPermission)(nil),
	Field:         2000,
	Name:          "tetrate.api.q.rbac.v1.default_requires",
	Tag:           "bytes,2000,opt,name=default_requires",
	Filename:      "permissions.proto",
}

var E_Requires = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MethodOptions)(nil),
	ExtensionType: (*RequiredPermission)(nil),
	Field:         2000,
	Name:          "tetrate.api.q.rbac.v1.requires",
	Tag:           "bytes,2000,opt,name=requires",
	Filename:      "permissions.proto",
}

func init() {
	proto.RegisterType((*RequiredPermission)(nil), "tetrate.api.q.rbac.v1.RequiredPermission")
	proto.RegisterExtension(E_DefaultRequires)
	proto.RegisterExtension(E_Requires)
}

func init() { proto.RegisterFile("permissions.proto", fileDescriptor_46cca66312ac1c30) }

var fileDescriptor_46cca66312ac1c30 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x99, 0xaf, 0xf0, 0x51, 0xa7, 0xd0, 0x6a, 0x40, 0x28, 0x5d, 0xc4, 0x54, 0x10, 0xa3,
	0x8b, 0x19, 0x5a, 0x37, 0xd2, 0x9d, 0x76, 0x2d, 0x96, 0xe8, 0xca, 0x4d, 0x98, 0x4c, 0x4e, 0xda,
	0xc1, 0xb6, 0x33, 0x3d, 0x99, 0xa4, 0xb7, 0xe8, 0xb2, 0x0b, 0x2f, 0x40, 0x7a, 0x25, 0xd2, 0xf4,
	0x27, 0x81, 0xea, 0xc6, 0xdd, 0xc0, 0x3c, 0xe7, 0x7d, 0xce, 0x79, 0xe9, 0x99, 0x01, 0x9c, 0xa9,
	0x34, 0x55, 0x7a, 0x9e, 0x32, 0x83, 0xda, 0x6a, 0xe7, 0xdc, 0x82, 0x45, 0x61, 0x81, 0x09, 0xa3,
	0xd8, 0x82, 0x61, 0x24, 0x24, 0xcb, 0x7b, 0x1d, 0x6f, 0xac, 0xf5, 0x78, 0x0a, 0xbc, 0x80, 0xa2,
	0x2c, 0xe1, 0x31, 0xa4, 0x12, 0x95, 0xb1, 0x1a, 0xb7, 0x83, 0x1d, 0x5a, 0xa0, 0xc5, 0xfb, 0xf2,
	0x93, 0x50, 0x27, 0x80, 0x45, 0xa6, 0x10, 0xe2, 0xd1, 0x41, 0xe1, 0x0c, 0x69, 0xa3, 0x22, 0x6c,
	0x13, 0xaf, 0xe6, 0x37, 0xfb, 0x5d, 0xf6, 0xa3, 0x91, 0x95, 0x73, 0x41, 0x75, 0xca, 0xb9, 0xa6,
	0x2d, 0x14, 0xcb, 0xb0, 0x1a, 0xf4, 0xcf, 0xab, 0xf9, 0x27, 0x41, 0x13, 0xc5, 0x72, 0x54, 0x01,
	0x47, 0xf4, 0x2a, 0x86, 0x04, 0xb0, 0x82, 0x86, 0x72, 0x02, 0xf2, 0x3d, 0xb4, 0x3a, 0x14, 0xc6,
	0x4c, 0x95, 0x14, 0x56, 0xe9, 0x79, 0xbb, 0xe6, 0x11, 0xbf, 0x1e, 0x74, 0x0b, 0xb8, 0x0c, 0x18,
	0x6e, 0xd0, 0x57, 0xfd, 0x50, 0x82, 0x83, 0x9c, 0x9e, 0xc6, 0x90, 0x88, 0x6c, 0x6a, 0x43, 0xdc,
	0x5e, 0x97, 0x3a, 0x17, 0x6c, 0xdb, 0x0c, 0xdb, 0x37, 0xc3, 0x5e, 0x00, 0x73, 0x25, 0xe1, 0xd9,
	0xd8, 0x62, 0xb9, 0x55, 0xcb, 0x23, 0x7e, 0xa3, 0x7f, 0xf3, 0xcb, 0x99, 0xc7, 0x35, 0x05, 0xad,
	0x9d, 0x64, 0xf7, 0x95, 0x0e, 0x12, 0x5a, 0x3f, 0xf8, 0xdc, 0x23, 0xdf, 0x13, 0xd8, 0x89, 0x8e,
	0xff, 0xae, 0x3b, 0x64, 0x3f, 0xde, 0x7f, 0xac, 0x5d, 0xb2, 0x5a, 0xbb, 0xe4, 0x6b, 0xed, 0x92,
	0xb7, 0xdb, 0xb1, 0xb2, 0x93, 0x2c, 0x62, 0x52, 0xcf, 0xf8, 0x2e, 0x4c, 0xe9, 0xfd, 0x8b, 0x0b,
	0xa3, 0xf8, 0x82, 0x6f, 0x62, 0x79, 0xde, 0x8b, 0xfe, 0x17, 0xdb, 0xdc, 0x7d, 0x07, 0x00, 0x00,
	0xff, 0xff, 0x15, 0x51, 0xb8, 0x16, 0x51, 0x02, 0x00, 0x00,
}

func (m *RequiredPermission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequiredPermission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequiredPermission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeferPermissionCheckToApplication {
		i--
		if m.DeferPermissionCheckToApplication {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RawPermissions) > 0 {
		for iNdEx := len(m.RawPermissions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RawPermissions[iNdEx])
			copy(dAtA[i:], m.RawPermissions[iNdEx])
			i = encodeVarintPermissions(dAtA, i, uint64(len(m.RawPermissions[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Permissions) > 0 {
		dAtA2 := make([]byte, len(m.Permissions)*10)
		var j1 int
		for _, num := range m.Permissions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPermissions(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPermissions(dAtA []byte, offset int, v uint64) int {
	offset -= sovPermissions(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RequiredPermission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		l = 0
		for _, e := range m.Permissions {
			l += sovPermissions(uint64(e))
		}
		n += 1 + sovPermissions(uint64(l)) + l
	}
	if len(m.RawPermissions) > 0 {
		for _, s := range m.RawPermissions {
			l = len(s)
			n += 1 + l + sovPermissions(uint64(l))
		}
	}
	if m.DeferPermissionCheckToApplication {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPermissions(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPermissions(x uint64) (n int) {
	return sovPermissions(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequiredPermission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequiredPermission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequiredPermission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Permission
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPermissions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Permission(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Permissions = append(m.Permissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPermissions
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPermissions
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPermissions
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Permissions) == 0 {
					m.Permissions = make([]Permission, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Permission
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPermissions
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Permission(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Permissions = append(m.Permissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawPermissions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPermissions
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPermissions
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawPermissions = append(m.RawPermissions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeferPermissionCheckToApplication", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeferPermissionCheckToApplication = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPermissions(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPermissions
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPermissions(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPermissions
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPermissions
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPermissions
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPermissions
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPermissions
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPermissions(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPermissions
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPermissions = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPermissions   = fmt.Errorf("proto: integer overflow")
)
