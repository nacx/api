// tslint:disable
/**
 * rbac.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TetrateApiQRbacV1Permission,
    TetrateApiQRbacV1PermissionFromJSON,
    TetrateApiQRbacV1PermissionToJSON,
} from './';

/**
 * A role configures a set of permissions and gives them a name. Permissions are grouped into roles and then can be bound to different resources to configure the access policies.
 * @export
 * @interface TetrateApiQRbacV1Role
 */
export interface TetrateApiQRbacV1Role {
    /**
     * A unique name for the role in the system.
     * @type {string}
     * @memberof TetrateApiQRbacV1Role
     */
    name?: string;
    /**
     * Details of what the role does and what the configured permissions allow.
     * @type {string}
     * @memberof TetrateApiQRbacV1Role
     */
    description?: string;
    /**
     * The list of permissions that will be granted by this role on all resources that are bound to it.
     * @type {Array<TetrateApiQRbacV1Permission>}
     * @memberof TetrateApiQRbacV1Role
     */
    permissions?: Array<TetrateApiQRbacV1Permission>;
    /**
     * List of resource types where the role applies. The permission system is hierarchical and allows permissions to be applied at the root elements of the configuration hierarchy, so all child objects inherit them. This allows for easy and flexible permission configuration. There are, however, many scenarios in which permissions only make sense in certain types of resources instead of applying to the entire hierarchy. In those cases, the resources field can be populated with the types of resources that are affected by hte role, and the permission set defined by the role will only apply to those resources. If this field is omitted, the permissions apply to all resource types.
     * @type {Array<string>}
     * @memberof TetrateApiQRbacV1Role
     */
    resources?: Array<string>;
}

export function TetrateApiQRbacV1RoleFromJSON(json: any): TetrateApiQRbacV1Role {
    return {
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'permissions': !exists(json, 'permissions') ? undefined : (json['permissions'] as Array<any>).map(TetrateApiQRbacV1PermissionFromJSON),
        'resources': !exists(json, 'resources') ? undefined : json['resources'],
    };
}

export function TetrateApiQRbacV1RoleToJSON(value?: TetrateApiQRbacV1Role): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'description': value.description,
        'permissions': value.permissions === undefined ? undefined : (value.permissions as Array<any>).map(TetrateApiQRbacV1PermissionToJSON),
        'resources': value.resources,
    };
}


