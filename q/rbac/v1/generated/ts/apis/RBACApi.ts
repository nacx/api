// tslint:disable
/**
 * rbac.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiQRbacV1CreateRoleRequest,
    TetrateApiQRbacV1CreateRoleRequestFromJSON,
    TetrateApiQRbacV1CreateRoleRequestToJSON,
    TetrateApiQRbacV1ListRolesResponse,
    TetrateApiQRbacV1ListRolesResponseFromJSON,
    TetrateApiQRbacV1ListRolesResponseToJSON,
    TetrateApiQRbacV1Role,
    TetrateApiQRbacV1RoleFromJSON,
    TetrateApiQRbacV1RoleToJSON,
} from '../models';

export interface CreateRoleRequest {
    body: TetrateApiQRbacV1CreateRoleRequest;
}

export interface DeleteRoleRequest {
    name: string;
}

export interface GetRoleRequest {
    name: string;
}

/**
 * no description
 */
export class RBACApi extends runtime.BaseAPI {

    /**
     * Creates a Role in the system
     */
    async createRoleRaw(requestParameters: CreateRoleRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiQRbacV1CreateRoleRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiQRbacV1RoleFromJSON(jsonValue));
    }

    /**
     * Creates a Role in the system
     */
    async createRole(requestParameters: CreateRoleRequest): Promise<TetrateApiQRbacV1Role> {
        const response = await this.createRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete the role with the given name. Roles that are assigned to policies cannot be deleted. Policies need to be deleted first
     */
    async deleteRoleRaw(requestParameters: DeleteRoleRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     * Delete the role with the given name. Roles that are assigned to policies cannot be deleted. Policies need to be deleted first
     */
    async deleteRole(requestParameters: DeleteRoleRequest): Promise<object> {
        const response = await this.deleteRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the details of teh role with the given name
     */
    async getRoleRaw(requestParameters: GetRoleRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/roles/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiQRbacV1RoleFromJSON(jsonValue));
    }

    /**
     * Get the details of teh role with the given name
     */
    async getRole(requestParameters: GetRoleRequest): Promise<TetrateApiQRbacV1Role> {
        const response = await this.getRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all existing roles in the system
     */
    async listRolesRaw(): Promise<runtime.ApiResponse<any>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiQRbacV1ListRolesResponseFromJSON(jsonValue));
    }

    /**
     * List all existing roles in the system
     */
    async listRoles(): Promise<TetrateApiQRbacV1ListRolesResponse> {
        const response = await this.listRolesRaw();
        return await response.value();
    }

}
