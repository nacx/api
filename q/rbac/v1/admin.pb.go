// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAdminPolicyRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAdminPolicyRequest) Reset()         { *m = GetAdminPolicyRequest{} }
func (m *GetAdminPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetAdminPolicyRequest) ProtoMessage()    {}
func (*GetAdminPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}
func (m *GetAdminPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdminPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdminPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAdminPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdminPolicyRequest.Merge(m, src)
}
func (m *GetAdminPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAdminPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdminPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdminPolicyRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetAdminPolicyRequest)(nil), "tetrate.api.q.rbac.v1.GetAdminPolicyRequest")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0xc9, 0xcd,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x2d, 0x49, 0x2d, 0x29, 0x4a, 0x2c, 0x49,
	0xd5, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b, 0xd4, 0x2b, 0x4a, 0x4a, 0x4c, 0xd6, 0x2b, 0x33, 0x94, 0x92,
	0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f,
	0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0x68, 0x92, 0x92, 0x86, 0xca, 0x82, 0x79, 0x49, 0xa5,
	0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x50, 0x49, 0xc1, 0x82, 0xd4, 0xa2, 0xdc, 0xcc, 0xe2,
	0x62, 0x24, 0xf5, 0x5c, 0x60, 0x63, 0xc1, 0x6c, 0x25, 0x71, 0x2e, 0x51, 0xf7, 0xd4, 0x12, 0x47,
	0x90, 0x13, 0x02, 0xf2, 0x73, 0x32, 0x93, 0x2b, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x8c,
	0xde, 0x33, 0x73, 0xb1, 0x82, 0x85, 0x85, 0x1a, 0x19, 0xb9, 0x78, 0xdd, 0x53, 0x4b, 0x82, 0xf2,
	0xf3, 0x4b, 0x20, 0x4a, 0x84, 0x74, 0xf4, 0xb0, 0x3a, 0x53, 0x0f, 0xab, 0x49, 0x52, 0xb2, 0x38,
	0x54, 0x43, 0x54, 0x29, 0x29, 0x37, 0xd5, 0x32, 0x73, 0x31, 0xb2, 0x36, 0x5d, 0x7e, 0x32, 0x99,
	0x49, 0x5c, 0x48, 0x54, 0xbf, 0xcc, 0x50, 0x1f, 0x1c, 0x22, 0xfa, 0x45, 0xf9, 0xf9, 0x25, 0xfa,
	0x05, 0x10, 0x1b, 0xf3, 0xb8, 0x78, 0x83, 0x51, 0x9c, 0x80, 0xdf, 0x50, 0x29, 0x31, 0x3d, 0x48,
	0x98, 0xe8, 0xc1, 0xc2, 0x44, 0xcf, 0x15, 0x14, 0x26, 0x4a, 0x6a, 0x48, 0x96, 0x49, 0x49, 0x61,
	0xb7, 0xcc, 0x8a, 0x51, 0x0b, 0xee, 0x67, 0x27, 0x47, 0x67, 0xfa, 0xfa, 0x39, 0x29, 0x31, 0x19,
	0xcd, 0xcf, 0x08, 0x27, 0x50, 0xdd, 0xcf, 0x08, 0xcb, 0xac, 0x18, 0xb5, 0x9c, 0x2c, 0x4e, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x28, 0xad, 0xf4, 0xcc, 0x92,
	0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xa8, 0xb5, 0x99, 0xf9, 0x30, 0x16, 0x38, 0x21,
	0x16, 0x42, 0x0c, 0x28, 0x33, 0x4c, 0x62, 0x03, 0xdb, 0x68, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x0c, 0xf6, 0xb8, 0x4f, 0xcb, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	GetRootPolicy(ctx context.Context, in *GetAdminPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	SetRootPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*types.Empty, error)
	GetRBACPolicy(ctx context.Context, in *GetAdminPolicyRequest, opts ...grpc.CallOption) (*Policy, error)
	SetRBACPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*types.Empty, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetRootPolicy(ctx context.Context, in *GetAdminPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/tetrate.api.q.rbac.v1.Admin/GetRootPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetRootPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.q.rbac.v1.Admin/SetRootPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetRBACPolicy(ctx context.Context, in *GetAdminPolicyRequest, opts ...grpc.CallOption) (*Policy, error) {
	out := new(Policy)
	err := c.cc.Invoke(ctx, "/tetrate.api.q.rbac.v1.Admin/GetRBACPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetRBACPolicy(ctx context.Context, in *Policy, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.q.rbac.v1.Admin/SetRBACPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	GetRootPolicy(context.Context, *GetAdminPolicyRequest) (*Policy, error)
	SetRootPolicy(context.Context, *Policy) (*types.Empty, error)
	GetRBACPolicy(context.Context, *GetAdminPolicyRequest) (*Policy, error)
	SetRBACPolicy(context.Context, *Policy) (*types.Empty, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) GetRootPolicy(ctx context.Context, req *GetAdminPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootPolicy not implemented")
}
func (*UnimplementedAdminServer) SetRootPolicy(ctx context.Context, req *Policy) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRootPolicy not implemented")
}
func (*UnimplementedAdminServer) GetRBACPolicy(ctx context.Context, req *GetAdminPolicyRequest) (*Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRBACPolicy not implemented")
}
func (*UnimplementedAdminServer) SetRBACPolicy(ctx context.Context, req *Policy) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRBACPolicy not implemented")
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_GetRootPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRootPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.q.rbac.v1.Admin/GetRootPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRootPolicy(ctx, req.(*GetAdminPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetRootPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetRootPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.q.rbac.v1.Admin/SetRootPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetRootPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetRBACPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetRBACPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.q.rbac.v1.Admin/GetRBACPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetRBACPolicy(ctx, req.(*GetAdminPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetRBACPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Policy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetRBACPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.q.rbac.v1.Admin/SetRBACPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetRBACPolicy(ctx, req.(*Policy))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.q.rbac.v1.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRootPolicy",
			Handler:    _Admin_GetRootPolicy_Handler,
		},
		{
			MethodName: "SetRootPolicy",
			Handler:    _Admin_SetRootPolicy_Handler,
		},
		{
			MethodName: "GetRBACPolicy",
			Handler:    _Admin_GetRBACPolicy_Handler,
		},
		{
			MethodName: "SetRBACPolicy",
			Handler:    _Admin_SetRBACPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}

func (m *GetAdminPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdminPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAdminPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	offset -= sovAdmin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAdminPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAdmin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAdminPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdminPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdminPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAdmin
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)
