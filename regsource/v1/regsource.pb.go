// Code generated by protoc-gen-go. DO NOT EDIT.
// source: regsource.proto

package v1 // import "github.com/tetrateio/tetrate/api/regsource/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_regsource_b69913b45d43b882, []int{0}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRequest.Unmarshal(m, b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
}
func (dst *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(dst, src)
}
func (m *SyncRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRequest.Size(m)
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

type InstanceMetadata struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Instance             string   `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Subset               string   `protobuf:"bytes,3,opt,name=subset,proto3" json:"subset,omitempty"`
	Service              string   `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster              string   `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Env                  string   `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceMetadata) Reset()         { *m = InstanceMetadata{} }
func (m *InstanceMetadata) String() string { return proto.CompactTextString(m) }
func (*InstanceMetadata) ProtoMessage()    {}
func (*InstanceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_regsource_b69913b45d43b882, []int{1}
}
func (m *InstanceMetadata) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstanceMetadata.Unmarshal(m, b)
}
func (m *InstanceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstanceMetadata.Marshal(b, m, deterministic)
}
func (dst *InstanceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceMetadata.Merge(dst, src)
}
func (m *InstanceMetadata) XXX_Size() int {
	return xxx_messageInfo_InstanceMetadata.Size(m)
}
func (m *InstanceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceMetadata proto.InternalMessageInfo

func (m *InstanceMetadata) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *InstanceMetadata) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *InstanceMetadata) GetSubset() string {
	if m != nil {
		return m.Subset
	}
	return ""
}

func (m *InstanceMetadata) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *InstanceMetadata) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InstanceMetadata) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *InstanceMetadata) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*SyncRequest)(nil), "tetrate.api.regsource.v1.SyncRequest")
	proto.RegisterType((*InstanceMetadata)(nil), "tetrate.api.regsource.v1.InstanceMetadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegSourceSyncServiceClient is the client API for RegSourceSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegSourceSyncServiceClient interface {
	ServiceInstanceSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (RegSourceSyncService_ServiceInstanceSyncClient, error)
}

type regSourceSyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegSourceSyncServiceClient(cc *grpc.ClientConn) RegSourceSyncServiceClient {
	return &regSourceSyncServiceClient{cc}
}

func (c *regSourceSyncServiceClient) ServiceInstanceSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (RegSourceSyncService_ServiceInstanceSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegSourceSyncService_serviceDesc.Streams[0], "/tetrate.api.regsource.v1.RegSourceSyncService/serviceInstanceSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &regSourceSyncServiceServiceInstanceSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegSourceSyncService_ServiceInstanceSyncClient interface {
	Recv() (*InstanceMetadata, error)
	grpc.ClientStream
}

type regSourceSyncServiceServiceInstanceSyncClient struct {
	grpc.ClientStream
}

func (x *regSourceSyncServiceServiceInstanceSyncClient) Recv() (*InstanceMetadata, error) {
	m := new(InstanceMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegSourceSyncServiceServer is the server API for RegSourceSyncService service.
type RegSourceSyncServiceServer interface {
	ServiceInstanceSync(*SyncRequest, RegSourceSyncService_ServiceInstanceSyncServer) error
}

func RegisterRegSourceSyncServiceServer(s *grpc.Server, srv RegSourceSyncServiceServer) {
	s.RegisterService(&_RegSourceSyncService_serviceDesc, srv)
}

func _RegSourceSyncService_ServiceInstanceSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegSourceSyncServiceServer).ServiceInstanceSync(m, &regSourceSyncServiceServiceInstanceSyncServer{stream})
}

type RegSourceSyncService_ServiceInstanceSyncServer interface {
	Send(*InstanceMetadata) error
	grpc.ServerStream
}

type regSourceSyncServiceServiceInstanceSyncServer struct {
	grpc.ServerStream
}

func (x *regSourceSyncServiceServiceInstanceSyncServer) Send(m *InstanceMetadata) error {
	return x.ServerStream.SendMsg(m)
}

var _RegSourceSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.regsource.v1.RegSourceSyncService",
	HandlerType: (*RegSourceSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serviceInstanceSync",
			Handler:       _RegSourceSyncService_ServiceInstanceSync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "regsource.proto",
}

func init() { proto.RegisterFile("regsource.proto", fileDescriptor_regsource_b69913b45d43b882) }

var fileDescriptor_regsource_b69913b45d43b882 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xdf, 0xb4, 0xaf, 0xad, 0x1d, 0x51, 0x4b, 0x14, 0x09, 0xa5, 0x87, 0x52, 0x10, 0x44,
	0x30, 0x6b, 0xf5, 0x1b, 0x78, 0xf3, 0x20, 0x48, 0xf7, 0xe6, 0x2d, 0x8d, 0xc3, 0x1a, 0x68, 0x93,
	0x98, 0xcc, 0x2e, 0x78, 0xf7, 0x53, 0xf9, 0xe9, 0x64, 0xd3, 0xf4, 0x0f, 0x42, 0x6f, 0x79, 0xe6,
	0x99, 0x1f, 0x93, 0x79, 0x06, 0xce, 0x03, 0x56, 0xd1, 0xd5, 0x41, 0xa3, 0xf4, 0xc1, 0x91, 0xe3,
	0x82, 0x90, 0x82, 0x22, 0x94, 0xca, 0x1b, 0xb9, 0x33, 0x9b, 0xd9, 0x68, 0x5c, 0x39, 0x57, 0x2d,
	0xb1, 0x50, 0xde, 0x14, 0xca, 0x5a, 0x47, 0x8a, 0x8c, 0xb3, 0x71, 0xcd, 0x4d, 0x4f, 0xe1, 0xa4,
	0xfc, 0xb2, 0x7a, 0x8e, 0x9f, 0x35, 0x46, 0x9a, 0xfe, 0x30, 0x18, 0x3e, 0xdb, 0x48, 0xca, 0x6a,
	0x7c, 0x41, 0x52, 0xef, 0x8a, 0x14, 0x3f, 0x83, 0x8e, 0xf1, 0x82, 0x4d, 0xd8, 0xcd, 0x60, 0xde,
	0x31, 0x9e, 0x8f, 0xe0, 0xd8, 0xe4, 0x1e, 0xd1, 0x49, 0xd5, 0xad, 0xe6, 0x57, 0xd0, 0x8b, 0xf5,
	0x22, 0x22, 0x89, 0x6e, 0x72, 0xb2, 0xe2, 0x02, 0xfa, 0x11, 0x43, 0x63, 0x34, 0x8a, 0xff, 0xc9,
	0xd8, 0x48, 0x3e, 0x86, 0x81, 0x55, 0x2b, 0x8c, 0x5e, 0x69, 0x14, 0x47, 0xc9, 0xdb, 0x15, 0x5a,
	0x4e, 0x2f, 0xeb, 0x48, 0x18, 0x44, 0x6f, 0xcd, 0x65, 0xc9, 0x87, 0xd0, 0x45, 0xdb, 0x88, 0x7e,
	0xaa, 0xb6, 0xcf, 0x87, 0x6f, 0x06, 0x97, 0x73, 0xac, 0xca, 0xb4, 0x7a, 0xbb, 0x55, 0x99, 0x47,
	0x2c, 0xe1, 0x22, 0x4f, 0xdb, 0xec, 0xd6, 0xba, 0xfc, 0x5a, 0x1e, 0x0a, 0x4d, 0xee, 0x65, 0x32,
	0xba, 0x3d, 0xdc, 0xf6, 0x37, 0xaa, 0xe9, 0xbf, 0x7b, 0xf6, 0x54, 0xc2, 0xc4, 0xb8, 0x2d, 0x13,
	0xfd, 0x6a, 0x8f, 0xc9, 0xdf, 0x78, 0x65, 0x6f, 0x77, 0x95, 0xa1, 0x8f, 0x7a, 0x21, 0xb5, 0x5b,
	0x15, 0xb9, 0xd7, 0xb8, 0xcd, 0x2b, 0x1d, 0x6b, 0x4b, 0x15, 0xcd, 0x6c, 0xd1, 0x4b, 0xe7, 0x7a,
	0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xec, 0xb1, 0xcb, 0xe7, 0xf9, 0x01, 0x00, 0x00,
}
