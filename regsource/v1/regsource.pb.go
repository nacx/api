// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: regsource.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SyncRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRequest) Reset()         { *m = SyncRequest{} }
func (m *SyncRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()    {}
func (*SyncRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_639ee107f26506c9, []int{0}
}
func (m *SyncRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRequest.Merge(m, src)
}
func (m *SyncRequest) XXX_Size() int {
	return m.Size()
}
func (m *SyncRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRequest proto.InternalMessageInfo

type InstanceMetadata struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Instance             string   `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	Subset               string   `protobuf:"bytes,3,opt,name=subset,proto3" json:"subset,omitempty"`
	Service              string   `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	Namespace            string   `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster              string   `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Env                  string   `protobuf:"bytes,7,opt,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstanceMetadata) Reset()         { *m = InstanceMetadata{} }
func (m *InstanceMetadata) String() string { return proto.CompactTextString(m) }
func (*InstanceMetadata) ProtoMessage()    {}
func (*InstanceMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_639ee107f26506c9, []int{1}
}
func (m *InstanceMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceMetadata.Merge(m, src)
}
func (m *InstanceMetadata) XXX_Size() int {
	return m.Size()
}
func (m *InstanceMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceMetadata proto.InternalMessageInfo

func (m *InstanceMetadata) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *InstanceMetadata) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *InstanceMetadata) GetSubset() string {
	if m != nil {
		return m.Subset
	}
	return ""
}

func (m *InstanceMetadata) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *InstanceMetadata) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *InstanceMetadata) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *InstanceMetadata) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func init() {
	proto.RegisterType((*SyncRequest)(nil), "tetrate.api.regsource.v1.SyncRequest")
	proto.RegisterType((*InstanceMetadata)(nil), "tetrate.api.regsource.v1.InstanceMetadata")
}

func init() { proto.RegisterFile("regsource.proto", fileDescriptor_639ee107f26506c9) }

var fileDescriptor_639ee107f26506c9 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0x3b, 0x31,
	0x10, 0xc6, 0xff, 0x69, 0xff, 0xb6, 0x76, 0x44, 0x2d, 0x51, 0x24, 0x94, 0x52, 0x4a, 0x41, 0x10,
	0xc1, 0x5d, 0xab, 0x6f, 0xe0, 0xcd, 0x83, 0x20, 0xed, 0xcd, 0x8b, 0xa4, 0x71, 0x58, 0x03, 0x6d,
	0x12, 0x37, 0xb3, 0x0b, 0xde, 0x7d, 0x2a, 0x9f, 0xc0, 0xa3, 0x8f, 0x20, 0x7d, 0x12, 0xd9, 0x34,
	0xdd, 0x16, 0xa1, 0xb7, 0x7c, 0xf3, 0xcd, 0x8f, 0xc9, 0x7c, 0x03, 0xc7, 0x39, 0x66, 0xde, 0x16,
	0xb9, 0xc2, 0xc4, 0xe5, 0x96, 0x2c, 0x17, 0x84, 0x94, 0x4b, 0xc2, 0x44, 0x3a, 0x9d, 0x6c, 0xcc,
	0x72, 0xdc, 0xeb, 0x67, 0xd6, 0x66, 0x73, 0x4c, 0xa5, 0xd3, 0xa9, 0x34, 0xc6, 0x92, 0x24, 0x6d,
	0x8d, 0x5f, 0x71, 0xa3, 0x43, 0x38, 0x98, 0xbe, 0x1b, 0x35, 0xc1, 0xb7, 0x02, 0x3d, 0x8d, 0x3e,
	0x19, 0x74, 0xef, 0x8d, 0x27, 0x69, 0x14, 0x3e, 0x20, 0xc9, 0x17, 0x49, 0x92, 0x1f, 0x41, 0x43,
	0x3b, 0xc1, 0x86, 0xec, 0xa2, 0x33, 0x69, 0x68, 0xc7, 0x7b, 0xb0, 0xaf, 0x63, 0x8f, 0x68, 0x84,
	0x6a, 0xad, 0xf9, 0x19, 0xb4, 0x7c, 0x31, 0xf3, 0x48, 0xa2, 0x19, 0x9c, 0xa8, 0xb8, 0x80, 0xb6,
	0xc7, 0xbc, 0xd4, 0x0a, 0xc5, 0xff, 0x60, 0xac, 0x25, 0xef, 0x43, 0xc7, 0xc8, 0x05, 0x7a, 0x27,
	0x15, 0x8a, 0xbd, 0xe0, 0x6d, 0x0a, 0x15, 0xa7, 0xe6, 0x85, 0x27, 0xcc, 0x45, 0x6b, 0xc5, 0x45,
	0xc9, 0xbb, 0xd0, 0x44, 0x53, 0x8a, 0x76, 0xa8, 0x56, 0xcf, 0x9b, 0x0f, 0x06, 0xa7, 0x13, 0xcc,
	0xa6, 0x61, 0xf5, 0x6a, 0xab, 0x69, 0x1c, 0x31, 0x87, 0x93, 0x38, 0x6d, 0xbd, 0x5b, 0xe5, 0xf2,
	0xf3, 0x64, 0x57, 0x68, 0xc9, 0x56, 0x26, 0xbd, 0xcb, 0xdd, 0x6d, 0x7f, 0xa3, 0x1a, 0xfd, 0xbb,
	0x66, 0x77, 0xcf, 0x5f, 0xcb, 0x01, 0xfb, 0x5e, 0x0e, 0xd8, 0xcf, 0x72, 0xc0, 0x60, 0xa8, 0x6d,
	0xcd, 0x7b, 0xb7, 0xd8, 0xe2, 0xe3, 0x97, 0x1e, 0xd9, 0xd3, 0x55, 0xa6, 0xe9, 0xb5, 0x98, 0x25,
	0xca, 0x2e, 0xd2, 0xd8, 0xab, 0xed, 0xfa, 0x15, 0x0e, 0x57, 0x53, 0x69, 0x39, 0x9e, 0xb5, 0xc2,
	0xe9, 0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xc6, 0x4f, 0x2d, 0x05, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegSourceSyncServiceClient is the client API for RegSourceSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegSourceSyncServiceClient interface {
	ServiceInstanceSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (RegSourceSyncService_ServiceInstanceSyncClient, error)
}

type regSourceSyncServiceClient struct {
	cc *grpc.ClientConn
}

func NewRegSourceSyncServiceClient(cc *grpc.ClientConn) RegSourceSyncServiceClient {
	return &regSourceSyncServiceClient{cc}
}

func (c *regSourceSyncServiceClient) ServiceInstanceSync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (RegSourceSyncService_ServiceInstanceSyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RegSourceSyncService_serviceDesc.Streams[0], "/tetrate.api.regsource.v1.RegSourceSyncService/serviceInstanceSync", opts...)
	if err != nil {
		return nil, err
	}
	x := &regSourceSyncServiceServiceInstanceSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RegSourceSyncService_ServiceInstanceSyncClient interface {
	Recv() (*InstanceMetadata, error)
	grpc.ClientStream
}

type regSourceSyncServiceServiceInstanceSyncClient struct {
	grpc.ClientStream
}

func (x *regSourceSyncServiceServiceInstanceSyncClient) Recv() (*InstanceMetadata, error) {
	m := new(InstanceMetadata)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegSourceSyncServiceServer is the server API for RegSourceSyncService service.
type RegSourceSyncServiceServer interface {
	ServiceInstanceSync(*SyncRequest, RegSourceSyncService_ServiceInstanceSyncServer) error
}

// UnimplementedRegSourceSyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRegSourceSyncServiceServer struct {
}

func (*UnimplementedRegSourceSyncServiceServer) ServiceInstanceSync(req *SyncRequest, srv RegSourceSyncService_ServiceInstanceSyncServer) error {
	return status.Errorf(codes.Unimplemented, "method ServiceInstanceSync not implemented")
}

func RegisterRegSourceSyncServiceServer(s *grpc.Server, srv RegSourceSyncServiceServer) {
	s.RegisterService(&_RegSourceSyncService_serviceDesc, srv)
}

func _RegSourceSyncService_ServiceInstanceSync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegSourceSyncServiceServer).ServiceInstanceSync(m, &regSourceSyncServiceServiceInstanceSyncServer{stream})
}

type RegSourceSyncService_ServiceInstanceSyncServer interface {
	Send(*InstanceMetadata) error
	grpc.ServerStream
}

type regSourceSyncServiceServiceInstanceSyncServer struct {
	grpc.ServerStream
}

func (x *regSourceSyncServiceServiceInstanceSyncServer) Send(m *InstanceMetadata) error {
	return x.ServerStream.SendMsg(m)
}

var _RegSourceSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.regsource.v1.RegSourceSyncService",
	HandlerType: (*RegSourceSyncServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serviceInstanceSync",
			Handler:       _RegSourceSyncService_ServiceInstanceSync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "regsource.proto",
}

func (m *SyncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InstanceMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Env) > 0 {
		i -= len(m.Env)
		copy(dAtA[i:], m.Env)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Env)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Subset) > 0 {
		i -= len(m.Subset)
		copy(dAtA[i:], m.Subset)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Subset)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ip) > 0 {
		i -= len(m.Ip)
		copy(dAtA[i:], m.Ip)
		i = encodeVarintRegsource(dAtA, i, uint64(len(m.Ip)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegsource(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegsource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SyncRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InstanceMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Subset)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovRegsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegsource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegsource(x uint64) (n int) {
	return sovRegsource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRegsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegsource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegsource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegsource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegsource
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRegsource
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegsource
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegsource(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRegsource
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegsource = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegsource   = fmt.Errorf("proto: integer overflow")
)
