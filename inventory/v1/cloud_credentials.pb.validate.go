// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cloud_credentials.proto

package invv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CloudCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloudCredentials) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Provider

	return nil
}

// CloudCredentialsValidationError is the validation error returned by
// CloudCredentials.Validate if the designated constraints aren't met.
type CloudCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudCredentialsValidationError) ErrorName() string { return "CloudCredentialsValidationError" }

// Error satisfies the builtin error interface
func (e CloudCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudCredentialsValidationError{}

// Validate checks the field values on AzureCredentials with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AzureCredentials) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for TenantId

	// no validation rules for AppId

	// no validation rules for AppSecret

	return nil
}

// AzureCredentialsValidationError is the validation error returned by
// AzureCredentials.Validate if the designated constraints aren't met.
type AzureCredentialsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AzureCredentialsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AzureCredentialsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AzureCredentialsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AzureCredentialsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AzureCredentialsValidationError) ErrorName() string { return "AzureCredentialsValidationError" }

// Error satisfies the builtin error interface
func (e AzureCredentialsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAzureCredentials.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AzureCredentialsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AzureCredentialsValidationError{}

// Validate checks the field values on AddCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCredentialsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddCredentialsResponseValidationError is the validation error returned by
// AddCredentialsResponse.Validate if the designated constraints aren't met.
type AddCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCredentialsResponseValidationError) ErrorName() string {
	return "AddCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCredentialsResponseValidationError{}

// Validate checks the field values on ListCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCredentialsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListCredentialsRequestValidationError is the validation error returned by
// ListCredentialsRequest.Validate if the designated constraints aren't met.
type ListCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCredentialsRequestValidationError) ErrorName() string {
	return "ListCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCredentialsRequestValidationError{}

// Validate checks the field values on ListCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCredentialsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCredentials() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCredentialsResponseValidationError{
					field:  fmt.Sprintf("Credentials[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCredentialsResponseValidationError is the validation error returned by
// ListCredentialsResponse.Validate if the designated constraints aren't met.
type ListCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCredentialsResponseValidationError) ErrorName() string {
	return "ListCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCredentialsResponseValidationError{}

// Validate checks the field values on GetCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCredentialsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// GetCredentialsRequestValidationError is the validation error returned by
// GetCredentialsRequest.Validate if the designated constraints aren't met.
type GetCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCredentialsRequestValidationError) ErrorName() string {
	return "GetCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCredentialsRequestValidationError{}

// Validate checks the field values on DeleteCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCredentialsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// DeleteCredentialsRequestValidationError is the validation error returned by
// DeleteCredentialsRequest.Validate if the designated constraints aren't met.
type DeleteCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCredentialsRequestValidationError) ErrorName() string {
	return "DeleteCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCredentialsRequestValidationError{}
