// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: audit.proto

package invv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on AuditLog with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AuditLog) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuditLogValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Severity

	// no validation rules for Kind

	// no validation rules for Message

	// no validation rules for TriggeredBy

	// no validation rules for Properties

	return nil
}

// AuditLogValidationError is the validation error returned by
// AuditLog.Validate if the designated constraints aren't met.
type AuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogValidationError) ErrorName() string { return "AuditLogValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogValidationError{}

// Validate checks the field values on ListAuditLogsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAuditLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// ListAuditLogsRequestValidationError is the validation error returned by
// ListAuditLogsRequest.Validate if the designated constraints aren't met.
type ListAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsRequestValidationError) ErrorName() string {
	return "ListAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsRequestValidationError{}

// Validate checks the field values on ListServiceAuditLogsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceAuditLogsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetService()) < 1 {
		return ListServiceAuditLogsRequestValidationError{
			field:  "Service",
			reason: "value length must be at least 1 bytes",
		}
	}

	// no validation rules for Count

	return nil
}

// ListServiceAuditLogsRequestValidationError is the validation error returned
// by ListServiceAuditLogsRequest.Validate if the designated constraints
// aren't met.
type ListServiceAuditLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceAuditLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceAuditLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceAuditLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceAuditLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceAuditLogsRequestValidationError) ErrorName() string {
	return "ListServiceAuditLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceAuditLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceAuditLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceAuditLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceAuditLogsRequestValidationError{}

// Validate checks the field values on ListAuditLogsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAuditLogsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogsResponseValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAuditLogsResponseValidationError is the validation error returned by
// ListAuditLogsResponse.Validate if the designated constraints aren't met.
type ListAuditLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogsResponseValidationError) ErrorName() string {
	return "ListAuditLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogsResponseValidationError{}
