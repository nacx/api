// Code generated by protoc-gen-go. DO NOT EDIT.
// source: audit.proto

package invv1 // import "github.com/tetrateio/tetrate/api/inventory/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import v1 "github.com/tetrateio/tetrate/api/audit/v1"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request to get the audit logs for a given service
type ListServiceAuditLogsRequest struct {
	// The service to get the audit logs for
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Number of audit logs to retrieve. By default is 25.
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServiceAuditLogsRequest) Reset()         { *m = ListServiceAuditLogsRequest{} }
func (m *ListServiceAuditLogsRequest) String() string { return proto.CompactTextString(m) }
func (*ListServiceAuditLogsRequest) ProtoMessage()    {}
func (*ListServiceAuditLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_audit_53641c4e6ecc6301, []int{0}
}
func (m *ListServiceAuditLogsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServiceAuditLogsRequest.Unmarshal(m, b)
}
func (m *ListServiceAuditLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServiceAuditLogsRequest.Marshal(b, m, deterministic)
}
func (dst *ListServiceAuditLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceAuditLogsRequest.Merge(dst, src)
}
func (m *ListServiceAuditLogsRequest) XXX_Size() int {
	return xxx_messageInfo_ListServiceAuditLogsRequest.Size(m)
}
func (m *ListServiceAuditLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceAuditLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceAuditLogsRequest proto.InternalMessageInfo

func (m *ListServiceAuditLogsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ListServiceAuditLogsRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*ListServiceAuditLogsRequest)(nil), "tetrate.api.inventory.v1.ListServiceAuditLogsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuditServiceClient is the client API for AuditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditServiceClient interface {
	// List audit logs for the given service. If no 'count' parameter has been specified,
	// the last 25 audit logs are returned
	ListServiceAuditLogs(ctx context.Context, in *ListServiceAuditLogsRequest, opts ...grpc.CallOption) (*v1.ListAuditLogsResponse, error)
}

type auditServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuditServiceClient(cc *grpc.ClientConn) AuditServiceClient {
	return &auditServiceClient{cc}
}

func (c *auditServiceClient) ListServiceAuditLogs(ctx context.Context, in *ListServiceAuditLogsRequest, opts ...grpc.CallOption) (*v1.ListAuditLogsResponse, error) {
	out := new(v1.ListAuditLogsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.inventory.v1.AuditService/ListServiceAuditLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServiceServer is the server API for AuditService service.
type AuditServiceServer interface {
	// List audit logs for the given service. If no 'count' parameter has been specified,
	// the last 25 audit logs are returned
	ListServiceAuditLogs(context.Context, *ListServiceAuditLogsRequest) (*v1.ListAuditLogsResponse, error)
}

func RegisterAuditServiceServer(s *grpc.Server, srv AuditServiceServer) {
	s.RegisterService(&_AuditService_serviceDesc, srv)
}

func _AuditService_ListServiceAuditLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceAuditLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServiceServer).ListServiceAuditLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.inventory.v1.AuditService/ListServiceAuditLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServiceServer).ListServiceAuditLogs(ctx, req.(*ListServiceAuditLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.inventory.v1.AuditService",
	HandlerType: (*AuditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServiceAuditLogs",
			Handler:    _AuditService_ListServiceAuditLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "audit.proto",
}

func init() { proto.RegisterFile("audit.proto", fileDescriptor_audit_53641c4e6ecc6301) }

var fileDescriptor_audit_53641c4e6ecc6301 = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x4a, 0x03, 0x41,
	0x14, 0xc6, 0x99, 0x68, 0x94, 0x8c, 0x56, 0xc3, 0x82, 0xcb, 0x6a, 0xb1, 0xc4, 0x26, 0x20, 0xcc,
	0xb0, 0x86, 0x54, 0x56, 0xa6, 0x4e, 0xb5, 0x36, 0x62, 0x37, 0xd9, 0x0c, 0xeb, 0x83, 0x75, 0xde,
	0xba, 0xf3, 0x76, 0x40, 0xc4, 0xc6, 0x2b, 0xd8, 0x7a, 0x05, 0x2f, 0x60, 0xe5, 0x1d, 0xbc, 0x82,
	0x8d, 0xb7, 0x90, 0xec, 0x1f, 0x89, 0xa0, 0x76, 0x6f, 0xf8, 0xe6, 0xfb, 0xde, 0xfb, 0x7e, 0x7c,
	0x4f, 0xd7, 0x2b, 0x20, 0x59, 0x56, 0x48, 0x28, 0x42, 0x32, 0x54, 0x69, 0x32, 0x52, 0x97, 0x20,
	0xc1, 0x7a, 0x63, 0x09, 0xab, 0x3b, 0xe9, 0x93, 0xe8, 0x28, 0x47, 0xcc, 0x0b, 0xa3, 0x74, 0x09,
	0x4a, 0x5b, 0x8b, 0xa4, 0x09, 0xd0, 0xba, 0xd6, 0x17, 0x1d, 0x78, 0x5d, 0xc0, 0x4a, 0x93, 0x51,
	0xfd, 0xd0, 0x09, 0x41, 0x93, 0xae, 0x7c, 0xa2, 0x36, 0xd6, 0x8c, 0x2f, 0xf9, 0xe1, 0x02, 0x1c,
	0x5d, 0x98, 0xca, 0x43, 0x66, 0xce, 0xd7, 0xca, 0x02, 0x73, 0x97, 0x9a, 0xdb, 0xda, 0x38, 0x12,
	0xc7, 0x7c, 0xd7, 0xb5, 0x52, 0xc8, 0x62, 0x36, 0x19, 0xcd, 0x47, 0xaf, 0x9f, 0x6f, 0x5b, 0xdb,
	0xd5, 0x20, 0x66, 0x69, 0xaf, 0x88, 0x80, 0x0f, 0x33, 0xac, 0x2d, 0x85, 0x83, 0x98, 0x4d, 0x86,
	0x69, 0xfb, 0x38, 0x7d, 0x61, 0x7c, 0xbf, 0xc9, 0xeb, 0xb2, 0xc5, 0x33, 0xe3, 0xc1, 0x6f, 0xbb,
	0xc4, 0x4c, 0xfe, 0xd5, 0x55, 0xfe, 0x73, 0x5b, 0x74, 0xf2, 0xc3, 0xd6, 0x96, 0xea, 0x2c, 0x1b,
	0x7f, 0x5d, 0x89, 0xd6, 0x99, 0x71, 0xfc, 0xf8, 0xfe, 0xf1, 0x34, 0x88, 0x44, 0xb8, 0x06, 0x50,
	0x60, 0xee, 0x5a, 0x0a, 0xea, 0xbe, 0x2b, 0xf1, 0x30, 0x9f, 0x5d, 0x4d, 0x73, 0xa0, 0xeb, 0x7a,
	0x29, 0x33, 0xbc, 0x51, 0x5d, 0x34, 0x60, 0x3f, 0x35, 0xb8, 0xbf, 0x6f, 0x53, 0x3e, 0x39, 0x03,
	0xeb, 0x7d, 0xb2, 0xdc, 0x69, 0x38, 0x4e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x94, 0x9c, 0xe8,
	0xa0, 0xbd, 0x01, 0x00, 0x00,
}
