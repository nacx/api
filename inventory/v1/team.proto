// Copyright (c) Tetrate, Inc 2018 All Rights Reserved.
syntax = "proto3";

package tetrate.api.inventory.v1;
option go_package = "github.com/tetrateio/tetrate/api/inventory/v1;invv1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


// The Team Service provides access to team management features
service TeamService {
  // Lists all groups in the team catalog
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http).get = "/v1/groups";
  };
  
  // Lists all usres in the team catalog
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http).get = "/v1/users";
  };

  // Lists all existing roles and their permissions in the team catalog
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http).get = "/v1/roles";
  };

  // Lists all existing bindings between a role a resource, and a group or user.
  rpc ListRoleBindings(ListRoleBindingsRequest) returns (ListRoleBindingsResponse) {
    option (google.api.http).get = "/v1/bindings/{name=**}";
  };

  // Resets the password of the given user so it can be changed
  rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http).post = "/v1/users/{name=**}/resetpassword";
  };

  // Changes the password for the current user, where the user is extracted from the request via HTTP auth
  rpc ChangePassword(ChangePasswordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/changepassword"
      body: "*"
    };
  };
}

// A cloud principal. It can be a human user or a service account.
message User {
  // Unique Identifier of the user across clouds
  string name = 1;

  // Friendly name of the user
  string display_name = 2;

  // Groups the user belongs to
  repeated ResourceRef groups = 3;

  // Kind is the type of the actual user.
  enum Kind {
    // USER means a real human.
    USER = 0;
    // SERVICEACCOUNT means an account just used for programmatical access.
    SERVICEACCOUNT = 1;
  }
  Kind kind = 4;

  // Email of the user or service account, if known
  string email = 5;

  // The login name used to access the Tetrate platform
  string login_name = 6;
}

// A group represents a logical grouping of entities in a hierarchy.
// Groups can contain users or other groups. Each group has a parent
// except th root group.
message Group {
  // Unique Identifier of the group across clouds
  string name = 1;

  // Friendly name of the group
  string display_name = 2;

  // Group's parents. Will be empty for the root group
  repeated ResourceRef parents = 4;

  // List of users that belong to this group
  repeated ResourceRef users = 5;
}

// A Role is a grouping of permissions that can be assigned to groups and users
message Role {
  // Unique Identifier of the role across clouds
  string name = 1;

  // Friendly name of the role
  string display_name = 2;

  // Permissions granted by this role
  repeated string permissions = 3;
}

// A RoleBinding represents a grant of permissions to a user on certain resources
message RoleBinding {
  // Represents the resource where the role permissions are applied
  // to the target entity
  ResourceRef resource = 1;

  // Role to be assigned to the target entity (user or group)
  ResourceRef role = 2;
  
  // Users or groups that will be granted the permissions of the bound role on the
  // given resource.
  repeated ResourceRef principals = 3;
}

// A ResourceRef represents a reference to a cloud resource
message ResourceRef {
  // Unique Identifier of the resource across clouds
  string name = 1;

  // (Optional) The friendly name of the resource
  string display_name = 2;

  // Type of the resource in the target cloud provider
  string type = 3;
}

// Requests all existing groups
message ListGroupsRequest { }

// Represents a response to the list groups service call
message ListGroupsResponse {
  // The list of groups
  repeated Group groups = 1;
}

// Requests all existing users
message ListUsersRequest { }

// Represents a response to the list users service call
message ListUsersResponse {
  // The list of users
  repeated User users = 1;
}

// Requests all existing roles
message ListRolesRequest { }

// Represents a response to the list roles service call
message ListRolesResponse {
  // The list of existing roles
  repeated Role roles = 1;
}

// Requests all existing role bindings for hte given role across all resources
message ListRoleBindingsRequest {
  // Identifier of the resource to get the bindings for
  string name = 1;
}

// Represents a response to the list role bindings service call
message ListRoleBindingsResponse {
  // Existing bindings for the requested resource
  repeated RoleBinding bindings = 1;
}

// Request to reset he password for a given user
message ResetPasswordRequest{
  // Name of the user to reset the password for
  string name = 1;
}

// Request to change the password of the current user
message ChangePasswordRequest{
  // The new password
  string new_password = 2;
}
