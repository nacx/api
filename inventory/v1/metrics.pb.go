// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metrics.proto

package invv1 // import "github.com/tetrateio/tetrate/api/inventory/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Request to retrieve metrics for a given service. Duration is rolling in minutes,
// as in last n minutes. Start/end are Unix timestamps in seconds. Any combination of
// duration/start/end may be provided in any order. filter unused for now
type GetMetricsRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Duration             int32    `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Start                uint64   `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	End                  uint64   `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty"`
	Filter               string   `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMetricsRequest) Reset()         { *m = GetMetricsRequest{} }
func (m *GetMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*GetMetricsRequest) ProtoMessage()    {}
func (*GetMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_2ab89dfcb8afd1a0, []int{0}
}
func (m *GetMetricsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricsRequest.Unmarshal(m, b)
}
func (m *GetMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricsRequest.Marshal(b, m, deterministic)
}
func (dst *GetMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsRequest.Merge(dst, src)
}
func (m *GetMetricsRequest) XXX_Size() int {
	return xxx_messageInfo_GetMetricsRequest.Size(m)
}
func (m *GetMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsRequest proto.InternalMessageInfo

func (m *GetMetricsRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GetMetricsRequest) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GetMetricsRequest) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GetMetricsRequest) GetEnd() uint64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GetMetricsRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

// Single service response row with value, and corresponding Unix timestamp in seconds
type MetricsResponse struct {
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp            uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsResponse) Reset()         { *m = MetricsResponse{} }
func (m *MetricsResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsResponse) ProtoMessage()    {}
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_2ab89dfcb8afd1a0, []int{1}
}
func (m *MetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsResponse.Unmarshal(m, b)
}
func (m *MetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsResponse.Marshal(b, m, deterministic)
}
func (dst *MetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsResponse.Merge(dst, src)
}
func (m *MetricsResponse) XXX_Size() int {
	return xxx_messageInfo_MetricsResponse.Size(m)
}
func (m *MetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsResponse proto.InternalMessageInfo

func (m *MetricsResponse) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MetricsResponse) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// GetMetricsResponse returns multiple response records for a given service
type GetMetricsResponse struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetricsResponse      []*MetricsResponse `protobuf:"bytes,2,rep,name=metricsResponse,proto3" json:"metricsResponse,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetMetricsResponse) Reset()         { *m = GetMetricsResponse{} }
func (m *GetMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*GetMetricsResponse) ProtoMessage()    {}
func (*GetMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_2ab89dfcb8afd1a0, []int{2}
}
func (m *GetMetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMetricsResponse.Unmarshal(m, b)
}
func (m *GetMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMetricsResponse.Marshal(b, m, deterministic)
}
func (dst *GetMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMetricsResponse.Merge(dst, src)
}
func (m *GetMetricsResponse) XXX_Size() int {
	return xxx_messageInfo_GetMetricsResponse.Size(m)
}
func (m *GetMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMetricsResponse proto.InternalMessageInfo

func (m *GetMetricsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetMetricsResponse) GetMetricsResponse() []*MetricsResponse {
	if m != nil {
		return m.MetricsResponse
	}
	return nil
}

func init() {
	proto.RegisterType((*GetMetricsRequest)(nil), "tetrate.api.inventory.v1.GetMetricsRequest")
	proto.RegisterType((*MetricsResponse)(nil), "tetrate.api.inventory.v1.MetricsResponse")
	proto.RegisterType((*GetMetricsResponse)(nil), "tetrate.api.inventory.v1.GetMetricsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsServiceClient interface {
	// Get average rate of requests or number of requests per second (such as QPS)
	// to a given service in a specified rolling duration, or a duration range.
	// If range provided, it overrides duration
	GetRate(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// Get average error rate or number of failed requests per second (such as non 200s)
	// for a given service in the specified rolling duration, or a duration range
	GetError(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// Get average request duration in seconds for a given service in the specified
	// rolling duration or a duration range. This represents latency at server-side
	// as recorded by mesh
	GetLatency(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	// Get health of a given service from the list of active workloads for a given service.
	// Value 1 or greater indicates healthy service. Duration ignored
	GetHealth(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
}

type metricsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricsServiceClient(cc *grpc.ClientConn) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) GetRate(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.inventory.v1.MetricsService/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetError(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.inventory.v1.MetricsService/GetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetLatency(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.inventory.v1.MetricsService/GetLatency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsServiceClient) GetHealth(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.inventory.v1.MetricsService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsServiceServer is the server API for MetricsService service.
type MetricsServiceServer interface {
	// Get average rate of requests or number of requests per second (such as QPS)
	// to a given service in a specified rolling duration, or a duration range.
	// If range provided, it overrides duration
	GetRate(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// Get average error rate or number of failed requests per second (such as non 200s)
	// for a given service in the specified rolling duration, or a duration range
	GetError(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// Get average request duration in seconds for a given service in the specified
	// rolling duration or a duration range. This represents latency at server-side
	// as recorded by mesh
	GetLatency(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	// Get health of a given service from the list of active workloads for a given service.
	// Value 1 or greater indicates healthy service. Duration ignored
	GetHealth(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
}

func RegisterMetricsServiceServer(s *grpc.Server, srv MetricsServiceServer) {
	s.RegisterService(&_MetricsService_serviceDesc, srv)
}

func _MetricsService_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.inventory.v1.MetricsService/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetRate(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.inventory.v1.MetricsService/GetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetError(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetLatency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetLatency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.inventory.v1.MetricsService/GetLatency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetLatency(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.inventory.v1.MetricsService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsServiceServer).GetHealth(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.inventory.v1.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _MetricsService_GetRate_Handler,
		},
		{
			MethodName: "GetError",
			Handler:    _MetricsService_GetError_Handler,
		},
		{
			MethodName: "GetLatency",
			Handler:    _MetricsService_GetLatency_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _MetricsService_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metrics.proto",
}

func init() { proto.RegisterFile("metrics.proto", fileDescriptor_metrics_2ab89dfcb8afd1a0) }

var fileDescriptor_metrics_2ab89dfcb8afd1a0 = []byte{
	// 436 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x93, 0x41, 0x8b, 0xd4, 0x30,
	0x14, 0xc7, 0xc9, 0x4e, 0x67, 0x77, 0xe7, 0x89, 0xae, 0x3e, 0x44, 0x4a, 0xed, 0xaa, 0x54, 0x85,
	0x15, 0xa5, 0x65, 0x76, 0xf1, 0xe4, 0x4d, 0x58, 0xf4, 0xa0, 0x97, 0xee, 0xcd, 0x5b, 0xa6, 0x13,
	0x67, 0x02, 0x6d, 0x52, 0xd3, 0xb4, 0x30, 0xc8, 0x5c, 0x3c, 0xa9, 0x88, 0x17, 0xbf, 0x94, 0x77,
	0xbf, 0x82, 0x1f, 0xc4, 0x34, 0xcd, 0xcc, 0xd4, 0x91, 0x01, 0x2f, 0x73, 0xcb, 0x3f, 0xef, 0xbd,
	0xff, 0xff, 0x97, 0x84, 0xc0, 0xf5, 0x82, 0x69, 0xc5, 0xb3, 0x2a, 0x2e, 0x95, 0xd4, 0x12, 0x7d,
	0x6d, 0x24, 0xd5, 0x2c, 0xa6, 0x25, 0x8f, 0xb9, 0x68, 0x98, 0xd0, 0x52, 0x2d, 0xe2, 0x66, 0x1c,
	0x84, 0x33, 0x29, 0x67, 0x39, 0x4b, 0x4c, 0x21, 0xa1, 0x42, 0x48, 0x4d, 0x35, 0x97, 0xc2, 0xcd,
	0x45, 0x5f, 0x08, 0xdc, 0x7a, 0xc5, 0xf4, 0xdb, 0xce, 0x2c, 0x65, 0x1f, 0x6a, 0x56, 0x69, 0xf4,
	0xe1, 0xa8, 0x62, 0xaa, 0xe1, 0x19, 0xf3, 0xc9, 0x03, 0x72, 0x36, 0x4a, 0x57, 0x12, 0x03, 0x38,
	0x9e, 0xd6, 0xca, 0x5a, 0xf8, 0x07, 0xa6, 0x34, 0x4c, 0xd7, 0x1a, 0x6f, 0xc3, 0xb0, 0xd2, 0x54,
	0x69, 0x7f, 0x60, 0x0a, 0x5e, 0xda, 0x09, 0xbc, 0x09, 0x03, 0x26, 0xa6, 0xbe, 0x67, 0xf7, 0xda,
	0x25, 0xde, 0x81, 0xc3, 0xf7, 0x3c, 0xd7, 0x4c, 0xf9, 0x43, 0x6b, 0xee, 0x54, 0x74, 0x09, 0x27,
	0x6b, 0x8e, 0xaa, 0x34, 0x8c, 0xac, 0xb5, 0x6c, 0x68, 0x5e, 0x33, 0x9b, 0x45, 0xd2, 0x4e, 0x60,
	0x08, 0x23, 0xcd, 0x0b, 0x03, 0x4a, 0x8b, 0xd2, 0x85, 0x6d, 0x36, 0xa2, 0x25, 0x60, 0xff, 0x44,
	0xce, 0x09, 0xc1, 0x13, 0xb4, 0x58, 0x9d, 0xc7, 0xae, 0xf1, 0x0a, 0x4e, 0x8a, 0xbf, 0xdb, 0x4c,
	0xce, 0xe0, 0xec, 0xda, 0xf9, 0x93, 0x78, 0xd7, 0x75, 0xc6, 0x5b, 0xbe, 0xe9, 0xb6, 0xc3, 0xf9,
	0x4f, 0x0f, 0x6e, 0xb8, 0xa6, 0x2b, 0x77, 0x69, 0x9f, 0x09, 0x1c, 0x19, 0xa4, 0xd4, 0x18, 0xe2,
	0xd3, 0xdd, 0xd6, 0xff, 0xbc, 0x43, 0xf0, 0xec, 0xff, 0x9a, 0xbb, 0xe4, 0x28, 0xfa, 0xf4, 0xeb,
	0xf7, 0x8f, 0x83, 0x10, 0x83, 0xa4, 0x19, 0x27, 0x0e, 0x2b, 0x69, 0xa7, 0x93, 0x8f, 0xee, 0xf9,
	0x96, 0xf8, 0x95, 0xc0, 0xb1, 0x19, 0xbd, 0x54, 0x4a, 0xaa, 0x7d, 0xb2, 0x3c, 0xb4, 0x2c, 0xa7,
	0x78, 0xb7, 0xcf, 0xc2, 0xda, 0xd4, 0x1e, 0xcc, 0x77, 0x02, 0x60, 0x66, 0xdf, 0x18, 0x53, 0x91,
	0x2d, 0xf6, 0x89, 0xf3, 0xd8, 0xe2, 0xdc, 0xc7, 0xd3, 0x3e, 0x4e, 0xde, 0xe5, 0xf6, 0x80, 0xbe,
	0x11, 0x18, 0x99, 0xe9, 0xd7, 0x8c, 0xe6, 0x7a, 0xbe, 0x4f, 0x9e, 0x47, 0x96, 0xe7, 0x1e, 0x86,
	0x7d, 0x9e, 0xb9, 0x8d, 0xdd, 0xe0, 0xbc, 0x7c, 0xfe, 0xee, 0x62, 0xc6, 0xf5, 0xbc, 0x9e, 0xc4,
	0x99, 0x2c, 0x12, 0xe7, 0xcf, 0xe5, 0x6a, 0x65, 0xbf, 0xf4, 0x3a, 0xc9, 0x38, 0xbd, 0x30, 0xa2,
	0x19, 0x4f, 0x0e, 0xed, 0xd7, 0xbe, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x05, 0x14, 0x5f, 0xb9,
	0x23, 0x04, 0x00, 0x00,
}
