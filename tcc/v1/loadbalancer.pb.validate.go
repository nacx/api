// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loadbalancer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on LoadBalancer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoadBalancer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Workspace

	// no validation rules for Tenant

	// no validation rules for Class

	// no validation rules for Labels

	switch m.ClassInfo.(type) {

	case *LoadBalancer_ManagementIp:
		// no validation rules for ManagementIp

	case *LoadBalancer_ServiceName:
		// no validation rules for ServiceName

	}

	return nil
}

// LoadBalancerValidationError is the validation error returned by
// LoadBalancer.Validate if the designated constraints aren't met.
type LoadBalancerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerValidationError) ErrorName() string { return "LoadBalancerValidationError" }

// Error satisfies the builtin error interface
func (e LoadBalancerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerValidationError{}

// Validate checks the field values on CreateLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Workspace

	// no validation rules for Tenant

	// no validation rules for Class

	// no validation rules for Labels

	switch m.ClassInfo.(type) {

	case *CreateLoadBalancerRequest_ManagementIp:
		// no validation rules for ManagementIp

	case *CreateLoadBalancerRequest_ServiceName:
		// no validation rules for ServiceName

	}

	return nil
}

// CreateLoadBalancerRequestValidationError is the validation error returned by
// CreateLoadBalancerRequest.Validate if the designated constraints aren't met.
type CreateLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLoadBalancerRequestValidationError) ErrorName() string {
	return "CreateLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLoadBalancerRequestValidationError{}

// Validate checks the field values on GetLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Workspace

	// no validation rules for Tenant

	return nil
}

// GetLoadBalancerRequestValidationError is the validation error returned by
// GetLoadBalancerRequest.Validate if the designated constraints aren't met.
type GetLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoadBalancerRequestValidationError) ErrorName() string {
	return "GetLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoadBalancerRequestValidationError{}

// Validate checks the field values on ListWorkspaceLoadBalancerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListWorkspaceLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Workspace

	// no validation rules for Tenant

	return nil
}

// ListWorkspaceLoadBalancerRequestValidationError is the validation error
// returned by ListWorkspaceLoadBalancerRequest.Validate if the designated
// constraints aren't met.
type ListWorkspaceLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspaceLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspaceLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspaceLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspaceLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspaceLoadBalancerRequestValidationError) ErrorName() string {
	return "ListWorkspaceLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspaceLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspaceLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspaceLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspaceLoadBalancerRequestValidationError{}

// Validate checks the field values on ListTenantLoadBalancerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTenantLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	return nil
}

// ListTenantLoadBalancerRequestValidationError is the validation error
// returned by ListTenantLoadBalancerRequest.Validate if the designated
// constraints aren't met.
type ListTenantLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTenantLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTenantLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTenantLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTenantLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTenantLoadBalancerRequestValidationError) ErrorName() string {
	return "ListTenantLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTenantLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTenantLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTenantLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTenantLoadBalancerRequestValidationError{}

// Validate checks the field values on ListLoadBalancerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoadBalancerResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLoadbalancers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoadBalancerResponseValidationError{
					field:  fmt.Sprintf("Loadbalancers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLoadBalancerResponseValidationError is the validation error returned by
// ListLoadBalancerResponse.Validate if the designated constraints aren't met.
type ListLoadBalancerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoadBalancerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoadBalancerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoadBalancerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoadBalancerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoadBalancerResponseValidationError) ErrorName() string {
	return "ListLoadBalancerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoadBalancerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoadBalancerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoadBalancerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoadBalancerResponseValidationError{}

// Validate checks the field values on UpdateLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Workspace

	// no validation rules for Tenant

	// no validation rules for Class

	// no validation rules for Labels

	switch m.ClassInfo.(type) {

	case *UpdateLoadBalancerRequest_ManagementIp:
		// no validation rules for ManagementIp

	case *UpdateLoadBalancerRequest_ServiceName:
		// no validation rules for ServiceName

	}

	return nil
}

// UpdateLoadBalancerRequestValidationError is the validation error returned by
// UpdateLoadBalancerRequest.Validate if the designated constraints aren't met.
type UpdateLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoadBalancerRequestValidationError) ErrorName() string {
	return "UpdateLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoadBalancerRequestValidationError{}

// Validate checks the field values on DeleteLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Workspace

	// no validation rules for Tenant

	return nil
}

// DeleteLoadBalancerRequestValidationError is the validation error returned by
// DeleteLoadBalancerRequest.Validate if the designated constraints aren't met.
type DeleteLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLoadBalancerRequestValidationError) ErrorName() string {
	return "DeleteLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLoadBalancerRequestValidationError{}
