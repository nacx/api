syntax = "proto3";

package tetrate.api.tcc.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service Tenants {
  rpc CreateTenant(CreateTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      post: "/v1/tenants/{name}"
      body: "*"
    };
  };

  // anyone: Get properties of a Tenant
  rpc GetTenant(GetTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      get: "/v1/tenants/{name}"
    };
  };

  // we'll need List so that a client program can start without knowing the tenant ID,
  // make a request with its credentials, and get back a list of tenants it can operate
  // on (and there should be exactly one tenant in that list)
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants"
    };
  }

  // admin only: Typically, delete Tenant fails if the Tenant exists in a service
  // registry import from systems like kubernetes or consul.
  // Such Tenants cannot be created/deleted. Only updates can be made.
  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{name}"
    };
  };
}

message Tenant {
  string name = 1;

  // TODO: what other info?
  string display_name = 2;
}

message CreateTenantRequest {
  // TODO: down the line we'll need to gather initial info here. Till then, these will
  // be created by hand.
  string name = 1;
  string display_name = 2;
}

message UpdateTenantRequest {
  // TODO: down the line we'll need to gather initial info here. Till then, these will
  // be created by hand.
  string name = 1;
  string display_name = 2;
}

message GetTenantRequest {
  string name = 1;
}

message ListTenantsRequest {
  // Note: no parent in this list request, as Tenants are the top level resource.

  // TODO: the other fields we'll need in the future
  // string filter = 1;
  // ...
}

message ListTenantsResponse {
  repeated Tenant tenants = 1;
}

message DeleteTenantRequest {
  string name = 1;
}
