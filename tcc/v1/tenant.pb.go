// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tenant.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Tenant struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// TODO: what other info?
	DisplayName          string   `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Tenant) Reset()         { *m = Tenant{} }
func (m *Tenant) String() string { return proto.CompactTextString(m) }
func (*Tenant) ProtoMessage()    {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{0}
}
func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tenant.Unmarshal(m, b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
}
func (dst *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(dst, src)
}
func (m *Tenant) XXX_Size() int {
	return xxx_messageInfo_Tenant.Size(m)
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type CreateTenantRequest struct {
	// TODO: down the line we'll need to gather initial info here. Till then, these will
	// be created by hand.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string   `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTenantRequest) Reset()         { *m = CreateTenantRequest{} }
func (m *CreateTenantRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTenantRequest) ProtoMessage()    {}
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{1}
}
func (m *CreateTenantRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTenantRequest.Unmarshal(m, b)
}
func (m *CreateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTenantRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTenantRequest.Merge(dst, src)
}
func (m *CreateTenantRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTenantRequest.Size(m)
}
func (m *CreateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTenantRequest proto.InternalMessageInfo

func (m *CreateTenantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTenantRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type UpdateTenantRequest struct {
	// TODO: down the line we'll need to gather initial info here. Till then, these will
	// be created by hand.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string   `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateTenantRequest) Reset()         { *m = UpdateTenantRequest{} }
func (m *UpdateTenantRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTenantRequest) ProtoMessage()    {}
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{2}
}
func (m *UpdateTenantRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTenantRequest.Unmarshal(m, b)
}
func (m *UpdateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTenantRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTenantRequest.Merge(dst, src)
}
func (m *UpdateTenantRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTenantRequest.Size(m)
}
func (m *UpdateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTenantRequest proto.InternalMessageInfo

func (m *UpdateTenantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateTenantRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

type GetTenantRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTenantRequest) Reset()         { *m = GetTenantRequest{} }
func (m *GetTenantRequest) String() string { return proto.CompactTextString(m) }
func (*GetTenantRequest) ProtoMessage()    {}
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{3}
}
func (m *GetTenantRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTenantRequest.Unmarshal(m, b)
}
func (m *GetTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTenantRequest.Marshal(b, m, deterministic)
}
func (dst *GetTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantRequest.Merge(dst, src)
}
func (m *GetTenantRequest) XXX_Size() int {
	return xxx_messageInfo_GetTenantRequest.Size(m)
}
func (m *GetTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantRequest proto.InternalMessageInfo

func (m *GetTenantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ListTenantsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTenantsRequest) Reset()         { *m = ListTenantsRequest{} }
func (m *ListTenantsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTenantsRequest) ProtoMessage()    {}
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{4}
}
func (m *ListTenantsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTenantsRequest.Unmarshal(m, b)
}
func (m *ListTenantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTenantsRequest.Marshal(b, m, deterministic)
}
func (dst *ListTenantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTenantsRequest.Merge(dst, src)
}
func (m *ListTenantsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTenantsRequest.Size(m)
}
func (m *ListTenantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTenantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTenantsRequest proto.InternalMessageInfo

type ListTenantsResponse struct {
	Tenants              []*Tenant `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListTenantsResponse) Reset()         { *m = ListTenantsResponse{} }
func (m *ListTenantsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTenantsResponse) ProtoMessage()    {}
func (*ListTenantsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{5}
}
func (m *ListTenantsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTenantsResponse.Unmarshal(m, b)
}
func (m *ListTenantsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTenantsResponse.Marshal(b, m, deterministic)
}
func (dst *ListTenantsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTenantsResponse.Merge(dst, src)
}
func (m *ListTenantsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTenantsResponse.Size(m)
}
func (m *ListTenantsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTenantsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTenantsResponse proto.InternalMessageInfo

func (m *ListTenantsResponse) GetTenants() []*Tenant {
	if m != nil {
		return m.Tenants
	}
	return nil
}

type DeleteTenantRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTenantRequest) Reset()         { *m = DeleteTenantRequest{} }
func (m *DeleteTenantRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTenantRequest) ProtoMessage()    {}
func (*DeleteTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_tenant_dd725255feb34e2e, []int{6}
}
func (m *DeleteTenantRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTenantRequest.Unmarshal(m, b)
}
func (m *DeleteTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTenantRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTenantRequest.Merge(dst, src)
}
func (m *DeleteTenantRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTenantRequest.Size(m)
}
func (m *DeleteTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTenantRequest proto.InternalMessageInfo

func (m *DeleteTenantRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Tenant)(nil), "tetrate.api.tcc.v1.Tenant")
	proto.RegisterType((*CreateTenantRequest)(nil), "tetrate.api.tcc.v1.CreateTenantRequest")
	proto.RegisterType((*UpdateTenantRequest)(nil), "tetrate.api.tcc.v1.UpdateTenantRequest")
	proto.RegisterType((*GetTenantRequest)(nil), "tetrate.api.tcc.v1.GetTenantRequest")
	proto.RegisterType((*ListTenantsRequest)(nil), "tetrate.api.tcc.v1.ListTenantsRequest")
	proto.RegisterType((*ListTenantsResponse)(nil), "tetrate.api.tcc.v1.ListTenantsResponse")
	proto.RegisterType((*DeleteTenantRequest)(nil), "tetrate.api.tcc.v1.DeleteTenantRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TenantsClient is the client API for Tenants service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TenantsClient interface {
	CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	// anyone: Get properties of a Tenant
	GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error)
	// we'll need List so that a client program can start without knowing the tenant ID,
	// make a request with its credentials, and get back a list of tenants it can operate
	// on (and there should be exactly one tenant in that list)
	ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error)
	// admin only: Typically, delete Tenant fails if the Tenant exists in a service
	// registry import from systems like kubernetes or consul.
	// Such Tenants cannot be created/deleted. Only updates can be made.
	DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type tenantsClient struct {
	cc *grpc.ClientConn
}

func NewTenantsClient(cc *grpc.ClientConn) TenantsClient {
	return &tenantsClient{cc}
}

func (c *tenantsClient) CreateTenant(ctx context.Context, in *CreateTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Tenants/CreateTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) GetTenant(ctx context.Context, in *GetTenantRequest, opts ...grpc.CallOption) (*Tenant, error) {
	out := new(Tenant)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Tenants/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) ListTenants(ctx context.Context, in *ListTenantsRequest, opts ...grpc.CallOption) (*ListTenantsResponse, error) {
	out := new(ListTenantsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Tenants/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantsClient) DeleteTenant(ctx context.Context, in *DeleteTenantRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Tenants/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantsServer is the server API for Tenants service.
type TenantsServer interface {
	CreateTenant(context.Context, *CreateTenantRequest) (*Tenant, error)
	// anyone: Get properties of a Tenant
	GetTenant(context.Context, *GetTenantRequest) (*Tenant, error)
	// we'll need List so that a client program can start without knowing the tenant ID,
	// make a request with its credentials, and get back a list of tenants it can operate
	// on (and there should be exactly one tenant in that list)
	ListTenants(context.Context, *ListTenantsRequest) (*ListTenantsResponse, error)
	// admin only: Typically, delete Tenant fails if the Tenant exists in a service
	// registry import from systems like kubernetes or consul.
	// Such Tenants cannot be created/deleted. Only updates can be made.
	DeleteTenant(context.Context, *DeleteTenantRequest) (*empty.Empty, error)
}

func RegisterTenantsServer(s *grpc.Server, srv TenantsServer) {
	s.RegisterService(&_Tenants_serviceDesc, srv)
}

func _Tenants_CreateTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).CreateTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Tenants/CreateTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).CreateTenant(ctx, req.(*CreateTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Tenants/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).GetTenant(ctx, req.(*GetTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Tenants/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).ListTenants(ctx, req.(*ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenants_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantsServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Tenants/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantsServer).DeleteTenant(ctx, req.(*DeleteTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tenants_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.v1.Tenants",
	HandlerType: (*TenantsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTenant",
			Handler:    _Tenants_CreateTenant_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _Tenants_GetTenant_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _Tenants_ListTenants_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _Tenants_DeleteTenant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}

func init() { proto.RegisterFile("tenant.proto", fileDescriptor_tenant_dd725255feb34e2e) }

var fileDescriptor_tenant_dd725255feb34e2e = []byte{
	// 401 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x8a, 0xdb, 0x30,
	0x14, 0x85, 0x71, 0x52, 0x12, 0x22, 0xbb, 0x50, 0xae, 0x43, 0x1b, 0xdc, 0x16, 0x52, 0x51, 0xf2,
	0xb7, 0x90, 0x48, 0xda, 0x55, 0x37, 0x85, 0xfe, 0xd0, 0x45, 0x43, 0x17, 0xa1, 0xdd, 0x74, 0x53,
	0x14, 0x47, 0x4d, 0x45, 0x63, 0xcb, 0xb5, 0x94, 0x40, 0x28, 0xb3, 0x99, 0x57, 0x98, 0xb7, 0x9a,
	0xed, 0xbc, 0xc2, 0x3c, 0xc8, 0x10, 0x59, 0x1e, 0x3c, 0x13, 0x91, 0x0c, 0xcc, 0xec, 0x64, 0xdd,
	0xeb, 0xf3, 0xe9, 0x9e, 0xc3, 0x45, 0x81, 0xe6, 0x29, 0x4b, 0x35, 0xc9, 0x72, 0xa9, 0x25, 0x80,
	0xe6, 0x3a, 0x67, 0x9a, 0x13, 0x96, 0x09, 0xa2, 0xe3, 0x98, 0x6c, 0xc6, 0xd1, 0x8b, 0xa5, 0x94,
	0xcb, 0x15, 0xa7, 0x2c, 0x13, 0x94, 0xa5, 0xa9, 0xd4, 0x4c, 0x0b, 0x99, 0xaa, 0xe2, 0x8f, 0xe8,
	0xb9, 0xad, 0x9a, 0xaf, 0xf9, 0xfa, 0x37, 0xe5, 0x49, 0xa6, 0xb7, 0x45, 0x11, 0xbf, 0x47, 0x8d,
	0xef, 0x46, 0x1e, 0x00, 0x3d, 0x4a, 0x59, 0xc2, 0x3b, 0x5e, 0xd7, 0x1b, 0xb4, 0x66, 0xe6, 0x0c,
	0xaf, 0x50, 0xb0, 0x10, 0x2a, 0x5b, 0xb1, 0xed, 0x2f, 0x53, 0xab, 0x99, 0x9a, 0x6f, 0xef, 0xbe,
	0xb1, 0x84, 0xe3, 0x29, 0x0a, 0x3f, 0xe6, 0x9c, 0x69, 0x5e, 0xc8, 0xcc, 0xf8, 0xbf, 0x35, 0x57,
	0xf7, 0x51, 0xfb, 0x91, 0x2d, 0x1e, 0x4a, 0xad, 0x87, 0x9e, 0x7c, 0xe1, 0xfa, 0xa8, 0x14, 0x6e,
	0x23, 0x98, 0x0a, 0x65, 0x1b, 0x95, 0xed, 0xc4, 0x5f, 0x51, 0x78, 0xe3, 0x56, 0x65, 0x32, 0x55,
	0x1c, 0xde, 0xa2, 0x66, 0x11, 0x88, 0xea, 0x78, 0xdd, 0xfa, 0xc0, 0x9f, 0x44, 0x64, 0x3f, 0x12,
	0x62, 0xa1, 0x65, 0x2b, 0x1e, 0xa2, 0xf0, 0x13, 0x5f, 0xf1, 0x3b, 0x0c, 0x36, 0x39, 0xaf, 0xa3,
	0xa6, 0x85, 0x42, 0x8e, 0x82, 0xaa, 0xbb, 0xd0, 0x77, 0xb1, 0x1c, 0xfe, 0x47, 0x07, 0x1e, 0x85,
	0x5f, 0x9e, 0x5e, 0x5c, 0x9e, 0xd5, 0x9e, 0x61, 0xa0, 0x9b, 0x31, 0xb5, 0x0f, 0xa4, 0xff, 0x77,
	0xec, 0x93, 0x77, 0xde, 0x08, 0x04, 0x6a, 0x5d, 0xbb, 0x06, 0xaf, 0x5d, 0x3a, 0xb7, 0x4d, 0x3d,
	0x48, 0x8b, 0x0c, 0xad, 0x0d, 0x0e, 0x1a, 0x28, 0xe4, 0x57, 0x2c, 0x86, 0x9e, 0x4b, 0x66, 0x3f,
	0x99, 0xa8, 0x7f, 0xb4, 0xaf, 0xc8, 0x0a, 0x87, 0x86, 0xfd, 0x18, 0xfc, 0x0a, 0x1b, 0xfe, 0xa2,
	0xa0, 0x1a, 0x85, 0xdb, 0x53, 0x47, 0x58, 0xd1, 0x53, 0x52, 0x6c, 0x12, 0x29, 0x37, 0x89, 0x7c,
	0xde, 0x6d, 0x52, 0x39, 0xe1, 0xc8, 0x31, 0xe1, 0x87, 0xe1, 0xcf, 0xfe, 0x52, 0xe8, 0x3f, 0xeb,
	0x39, 0x89, 0x65, 0x42, 0x2d, 0x48, 0xc8, 0xf2, 0x64, 0x56, 0x56, 0xc7, 0x31, 0xdd, 0x8c, 0xe7,
	0x0d, 0x23, 0xfb, 0xe6, 0x2a, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x10, 0x82, 0xf1, 0xf0, 0x03, 0x00,
	0x00,
}
