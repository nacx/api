// Code generated by protoc-gen-go. DO NOT EDIT.
// source: configproducer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigDownloadRequest struct {
	// currently accepted values are istio or f5
	Configtype string `protobuf:"bytes,1,opt,name=configtype,proto3" json:"configtype,omitempty"`
	// A unique identifier for the k8s cluster or VM cluster
	// Typically we have multiple k8s clusters and one big giant VM cluster
	// in a DC.
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigDownloadRequest) Reset()         { *m = ConfigDownloadRequest{} }
func (m *ConfigDownloadRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigDownloadRequest) ProtoMessage()    {}
func (*ConfigDownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_configproducer_bae0e27beb665c95, []int{0}
}
func (m *ConfigDownloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigDownloadRequest.Unmarshal(m, b)
}
func (m *ConfigDownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigDownloadRequest.Marshal(b, m, deterministic)
}
func (dst *ConfigDownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigDownloadRequest.Merge(dst, src)
}
func (m *ConfigDownloadRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigDownloadRequest.Size(m)
}
func (m *ConfigDownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigDownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigDownloadRequest proto.InternalMessageInfo

func (m *ConfigDownloadRequest) GetConfigtype() string {
	if m != nil {
		return m.Configtype
	}
	return ""
}

func (m *ConfigDownloadRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type ConfigData struct {
	Configtype string `protobuf:"bytes,1,opt,name=configtype,proto3" json:"configtype,omitempty"`
	Cluster    string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// For istio, this is a huge YAML dump of all Istio artifacts like
	// virtual services, destination rules, service entries, gateways,
	// etc. in YAML form. For F5, its all f5 config artifacts.
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigData) Reset()         { *m = ConfigData{} }
func (m *ConfigData) String() string { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()    {}
func (*ConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_configproducer_bae0e27beb665c95, []int{1}
}
func (m *ConfigData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigData.Unmarshal(m, b)
}
func (m *ConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigData.Marshal(b, m, deterministic)
}
func (dst *ConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigData.Merge(dst, src)
}
func (m *ConfigData) XXX_Size() int {
	return xxx_messageInfo_ConfigData.Size(m)
}
func (m *ConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigData proto.InternalMessageInfo

func (m *ConfigData) GetConfigtype() string {
	if m != nil {
		return m.Configtype
	}
	return ""
}

func (m *ConfigData) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConfigData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigDownloadRequest)(nil), "tetrate.api.tcc.v1.ConfigDownloadRequest")
	proto.RegisterType((*ConfigData)(nil), "tetrate.api.tcc.v1.ConfigData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigProducerClient is the client API for ConfigProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigProducerClient interface {
	Download(ctx context.Context, in *ConfigDownloadRequest, opts ...grpc.CallOption) (*ConfigData, error)
}

type configProducerClient struct {
	cc *grpc.ClientConn
}

func NewConfigProducerClient(cc *grpc.ClientConn) ConfigProducerClient {
	return &configProducerClient{cc}
}

func (c *configProducerClient) Download(ctx context.Context, in *ConfigDownloadRequest, opts ...grpc.CallOption) (*ConfigData, error) {
	out := new(ConfigData)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.ConfigProducer/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigProducerServer is the server API for ConfigProducer service.
type ConfigProducerServer interface {
	Download(context.Context, *ConfigDownloadRequest) (*ConfigData, error)
}

func RegisterConfigProducerServer(s *grpc.Server, srv ConfigProducerServer) {
	s.RegisterService(&_ConfigProducer_serviceDesc, srv)
}

func _ConfigProducer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigProducerServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.ConfigProducer/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigProducerServer).Download(ctx, req.(*ConfigDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigProducer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.v1.ConfigProducer",
	HandlerType: (*ConfigProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _ConfigProducer_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configproducer.proto",
}

func init() {
	proto.RegisterFile("configproducer.proto", fileDescriptor_configproducer_bae0e27beb665c95)
}

var fileDescriptor_configproducer_bae0e27beb665c95 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x49, 0xce, 0xcf, 0x4b,
	0xcb, 0x4c, 0x2f, 0x28, 0xca, 0x4f, 0x29, 0x4d, 0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x2a, 0x49, 0x2d, 0x29, 0x4a, 0x2c, 0x49, 0xd5, 0x4b, 0x2c, 0xc8, 0xd4, 0x2b, 0x49,
	0x4e, 0xd6, 0x2b, 0x33, 0x94, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8,
	0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xe8, 0x50, 0x0a,
	0xe4, 0x12, 0x75, 0x06, 0x9b, 0xe4, 0x92, 0x5f, 0x9e, 0x97, 0x93, 0x9f, 0x98, 0x12, 0x94, 0x5a,
	0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc7, 0xc5, 0x05, 0xb1, 0xa2, 0xa4, 0xb2, 0x20, 0x55, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x49, 0x44, 0x48, 0x82, 0x8b, 0x3d, 0x39, 0xa7, 0xb4, 0xb8,
	0x24, 0xb5, 0x48, 0x82, 0x09, 0x2c, 0x09, 0xe3, 0x2a, 0x25, 0x70, 0x71, 0x41, 0x8d, 0x4c, 0x2c,
	0x49, 0x24, 0xdf, 0x1c, 0x90, 0x4c, 0x41, 0x62, 0x25, 0xc8, 0x4d, 0x12, 0xcc, 0x10, 0x19, 0x28,
	0xd7, 0x68, 0x36, 0x23, 0x17, 0x1f, 0xc4, 0x8a, 0x00, 0xa8, 0xff, 0x85, 0x3a, 0x18, 0xb9, 0x38,
	0x60, 0x5e, 0x10, 0xd2, 0xd4, 0xc3, 0x0c, 0x07, 0x3d, 0xac, 0xde, 0x94, 0x92, 0xc3, 0xa3, 0x34,
	0xb1, 0x24, 0x51, 0xc9, 0xb0, 0xe9, 0xf2, 0x93, 0xc9, 0x4c, 0xda, 0x42, 0x9a, 0xfa, 0x65, 0x86,
	0xfa, 0xa8, 0x61, 0xae, 0x5f, 0x8d, 0xf0, 0x46, 0xad, 0x7e, 0x35, 0xd4, 0xd9, 0xb5, 0x4e, 0x9a,
	0x51, 0xea, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x50, 0xe3, 0x33,
	0xf3, 0x61, 0x2c, 0x70, 0x44, 0x94, 0x24, 0x27, 0xeb, 0x97, 0x19, 0x26, 0xb1, 0x81, 0x23, 0xc1,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x48, 0x6e, 0x3e, 0xce, 0x01, 0x00, 0x00,
}
