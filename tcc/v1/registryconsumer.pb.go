// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registryconsumer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Please do not over engineer this anything beyond a glorified
// file copy.
type RegistryData struct {
	// currently accepted values are kubernetes or f5
	Registrytype string `protobuf:"bytes,1,opt,name=registrytype,proto3" json:"registrytype,omitempty"`
	// A unique identifier for the k8s/f5 cluster
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// A huge json dump of all services, endpoints.
	// For k8s, its literally kubectl get services --all-namespaces -o json
	// and kubectl get po --all-namespaces -o json
	Payload              string   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryData) Reset()         { *m = RegistryData{} }
func (m *RegistryData) String() string { return proto.CompactTextString(m) }
func (*RegistryData) ProtoMessage()    {}
func (*RegistryData) Descriptor() ([]byte, []int) {
	return fileDescriptor_registryconsumer_ff1ccad998b80ba4, []int{0}
}
func (m *RegistryData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistryData.Unmarshal(m, b)
}
func (m *RegistryData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistryData.Marshal(b, m, deterministic)
}
func (dst *RegistryData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryData.Merge(dst, src)
}
func (m *RegistryData) XXX_Size() int {
	return xxx_messageInfo_RegistryData.Size(m)
}
func (m *RegistryData) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryData.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryData proto.InternalMessageInfo

func (m *RegistryData) GetRegistrytype() string {
	if m != nil {
		return m.Registrytype
	}
	return ""
}

func (m *RegistryData) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RegistryData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistryData)(nil), "tetrate.api.tcc.v1.RegistryData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryConsumerClient is the client API for RegistryConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryConsumerClient interface {
	Upload(ctx context.Context, in *RegistryData, opts ...grpc.CallOption) (*empty.Empty, error)
}

type registryConsumerClient struct {
	cc *grpc.ClientConn
}

func NewRegistryConsumerClient(cc *grpc.ClientConn) RegistryConsumerClient {
	return &registryConsumerClient{cc}
}

func (c *registryConsumerClient) Upload(ctx context.Context, in *RegistryData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.RegistryConsumer/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryConsumerServer is the server API for RegistryConsumer service.
type RegistryConsumerServer interface {
	Upload(context.Context, *RegistryData) (*empty.Empty, error)
}

func RegisterRegistryConsumerServer(s *grpc.Server, srv RegistryConsumerServer) {
	s.RegisterService(&_RegistryConsumer_serviceDesc, srv)
}

func _RegistryConsumer_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryConsumerServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.RegistryConsumer/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryConsumerServer).Upload(ctx, req.(*RegistryData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryConsumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.v1.RegistryConsumer",
	HandlerType: (*RegistryConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _RegistryConsumer_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registryconsumer.proto",
}

func init() {
	proto.RegisterFile("registryconsumer.proto", fileDescriptor_registryconsumer_ff1ccad998b80ba4)
}

var fileDescriptor_registryconsumer_ff1ccad998b80ba4 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x49, 0x85, 0x8a, 0x43, 0x17, 0x32, 0x8b, 0x12, 0xaa, 0x8b, 0x92, 0x8d, 0x3f, 0xe0,
	0x1d, 0x52, 0x37, 0xe2, 0xd2, 0x9f, 0x17, 0x28, 0xb8, 0x71, 0x37, 0x19, 0xa7, 0x71, 0x20, 0xc9,
	0x1d, 0x26, 0x37, 0x81, 0x50, 0xbb, 0xf1, 0x09, 0x04, 0x1f, 0xcd, 0x57, 0xf0, 0x41, 0x24, 0xc9,
	0x0c, 0x54, 0xdd, 0xe5, 0xe4, 0x63, 0x38, 0xe7, 0xbb, 0x6c, 0xee, 0x74, 0x6e, 0x6a, 0x72, 0x9d,
	0xc2, 0xaa, 0x6e, 0x4a, 0xed, 0xc0, 0x3a, 0x24, 0xe4, 0x9c, 0x34, 0x39, 0x49, 0x1a, 0xa4, 0x35,
	0x40, 0x4a, 0x41, 0x9b, 0x2e, 0x4e, 0x73, 0xc4, 0xbc, 0xd0, 0x42, 0x5a, 0x23, 0x64, 0x55, 0x21,
	0x49, 0x32, 0x58, 0xd5, 0xe3, 0x8b, 0xc5, 0x89, 0xa7, 0x43, 0xca, 0x9a, 0x8d, 0xd0, 0xa5, 0xa5,
	0x6e, 0x84, 0xc9, 0x86, 0xcd, 0xd6, 0xbe, 0xe8, 0x41, 0x92, 0xe4, 0x09, 0x9b, 0x85, 0x62, 0xea,
	0xac, 0x8e, 0xa3, 0x65, 0x74, 0x7e, 0xb4, 0xfe, 0xf5, 0x8f, 0xc7, 0xec, 0x50, 0x15, 0x4d, 0x4d,
	0xda, 0xc5, 0x93, 0x01, 0x87, 0xd8, 0x13, 0x2b, 0xbb, 0x02, 0xe5, 0x4b, 0x7c, 0x30, 0x12, 0x1f,
	0x57, 0x1f, 0x11, 0x3b, 0x0e, 0x45, 0xf7, 0xde, 0x88, 0xbf, 0xb1, 0xe9, 0x93, 0xed, 0x31, 0x5f,
	0xc2, 0x7f, 0x2d, 0xd8, 0x1f, 0xb6, 0x98, 0xc3, 0xa8, 0x01, 0x41, 0x03, 0x1e, 0x7b, 0x8d, 0xe4,
	0xe6, 0xfd, 0xeb, 0xfb, 0x73, 0xb2, 0x4a, 0xae, 0x44, 0x9b, 0x8a, 0xbf, 0x37, 0x13, 0xdb, 0xfd,
	0xe1, 0x3b, 0xb1, 0xf5, 0x43, 0x77, 0xb7, 0xd1, 0xe5, 0xdd, 0xc5, 0xf3, 0x59, 0x6e, 0xe8, 0xb5,
	0xc9, 0x40, 0x61, 0x29, 0x7c, 0xbf, 0xc1, 0xf0, 0x35, 0x5c, 0x93, 0x94, 0x12, 0x6d, 0x9a, 0x4d,
	0x87, 0xd2, 0xeb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x07, 0x22, 0x01, 0x95, 0x01, 0x00,
	0x00,
}
