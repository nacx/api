// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HttpModifyAction_What int32

const (
	HttpModifyAction_URI       HttpModifyAction_What = 0
	HttpModifyAction_AUTHORITY HttpModifyAction_What = 1
	HttpModifyAction_HEADER    HttpModifyAction_What = 2
)

var HttpModifyAction_What_name = map[int32]string{
	0: "URI",
	1: "AUTHORITY",
	2: "HEADER",
}
var HttpModifyAction_What_value = map[string]int32{
	"URI":       0,
	"AUTHORITY": 1,
	"HEADER":    2,
}

func (x HttpModifyAction_What) String() string {
	return proto.EnumName(HttpModifyAction_What_name, int32(x))
}
func (HttpModifyAction_What) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{14, 0}
}

type HttpModifyAction_How int32

const (
	// this is the only value allowed for uri and authority rewrite
	HttpModifyAction_SET HttpModifyAction_How = 0
	// append and delete are applicable only for headers
	HttpModifyAction_APPEND HttpModifyAction_How = 1
	HttpModifyAction_DELETE HttpModifyAction_How = 2
)

var HttpModifyAction_How_name = map[int32]string{
	0: "SET",
	1: "APPEND",
	2: "DELETE",
}
var HttpModifyAction_How_value = map[string]int32{
	"SET":    0,
	"APPEND": 1,
	"DELETE": 2,
}

func (x HttpModifyAction_How) String() string {
	return proto.EnumName(HttpModifyAction_How_name, int32(x))
}
func (HttpModifyAction_How) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{14, 1}
}

type CreateServiceRequest struct {
	// fqdn
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Workspace            string            `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Tenant               string            `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Labels               map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports                []*Port           `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	Subsets              []*Subset         `protobuf:"bytes,6,rep,name=subsets,proto3" json:"subsets,omitempty"`
	HttpSettings         *HttpSettings     `protobuf:"bytes,7,opt,name=http_settings,json=httpSettings,proto3" json:"http_settings,omitempty"`
	TcpSettings          *TcpSettings      `protobuf:"bytes,8,opt,name=tcp_settings,json=tcpSettings,proto3" json:"tcp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateServiceRequest) Reset()         { *m = CreateServiceRequest{} }
func (m *CreateServiceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateServiceRequest) ProtoMessage()    {}
func (*CreateServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{0}
}
func (m *CreateServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateServiceRequest.Unmarshal(m, b)
}
func (m *CreateServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateServiceRequest.Marshal(b, m, deterministic)
}
func (dst *CreateServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServiceRequest.Merge(dst, src)
}
func (m *CreateServiceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateServiceRequest.Size(m)
}
func (m *CreateServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServiceRequest proto.InternalMessageInfo

func (m *CreateServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateServiceRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *CreateServiceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateServiceRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *CreateServiceRequest) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *CreateServiceRequest) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

func (m *CreateServiceRequest) GetHttpSettings() *HttpSettings {
	if m != nil {
		return m.HttpSettings
	}
	return nil
}

func (m *CreateServiceRequest) GetTcpSettings() *TcpSettings {
	if m != nil {
		return m.TcpSettings
	}
	return nil
}

type GetServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Workspace            string   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceRequest) Reset()         { *m = GetServiceRequest{} }
func (m *GetServiceRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceRequest) ProtoMessage()    {}
func (*GetServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{1}
}
func (m *GetServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServiceRequest.Unmarshal(m, b)
}
func (m *GetServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServiceRequest.Marshal(b, m, deterministic)
}
func (dst *GetServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceRequest.Merge(dst, src)
}
func (m *GetServiceRequest) XXX_Size() int {
	return xxx_messageInfo_GetServiceRequest.Size(m)
}
func (m *GetServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceRequest proto.InternalMessageInfo

func (m *GetServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetServiceRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *GetServiceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListServiceRequest struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Workspace            string   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListServiceRequest) Reset()         { *m = ListServiceRequest{} }
func (m *ListServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ListServiceRequest) ProtoMessage()    {}
func (*ListServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{2}
}
func (m *ListServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServiceRequest.Unmarshal(m, b)
}
func (m *ListServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServiceRequest.Marshal(b, m, deterministic)
}
func (dst *ListServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceRequest.Merge(dst, src)
}
func (m *ListServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ListServiceRequest.Size(m)
}
func (m *ListServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceRequest proto.InternalMessageInfo

func (m *ListServiceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListServiceRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

type ListServiceResponse struct {
	Services             []*Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListServiceResponse) Reset()         { *m = ListServiceResponse{} }
func (m *ListServiceResponse) String() string { return proto.CompactTextString(m) }
func (*ListServiceResponse) ProtoMessage()    {}
func (*ListServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{3}
}
func (m *ListServiceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListServiceResponse.Unmarshal(m, b)
}
func (m *ListServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListServiceResponse.Marshal(b, m, deterministic)
}
func (dst *ListServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListServiceResponse.Merge(dst, src)
}
func (m *ListServiceResponse) XXX_Size() int {
	return xxx_messageInfo_ListServiceResponse.Size(m)
}
func (m *ListServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListServiceResponse proto.InternalMessageInfo

func (m *ListServiceResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type UpdateServiceRequest struct {
	// immutable
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Tenant    string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// If provided, will overwrite existing labels.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// if specified, overwrites existing port list
	Ports []*Port `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	// if specified, overwrites the existing list of subsets
	Subsets              []*Subset     `protobuf:"bytes,6,rep,name=subsets,proto3" json:"subsets,omitempty"`
	HttpSettings         *HttpSettings `protobuf:"bytes,7,opt,name=http_settings,json=httpSettings,proto3" json:"http_settings,omitempty"`
	TcpSettings          *TcpSettings  `protobuf:"bytes,8,opt,name=tcp_settings,json=tcpSettings,proto3" json:"tcp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UpdateServiceRequest) Reset()         { *m = UpdateServiceRequest{} }
func (m *UpdateServiceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateServiceRequest) ProtoMessage()    {}
func (*UpdateServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{4}
}
func (m *UpdateServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateServiceRequest.Unmarshal(m, b)
}
func (m *UpdateServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateServiceRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateServiceRequest.Merge(dst, src)
}
func (m *UpdateServiceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateServiceRequest.Size(m)
}
func (m *UpdateServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateServiceRequest proto.InternalMessageInfo

func (m *UpdateServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateServiceRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *UpdateServiceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateServiceRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *UpdateServiceRequest) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *UpdateServiceRequest) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

func (m *UpdateServiceRequest) GetHttpSettings() *HttpSettings {
	if m != nil {
		return m.HttpSettings
	}
	return nil
}

func (m *UpdateServiceRequest) GetTcpSettings() *TcpSettings {
	if m != nil {
		return m.TcpSettings
	}
	return nil
}

type DeleteServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Workspace            string   `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServiceRequest) Reset()         { *m = DeleteServiceRequest{} }
func (m *DeleteServiceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServiceRequest) ProtoMessage()    {}
func (*DeleteServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{5}
}
func (m *DeleteServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServiceRequest.Unmarshal(m, b)
}
func (m *DeleteServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServiceRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServiceRequest.Merge(dst, src)
}
func (m *DeleteServiceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteServiceRequest.Size(m)
}
func (m *DeleteServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServiceRequest proto.InternalMessageInfo

func (m *DeleteServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteServiceRequest) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *DeleteServiceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

// This is roughly equivalent to Istio service entry + virtual service + destination rule
// or the equivalent of Istio gateway's server [without TLS] + virtual service + dest rule
// TLS is omitted from here because usually, the secOps team in the enterprise determines the
// certs, the mount points, etc. The service owner should not care about it.
type Service struct {
	// The FQDN of the service
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// equivalent to k8s namespace
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Tenant    string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// User identifiable tags associated with this service.
	Labels  map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ports   []*Port           `protobuf:"bytes,5,rep,name=ports,proto3" json:"ports,omitempty"`
	Subsets []*Subset         `protobuf:"bytes,6,rep,name=subsets,proto3" json:"subsets,omitempty"`
	// HTTP specific settings, transformations and routing rules
	// associated with HTTP traffic to this service.
	HttpSettings *HttpSettings `protobuf:"bytes,7,opt,name=http_settings,json=httpSettings,proto3" json:"http_settings,omitempty"`
	// TCP specific settings, transformations and routing rules
	// associated with non-HTTP traffic to this service.
	TcpSettings          *TcpSettings `protobuf:"bytes,8,opt,name=tcp_settings,json=tcpSettings,proto3" json:"tcp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{6}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (dst *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(dst, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetWorkspace() string {
	if m != nil {
		return m.Workspace
	}
	return ""
}

func (m *Service) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Service) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Service) GetPorts() []*Port {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Service) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

func (m *Service) GetHttpSettings() *HttpSettings {
	if m != nil {
		return m.HttpSettings
	}
	return nil
}

func (m *Service) GetTcpSettings() *TcpSettings {
	if m != nil {
		return m.TcpSettings
	}
	return nil
}

// Port describes the properties of a specific port of a service on a VM or k8s.
type Port struct {
	// REQUIRED: A valid non-negative integer port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The protocol exposed on the port.
	// MUST BE one of HTTP|GRPC|HTTP2|TCP|TLS.
	// TLS implies the connection will be routed based on the SNI header to
	// the destination without terminating the TLS connection.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Label assigned to the port.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The endpoint port to which this service port maps to. For example, service port 80
	// exposed on the load balancer could map to an endpoint port 9080 on a VM.
	EndpointPort         uint32   `protobuf:"varint,4,opt,name=endpoint_port,json=endpointPort,proto3" json:"endpoint_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{7}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (dst *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(dst, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetEndpointPort() uint32 {
	if m != nil {
		return m.EndpointPort
	}
	return 0
}

type Subset struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels apply a filter over the endpoints of a service in the
	// service registry.
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Subset) Reset()         { *m = Subset{} }
func (m *Subset) String() string { return proto.CompactTextString(m) }
func (*Subset) ProtoMessage()    {}
func (*Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{8}
}
func (m *Subset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subset.Unmarshal(m, b)
}
func (m *Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subset.Marshal(b, m, deterministic)
}
func (dst *Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subset.Merge(dst, src)
}
func (m *Subset) XXX_Size() int {
	return xxx_messageInfo_Subset.Size(m)
}
func (m *Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_Subset proto.InternalMessageInfo

func (m *Subset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subset) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// HTTP settings for a service. Applicable to ports receiving HTTP traffic.
type HttpSettings struct {
	StickySession        *HttpSettings_StickySession `protobuf:"bytes,1,opt,name=sticky_session,json=stickySession,proto3" json:"sticky_session,omitempty"`
	CorsPolicy           *CorsPolicy                 `protobuf:"bytes,2,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	RouteRules           []*HttpRule                 `protobuf:"bytes,3,rep,name=route_rules,json=routeRules,proto3" json:"route_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *HttpSettings) Reset()         { *m = HttpSettings{} }
func (m *HttpSettings) String() string { return proto.CompactTextString(m) }
func (*HttpSettings) ProtoMessage()    {}
func (*HttpSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{9}
}
func (m *HttpSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings.Unmarshal(m, b)
}
func (m *HttpSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings.Marshal(b, m, deterministic)
}
func (dst *HttpSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings.Merge(dst, src)
}
func (m *HttpSettings) XXX_Size() int {
	return xxx_messageInfo_HttpSettings.Size(m)
}
func (m *HttpSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings proto.InternalMessageInfo

func (m *HttpSettings) GetStickySession() *HttpSettings_StickySession {
	if m != nil {
		return m.StickySession
	}
	return nil
}

func (m *HttpSettings) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *HttpSettings) GetRouteRules() []*HttpRule {
	if m != nil {
		return m.RouteRules
	}
	return nil
}

// Describes a HTTP cookie that will be used for sticky sessions. If
// the cookie is not present, it will be generated.
type HttpSettings_HTTPCookie struct {
	// REQUIRED. Name of the cookie.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Path to set for the cookie.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// REQUIRED. Lifetime of the cookie.
	Ttl                  *duration.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HttpSettings_HTTPCookie) Reset()         { *m = HttpSettings_HTTPCookie{} }
func (m *HttpSettings_HTTPCookie) String() string { return proto.CompactTextString(m) }
func (*HttpSettings_HTTPCookie) ProtoMessage()    {}
func (*HttpSettings_HTTPCookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{9, 0}
}
func (m *HttpSettings_HTTPCookie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Unmarshal(m, b)
}
func (m *HttpSettings_HTTPCookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Marshal(b, m, deterministic)
}
func (dst *HttpSettings_HTTPCookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings_HTTPCookie.Merge(dst, src)
}
func (m *HttpSettings_HTTPCookie) XXX_Size() int {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Size(m)
}
func (m *HttpSettings_HTTPCookie) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings_HTTPCookie.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings_HTTPCookie proto.InternalMessageInfo

func (m *HttpSettings_HTTPCookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HttpSettings_HTTPCookie) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HttpSettings_HTTPCookie) GetTtl() *duration.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

// If set, the load balancer will route all requests from a
// particular client to the same backend of the service.
// TODO (@lizan): this is incomplete in envoy. It still uses ketama hash
// which changes the mapping when more endpoints are added to LB pool
type HttpSettings_StickySession struct {
	// REQUIRED: The hash key to use.
	//
	// Types that are valid to be assigned to HashKey:
	//	*HttpSettings_StickySession_Header
	//	*HttpSettings_StickySession_Cookie
	//	*HttpSettings_StickySession_UseSourceIp
	HashKey              isHttpSettings_StickySession_HashKey `protobuf_oneof:"hash_key"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *HttpSettings_StickySession) Reset()         { *m = HttpSettings_StickySession{} }
func (m *HttpSettings_StickySession) String() string { return proto.CompactTextString(m) }
func (*HttpSettings_StickySession) ProtoMessage()    {}
func (*HttpSettings_StickySession) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{9, 1}
}
func (m *HttpSettings_StickySession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings_StickySession.Unmarshal(m, b)
}
func (m *HttpSettings_StickySession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings_StickySession.Marshal(b, m, deterministic)
}
func (dst *HttpSettings_StickySession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings_StickySession.Merge(dst, src)
}
func (m *HttpSettings_StickySession) XXX_Size() int {
	return xxx_messageInfo_HttpSettings_StickySession.Size(m)
}
func (m *HttpSettings_StickySession) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings_StickySession.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings_StickySession proto.InternalMessageInfo

type isHttpSettings_StickySession_HashKey interface {
	isHttpSettings_StickySession_HashKey()
}

type HttpSettings_StickySession_Header struct {
	Header string `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type HttpSettings_StickySession_Cookie struct {
	Cookie *HttpSettings_HTTPCookie `protobuf:"bytes,2,opt,name=cookie,proto3,oneof"`
}

type HttpSettings_StickySession_UseSourceIp struct {
	UseSourceIp bool `protobuf:"varint,3,opt,name=use_source_ip,json=useSourceIp,proto3,oneof"`
}

func (*HttpSettings_StickySession_Header) isHttpSettings_StickySession_HashKey() {}

func (*HttpSettings_StickySession_Cookie) isHttpSettings_StickySession_HashKey() {}

func (*HttpSettings_StickySession_UseSourceIp) isHttpSettings_StickySession_HashKey() {}

func (m *HttpSettings_StickySession) GetHashKey() isHttpSettings_StickySession_HashKey {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *HttpSettings_StickySession) GetHeader() string {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_Header); ok {
		return x.Header
	}
	return ""
}

func (m *HttpSettings_StickySession) GetCookie() *HttpSettings_HTTPCookie {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_Cookie); ok {
		return x.Cookie
	}
	return nil
}

func (m *HttpSettings_StickySession) GetUseSourceIp() bool {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_UseSourceIp); ok {
		return x.UseSourceIp
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpSettings_StickySession) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpSettings_StickySession_OneofMarshaler, _HttpSettings_StickySession_OneofUnmarshaler, _HttpSettings_StickySession_OneofSizer, []interface{}{
		(*HttpSettings_StickySession_Header)(nil),
		(*HttpSettings_StickySession_Cookie)(nil),
		(*HttpSettings_StickySession_UseSourceIp)(nil),
	}
}

func _HttpSettings_StickySession_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpSettings_StickySession)
	// hash_key
	switch x := m.HashKey.(type) {
	case *HttpSettings_StickySession_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Header)
	case *HttpSettings_StickySession_Cookie:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cookie); err != nil {
			return err
		}
	case *HttpSettings_StickySession_UseSourceIp:
		t := uint64(0)
		if x.UseSourceIp {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("HttpSettings_StickySession.HashKey has unexpected type %T", x)
	}
	return nil
}

func _HttpSettings_StickySession_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpSettings_StickySession)
	switch tag {
	case 1: // hash_key.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HashKey = &HttpSettings_StickySession_Header{x}
		return true, err
	case 2: // hash_key.cookie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpSettings_HTTPCookie)
		err := b.DecodeMessage(msg)
		m.HashKey = &HttpSettings_StickySession_Cookie{msg}
		return true, err
	case 3: // hash_key.use_source_ip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HashKey = &HttpSettings_StickySession_UseSourceIp{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _HttpSettings_StickySession_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpSettings_StickySession)
	// hash_key
	switch x := m.HashKey.(type) {
	case *HttpSettings_StickySession_Header:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Header)))
		n += len(x.Header)
	case *HttpSettings_StickySession_Cookie:
		s := proto.Size(x.Cookie)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpSettings_StickySession_UseSourceIp:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TCP settings for a service. Applicable to ports receiving non-HTTP traffic.
type TcpSettings struct {
	// The destination to which the connection should be forwarded to.
	Route                *Route   `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpSettings) Reset()         { *m = TcpSettings{} }
func (m *TcpSettings) String() string { return proto.CompactTextString(m) }
func (*TcpSettings) ProtoMessage()    {}
func (*TcpSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{10}
}
func (m *TcpSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpSettings.Unmarshal(m, b)
}
func (m *TcpSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpSettings.Marshal(b, m, deterministic)
}
func (dst *TcpSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpSettings.Merge(dst, src)
}
func (m *TcpSettings) XXX_Size() int {
	return xxx_messageInfo_TcpSettings.Size(m)
}
func (m *TcpSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TcpSettings proto.InternalMessageInfo

func (m *TcpSettings) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

// A single HTTP rule
type HttpRule struct {
	// one or more match conditions (OR-ed)
	MatchConditions []*HttpMatchCondition `protobuf:"bytes,1,rep,name=match_conditions,json=matchConditions,proto3" json:"match_conditions,omitempty"`
	// one or more mutations to be performed before forwarding.
	// Includes typical modifications to be done on a single request
	// like URL rewrite, host rewrite, headers to add/remove/append
	ModifyActions []*HttpModifyAction `protobuf:"bytes,2,rep,name=modify_actions,json=modifyActions,proto3" json:"modify_actions,omitempty"`
	// Types that are valid to be assigned to RouteOrRedirect:
	//	*HttpRule_Route
	//	*HttpRule_Redirect
	RouteOrRedirect      isHttpRule_RouteOrRedirect `protobuf_oneof:"route_or_redirect"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *HttpRule) Reset()         { *m = HttpRule{} }
func (m *HttpRule) String() string { return proto.CompactTextString(m) }
func (*HttpRule) ProtoMessage()    {}
func (*HttpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{11}
}
func (m *HttpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpRule.Unmarshal(m, b)
}
func (m *HttpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpRule.Marshal(b, m, deterministic)
}
func (dst *HttpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRule.Merge(dst, src)
}
func (m *HttpRule) XXX_Size() int {
	return xxx_messageInfo_HttpRule.Size(m)
}
func (m *HttpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRule.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRule proto.InternalMessageInfo

func (m *HttpRule) GetMatchConditions() []*HttpMatchCondition {
	if m != nil {
		return m.MatchConditions
	}
	return nil
}

func (m *HttpRule) GetModifyActions() []*HttpModifyAction {
	if m != nil {
		return m.ModifyActions
	}
	return nil
}

type isHttpRule_RouteOrRedirect interface {
	isHttpRule_RouteOrRedirect()
}

type HttpRule_Route struct {
	Route *Route `protobuf:"bytes,4,opt,name=route,proto3,oneof"`
}

type HttpRule_Redirect struct {
	Redirect *Redirect `protobuf:"bytes,5,opt,name=redirect,proto3,oneof"`
}

func (*HttpRule_Route) isHttpRule_RouteOrRedirect() {}

func (*HttpRule_Redirect) isHttpRule_RouteOrRedirect() {}

func (m *HttpRule) GetRouteOrRedirect() isHttpRule_RouteOrRedirect {
	if m != nil {
		return m.RouteOrRedirect
	}
	return nil
}

func (m *HttpRule) GetRoute() *Route {
	if x, ok := m.GetRouteOrRedirect().(*HttpRule_Route); ok {
		return x.Route
	}
	return nil
}

func (m *HttpRule) GetRedirect() *Redirect {
	if x, ok := m.GetRouteOrRedirect().(*HttpRule_Redirect); ok {
		return x.Redirect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpRule_OneofMarshaler, _HttpRule_OneofUnmarshaler, _HttpRule_OneofSizer, []interface{}{
		(*HttpRule_Route)(nil),
		(*HttpRule_Redirect)(nil),
	}
}

func _HttpRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpRule)
	// route_or_redirect
	switch x := m.RouteOrRedirect.(type) {
	case *HttpRule_Route:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Route); err != nil {
			return err
		}
	case *HttpRule_Redirect:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redirect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpRule.RouteOrRedirect has unexpected type %T", x)
	}
	return nil
}

func _HttpRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpRule)
	switch tag {
	case 4: // route_or_redirect.route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Route)
		err := b.DecodeMessage(msg)
		m.RouteOrRedirect = &HttpRule_Route{msg}
		return true, err
	case 5: // route_or_redirect.redirect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Redirect)
		err := b.DecodeMessage(msg)
		m.RouteOrRedirect = &HttpRule_Redirect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpRule)
	// route_or_redirect
	switch x := m.RouteOrRedirect.(type) {
	case *HttpRule_Route:
		s := proto.Size(x.Route)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpRule_Redirect:
		s := proto.Size(x.Redirect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A single match clause to match all aspects of a request
type HttpMatchCondition struct {
	// URI to match
	Uri *StringMatch `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// URI Scheme
	Scheme *StringMatch `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// HTTP Method
	Method *StringMatch `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// HTTP Authority
	Authority *StringMatch `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The header keys must be lowercase and use hyphen as the separator,
	// e.g. _x-request-id_.
	Headers              map[string]*StringMatch `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HttpMatchCondition) Reset()         { *m = HttpMatchCondition{} }
func (m *HttpMatchCondition) String() string { return proto.CompactTextString(m) }
func (*HttpMatchCondition) ProtoMessage()    {}
func (*HttpMatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{12}
}
func (m *HttpMatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpMatchCondition.Unmarshal(m, b)
}
func (m *HttpMatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpMatchCondition.Marshal(b, m, deterministic)
}
func (dst *HttpMatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMatchCondition.Merge(dst, src)
}
func (m *HttpMatchCondition) XXX_Size() int {
	return xxx_messageInfo_HttpMatchCondition.Size(m)
}
func (m *HttpMatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMatchCondition proto.InternalMessageInfo

func (m *HttpMatchCondition) GetUri() *StringMatch {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *HttpMatchCondition) GetScheme() *StringMatch {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *HttpMatchCondition) GetMethod() *StringMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *HttpMatchCondition) GetAuthority() *StringMatch {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *HttpMatchCondition) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Describes how to match a given string in HTTP headers. Match is
// case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType            isStringMatch_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StringMatch) Reset()         { *m = StringMatch{} }
func (m *StringMatch) String() string { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()    {}
func (*StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{13}
}
func (m *StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatch.Unmarshal(m, b)
}
func (m *StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatch.Marshal(b, m, deterministic)
}
func (dst *StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatch.Merge(dst, src)
}
func (m *StringMatch) XXX_Size() int {
	return xxx_messageInfo_StringMatch.Size(m)
}
func (m *StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatch proto.InternalMessageInfo

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType() {}

func (*StringMatch_Prefix) isStringMatch_MatchType() {}

func (*StringMatch_Regex) isStringMatch_MatchType() {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A single modification for a part of a request
type HttpModifyAction struct {
	What HttpModifyAction_What `protobuf:"varint,1,opt,name=what,proto3,enum=tetrate.api.tcc.v1.HttpModifyAction_What" json:"what,omitempty"`
	How  HttpModifyAction_How  `protobuf:"varint,2,opt,name=how,proto3,enum=tetrate.api.tcc.v1.HttpModifyAction_How" json:"how,omitempty"`
	// used only if what is a Header
	HeaderName string `protobuf:"bytes,3,opt,name=header_name,json=headerName,proto3" json:"header_name,omitempty"`
	// string to use as replacement for url rewrite/host rewrite or setting headers
	// no value is necessary when deleting the header
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpModifyAction) Reset()         { *m = HttpModifyAction{} }
func (m *HttpModifyAction) String() string { return proto.CompactTextString(m) }
func (*HttpModifyAction) ProtoMessage()    {}
func (*HttpModifyAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{14}
}
func (m *HttpModifyAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpModifyAction.Unmarshal(m, b)
}
func (m *HttpModifyAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpModifyAction.Marshal(b, m, deterministic)
}
func (dst *HttpModifyAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpModifyAction.Merge(dst, src)
}
func (m *HttpModifyAction) XXX_Size() int {
	return xxx_messageInfo_HttpModifyAction.Size(m)
}
func (m *HttpModifyAction) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpModifyAction.DiscardUnknown(m)
}

var xxx_messageInfo_HttpModifyAction proto.InternalMessageInfo

func (m *HttpModifyAction) GetWhat() HttpModifyAction_What {
	if m != nil {
		return m.What
	}
	return HttpModifyAction_URI
}

func (m *HttpModifyAction) GetHow() HttpModifyAction_How {
	if m != nil {
		return m.How
	}
	return HttpModifyAction_SET
}

func (m *HttpModifyAction) GetHeaderName() string {
	if m != nil {
		return m.HeaderName
	}
	return ""
}

func (m *HttpModifyAction) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// One or more destinations for the given request
type Route struct {
	Destinations         []*Route_Destination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{15}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetDestinations() []*Route_Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type Route_Destination struct {
	Subset string `protobuf:"bytes,1,opt,name=subset,proto3" json:"subset,omitempty"`
	// 100 if omitted. sum of all weights should add up to 100
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Optional:
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Must be of form tenant/123/workspace/456/service/blah.com. If specified, incoming traffic
	// for the service will be forwarded to the service
	// specified. Typically used on ingress gateways on kubernetes
	// clusters.
	Svc                  string   `protobuf:"bytes,4,opt,name=svc,proto3" json:"svc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_Destination) Reset()         { *m = Route_Destination{} }
func (m *Route_Destination) String() string { return proto.CompactTextString(m) }
func (*Route_Destination) ProtoMessage()    {}
func (*Route_Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{15, 0}
}
func (m *Route_Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_Destination.Unmarshal(m, b)
}
func (m *Route_Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_Destination.Marshal(b, m, deterministic)
}
func (dst *Route_Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_Destination.Merge(dst, src)
}
func (m *Route_Destination) XXX_Size() int {
	return xxx_messageInfo_Route_Destination.Size(m)
}
func (m *Route_Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Route_Destination proto.InternalMessageInfo

func (m *Route_Destination) GetSubset() string {
	if m != nil {
		return m.Subset
	}
	return ""
}

func (m *Route_Destination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Route_Destination) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Route_Destination) GetSvc() string {
	if m != nil {
		return m.Svc
	}
	return ""
}

type Redirect struct {
	// On a redirect, overwrite the Path portion of the URL with this
	// value.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// On a redirect, overwrite the Authority/Host portion of the URL with
	// this value.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Redirect) Reset()         { *m = Redirect{} }
func (m *Redirect) String() string { return proto.CompactTextString(m) }
func (*Redirect) ProtoMessage()    {}
func (*Redirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{16}
}
func (m *Redirect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Redirect.Unmarshal(m, b)
}
func (m *Redirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Redirect.Marshal(b, m, deterministic)
}
func (dst *Redirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redirect.Merge(dst, src)
}
func (m *Redirect) XXX_Size() int {
	return xxx_messageInfo_Redirect.Size(m)
}
func (m *Redirect) XXX_DiscardUnknown() {
	xxx_messageInfo_Redirect.DiscardUnknown(m)
}

var xxx_messageInfo_Redirect proto.InternalMessageInfo

func (m *Redirect) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Redirect) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The
	// content will be serialized into the Access-Control-Allow-Origin
	// header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin,proto3" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will
	// be serialized into the Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the
	// resource. Serialized to Access-Control-Allow-Headers header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to
	// access. Serialized into Access-Control-Expose-Headers header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies how long the results of a preflight request can be
	// cached. Translates to the `Access-Control-Max-Age` header.
	MaxAge *duration.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request
	// (not the preflight) using credentials. Translates to
	// `Access-Control-Allow-Credentials` header.
	AllowCredentials     *wrappers.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_83cd33e4013d2b82, []int{17}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (dst *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(dst, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *duration.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *wrappers.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateServiceRequest)(nil), "tetrate.api.tcc.v1.CreateServiceRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.v1.CreateServiceRequest.LabelsEntry")
	proto.RegisterType((*GetServiceRequest)(nil), "tetrate.api.tcc.v1.GetServiceRequest")
	proto.RegisterType((*ListServiceRequest)(nil), "tetrate.api.tcc.v1.ListServiceRequest")
	proto.RegisterType((*ListServiceResponse)(nil), "tetrate.api.tcc.v1.ListServiceResponse")
	proto.RegisterType((*UpdateServiceRequest)(nil), "tetrate.api.tcc.v1.UpdateServiceRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.v1.UpdateServiceRequest.LabelsEntry")
	proto.RegisterType((*DeleteServiceRequest)(nil), "tetrate.api.tcc.v1.DeleteServiceRequest")
	proto.RegisterType((*Service)(nil), "tetrate.api.tcc.v1.Service")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.v1.Service.LabelsEntry")
	proto.RegisterType((*Port)(nil), "tetrate.api.tcc.v1.Port")
	proto.RegisterType((*Subset)(nil), "tetrate.api.tcc.v1.Subset")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.v1.Subset.LabelsEntry")
	proto.RegisterType((*HttpSettings)(nil), "tetrate.api.tcc.v1.HttpSettings")
	proto.RegisterType((*HttpSettings_HTTPCookie)(nil), "tetrate.api.tcc.v1.HttpSettings.HTTPCookie")
	proto.RegisterType((*HttpSettings_StickySession)(nil), "tetrate.api.tcc.v1.HttpSettings.StickySession")
	proto.RegisterType((*TcpSettings)(nil), "tetrate.api.tcc.v1.TcpSettings")
	proto.RegisterType((*HttpRule)(nil), "tetrate.api.tcc.v1.HttpRule")
	proto.RegisterType((*HttpMatchCondition)(nil), "tetrate.api.tcc.v1.HttpMatchCondition")
	proto.RegisterMapType((map[string]*StringMatch)(nil), "tetrate.api.tcc.v1.HttpMatchCondition.HeadersEntry")
	proto.RegisterType((*StringMatch)(nil), "tetrate.api.tcc.v1.StringMatch")
	proto.RegisterType((*HttpModifyAction)(nil), "tetrate.api.tcc.v1.HttpModifyAction")
	proto.RegisterType((*Route)(nil), "tetrate.api.tcc.v1.Route")
	proto.RegisterType((*Route_Destination)(nil), "tetrate.api.tcc.v1.Route.Destination")
	proto.RegisterType((*Redirect)(nil), "tetrate.api.tcc.v1.Redirect")
	proto.RegisterType((*CorsPolicy)(nil), "tetrate.api.tcc.v1.CorsPolicy")
	proto.RegisterEnum("tetrate.api.tcc.v1.HttpModifyAction_What", HttpModifyAction_What_name, HttpModifyAction_What_value)
	proto.RegisterEnum("tetrate.api.tcc.v1.HttpModifyAction_How", HttpModifyAction_How_name, HttpModifyAction_How_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServicesClient interface {
	// namespace members & admins: Typically, create service fails if the
	// service already exists in a service registry import from systems
	// like kubernetes or consul.  Such services cannot be
	// created/deleted. Only updates can be made.
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Service, error)
	// Get properties of a service. If host name is not provided,
	// lists properties of all services in the given namespace. If
	// namespace name is omitted, lists all services in the system.
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	// Get properties of a service. If host name is not provided,
	// lists properties of all services in the given namespace. If
	// namespace name is omitted, lists all services in the system.
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	// namespace members & admins: Update an existing service with
	// information like subsets, TLS settings, http route rules,
	// dependencies, etc. Updates to certain properties of a service
	// such as VIP address, ports, etc. will fail if the service was
	// imported from a service registry
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error)
	// namespace members & admins: Typically, delete service fails if the
	// service exists in a service registry import from systems like
	// kubernetes or consul.  Such services cannot be
	// created/deleted. Only updates can be made.
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type servicesClient struct {
	cc *grpc.ClientConn
}

func NewServicesClient(cc *grpc.ClientConn) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Services/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Services/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Services/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Services/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.v1.Services/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
type ServicesServer interface {
	// namespace members & admins: Typically, create service fails if the
	// service already exists in a service registry import from systems
	// like kubernetes or consul.  Such services cannot be
	// created/deleted. Only updates can be made.
	CreateService(context.Context, *CreateServiceRequest) (*Service, error)
	// Get properties of a service. If host name is not provided,
	// lists properties of all services in the given namespace. If
	// namespace name is omitted, lists all services in the system.
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	// Get properties of a service. If host name is not provided,
	// lists properties of all services in the given namespace. If
	// namespace name is omitted, lists all services in the system.
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	// namespace members & admins: Update an existing service with
	// information like subsets, TLS settings, http route rules,
	// dependencies, etc. Updates to certain properties of a service
	// such as VIP address, ports, etc. will fail if the service was
	// imported from a service registry
	UpdateService(context.Context, *UpdateServiceRequest) (*Service, error)
	// namespace members & admins: Typically, delete service fails if the
	// service exists in a service registry import from systems like
	// kubernetes or consul.  Such services cannot be
	// created/deleted. Only updates can be made.
	DeleteService(context.Context, *DeleteServiceRequest) (*empty.Empty, error)
}

func RegisterServicesServer(s *grpc.Server, srv ServicesServer) {
	s.RegisterService(&_Services_serviceDesc, srv)
}

func _Services_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Services/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Services/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Services/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Services/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.v1.Services/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Services_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.v1.Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Services_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Services_GetService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _Services_ListService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Services_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Services_DeleteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_83cd33e4013d2b82) }

var fileDescriptor_service_83cd33e4013d2b82 = []byte{
	// 1577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0x4b, 0x6f, 0xdb, 0xc6,
	0x16, 0x36, 0x45, 0x59, 0x96, 0x0e, 0x25, 0x5f, 0x65, 0x12, 0x04, 0x8a, 0x62, 0x24, 0xbe, 0xbc,
	0x79, 0x38, 0x09, 0x40, 0xc1, 0x4a, 0x2e, 0x72, 0xe3, 0x8b, 0x24, 0xf0, 0x43, 0x88, 0x7c, 0xaf,
	0x93, 0xb8, 0x94, 0xdd, 0xa2, 0x2d, 0x0a, 0x95, 0xa6, 0x26, 0x12, 0x61, 0x89, 0xc3, 0x72, 0x46,
	0x96, 0x85, 0x20, 0x9b, 0xfe, 0x84, 0xa6, 0x40, 0x8b, 0xa2, 0xdd, 0x14, 0x5d, 0x77, 0xdb, 0x6d,
	0xff, 0x43, 0x77, 0x5d, 0x77, 0xdb, 0xff, 0x50, 0xcc, 0x83, 0x12, 0x65, 0xd3, 0x8f, 0xc6, 0x0d,
	0xba, 0xc9, 0x4a, 0x73, 0x66, 0xbe, 0xef, 0xf0, 0xcc, 0x79, 0xcc, 0x99, 0x11, 0x14, 0x28, 0x0e,
	0xf7, 0x3c, 0x17, 0x5b, 0x41, 0x48, 0x18, 0x41, 0x88, 0x61, 0x16, 0x3a, 0x0c, 0x5b, 0x4e, 0xe0,
	0x59, 0xcc, 0x75, 0xad, 0xbd, 0xc5, 0xf2, 0x5c, 0x9b, 0x90, 0x76, 0x17, 0x57, 0x9c, 0xc0, 0xab,
	0x38, 0xbe, 0x4f, 0x98, 0xc3, 0x3c, 0xe2, 0x53, 0xc9, 0x28, 0x5f, 0x56, 0xab, 0x42, 0xda, 0xe9,
	0xbf, 0xa8, 0xe0, 0x5e, 0xc0, 0x86, 0x6a, 0xf1, 0xca, 0xc1, 0xc5, 0x41, 0xe8, 0x04, 0x01, 0x0e,
	0xe9, 0x51, 0xeb, 0xad, 0x7e, 0x28, 0xb4, 0xcb, 0x75, 0xf3, 0x57, 0x1d, 0x2e, 0xac, 0x86, 0xd8,
	0x61, 0xb8, 0x21, 0xcd, 0xb4, 0xf1, 0x67, 0x7d, 0x4c, 0x19, 0x42, 0x90, 0xf6, 0x9d, 0x1e, 0x2e,
	0x69, 0xf3, 0xda, 0x42, 0xce, 0x16, 0x63, 0x34, 0x07, 0xb9, 0x01, 0x09, 0x77, 0x69, 0xe0, 0xb8,
	0xb8, 0x94, 0x12, 0x0b, 0xe3, 0x09, 0x74, 0x11, 0x32, 0x0c, 0xfb, 0x8e, 0xcf, 0x4a, 0xba, 0x58,
	0x52, 0x12, 0xda, 0x80, 0x4c, 0xd7, 0xd9, 0xc1, 0x5d, 0x5a, 0x4a, 0xcf, 0xeb, 0x0b, 0x46, 0xf5,
	0x9e, 0x75, 0xd8, 0x05, 0x56, 0x92, 0x0d, 0xd6, 0x86, 0xa0, 0xd5, 0x7c, 0x16, 0x0e, 0x6d, 0xa5,
	0x03, 0x59, 0x30, 0x1d, 0x90, 0x90, 0xd1, 0xd2, 0xb4, 0x50, 0x56, 0x4a, 0x52, 0xb6, 0x49, 0x42,
	0x66, 0x4b, 0x18, 0xba, 0x07, 0x33, 0xb4, 0xbf, 0x43, 0x31, 0xa3, 0xa5, 0x8c, 0x60, 0x94, 0x93,
	0x18, 0x0d, 0x01, 0xb1, 0x23, 0x28, 0xaa, 0x41, 0xa1, 0xc3, 0x58, 0xd0, 0xa4, 0x98, 0x31, 0xcf,
	0x6f, 0xd3, 0xd2, 0xcc, 0xbc, 0xb6, 0x60, 0x54, 0xe7, 0x93, 0xb8, 0x75, 0xc6, 0x82, 0x86, 0xc2,
	0xd9, 0xf9, 0x4e, 0x4c, 0x42, 0x2b, 0x90, 0x67, 0x6e, 0x4c, 0x4b, 0x56, 0x68, 0xb9, 0x9a, 0xa4,
	0x65, 0xcb, 0x1d, 0x2b, 0x31, 0xd8, 0x58, 0x28, 0x3f, 0x00, 0x23, 0xe6, 0x07, 0x54, 0x04, 0x7d,
	0x17, 0x0f, 0x55, 0x58, 0xf8, 0x10, 0x5d, 0x80, 0xe9, 0x3d, 0xa7, 0xdb, 0x8f, 0x22, 0x22, 0x85,
	0xa5, 0xd4, 0x7f, 0x34, 0xf3, 0x13, 0x38, 0xf7, 0x04, 0xb3, 0xb7, 0x15, 0x58, 0xf3, 0x7f, 0x80,
	0x36, 0x3c, 0x7a, 0x50, 0xff, 0x18, 0xad, 0x4d, 0xa4, 0xc1, 0xb1, 0xdf, 0x30, 0x9f, 0xc1, 0xf9,
	0x09, 0x5d, 0x34, 0x20, 0x3e, 0xc5, 0xe8, 0x3e, 0x64, 0x55, 0xf9, 0xd0, 0x92, 0x26, 0xc2, 0x77,
	0x39, 0x31, 0x7c, 0x8a, 0x36, 0x02, 0x8b, 0xbc, 0xde, 0x0e, 0x5a, 0x7f, 0x7b, 0x5e, 0x27, 0xd9,
	0xf0, 0x2e, 0xaf, 0xcf, 0x98, 0xd7, 0x9f, 0xc2, 0x85, 0x35, 0xdc, 0xc5, 0x6f, 0x2f, 0xb6, 0xe6,
	0xcf, 0x3a, 0xcc, 0x28, 0xe5, 0x7f, 0x61, 0xc6, 0x3c, 0x3e, 0x90, 0x31, 0x37, 0x8f, 0xc9, 0xe5,
	0x77, 0x49, 0x72, 0xc6, 0x24, 0xa1, 0x90, 0xe6, 0xae, 0xe0, 0xc1, 0xf0, 0xfb, 0xbd, 0x1d, 0x1c,
	0x0a, 0x5a, 0xc1, 0x56, 0x12, 0x2a, 0x43, 0x56, 0xb4, 0x40, 0x97, 0x74, 0x15, 0x79, 0x24, 0x8f,
	0x42, 0xae, 0xc7, 0x42, 0xfe, 0x2f, 0x28, 0x60, 0xbf, 0x15, 0x10, 0xcf, 0x67, 0x4d, 0xee, 0xdd,
	0x52, 0x5a, 0xa8, 0xcb, 0x47, 0x93, 0xfc, 0x63, 0xe6, 0x57, 0x1a, 0x64, 0xa4, 0x3b, 0x13, 0xd3,
	0xe6, 0xd1, 0x28, 0x01, 0x52, 0x22, 0x1c, 0x37, 0x8e, 0x0e, 0x47, 0x52, 0xfc, 0xcf, 0xe2, 0x8e,
	0xdf, 0x75, 0xc8, 0xc7, 0x83, 0x85, 0xb6, 0x61, 0x96, 0x32, 0xcf, 0xdd, 0x1d, 0x36, 0x29, 0xa6,
	0xd4, 0x23, 0xbe, 0xd0, 0x63, 0x54, 0xad, 0x93, 0xc2, 0x6c, 0x35, 0x04, 0xad, 0x21, 0x59, 0x76,
	0x81, 0xc6, 0x45, 0xf4, 0x18, 0x0c, 0x97, 0x84, 0xb4, 0x19, 0x90, 0xae, 0xe7, 0x0e, 0x85, 0x1d,
	0x46, 0xf5, 0x4a, 0x62, 0xcb, 0x27, 0x21, 0xdd, 0x14, 0x28, 0x1b, 0xdc, 0xd1, 0x18, 0x3d, 0x04,
	0x23, 0x24, 0x7d, 0x86, 0x9b, 0x61, 0xbf, 0x8b, 0x69, 0x49, 0x17, 0x8e, 0x9a, 0x3b, 0xca, 0x28,
	0xbb, 0xdf, 0xc5, 0x36, 0x08, 0x02, 0x1f, 0xd2, 0xb2, 0x03, 0x50, 0xdf, 0xda, 0xda, 0x5c, 0x25,
	0x64, 0xd7, 0x4b, 0xae, 0x5d, 0x04, 0xe9, 0xc0, 0x61, 0x1d, 0xe5, 0x22, 0x31, 0x46, 0x77, 0x40,
	0x67, 0xac, 0x2b, 0xe2, 0x6d, 0x54, 0x2f, 0x59, 0xf2, 0xd2, 0x64, 0x45, 0x97, 0x26, 0x6b, 0x4d,
	0x5d, 0x9a, 0x6c, 0x8e, 0x2a, 0x7f, 0xaf, 0x41, 0x61, 0xc2, 0x07, 0xa8, 0x04, 0x99, 0x0e, 0x76,
	0x5a, 0x2a, 0xc7, 0x72, 0xf5, 0x29, 0x5b, 0xc9, 0xa8, 0x06, 0x19, 0x57, 0x98, 0xa2, 0x3c, 0x71,
	0xe7, 0x44, 0xef, 0x8e, 0xad, 0xe7, 0x6a, 0x24, 0x19, 0x5d, 0x83, 0x42, 0x9f, 0xe2, 0x26, 0x25,
	0xfd, 0xd0, 0xc5, 0x4d, 0x2f, 0x10, 0x96, 0x66, 0xeb, 0x53, 0xb6, 0xd1, 0xa7, 0xb8, 0x21, 0x66,
	0xd7, 0x83, 0x15, 0x80, 0x6c, 0xc7, 0xa1, 0x9d, 0xe6, 0x2e, 0x1e, 0x9a, 0x8f, 0xc0, 0x88, 0x55,
	0x15, 0xaa, 0xc0, 0xb4, 0x70, 0x92, 0x0a, 0xf2, 0xa5, 0x24, 0x33, 0x6c, 0xe1, 0x45, 0x89, 0x33,
	0x7f, 0x4c, 0x41, 0x36, 0x72, 0x30, 0x7a, 0x0f, 0x8a, 0x3d, 0x87, 0xb9, 0x9d, 0xa6, 0x4b, 0xfc,
	0x96, 0x27, 0x2e, 0xa7, 0xaa, 0x1d, 0xdf, 0x38, 0x6a, 0x3f, 0x4f, 0x39, 0x7e, 0x35, 0x82, 0xdb,
	0xff, 0xe8, 0x4d, 0xc8, 0x14, 0xfd, 0x1f, 0x66, 0x7b, 0xa4, 0xe5, 0xbd, 0x18, 0x36, 0x1d, 0x57,
	0x2a, 0x94, 0x25, 0x71, 0xed, 0x48, 0x85, 0x02, 0xbd, 0x2c, 0xc0, 0x76, 0xa1, 0x17, 0x93, 0x28,
	0x5a, 0x8c, 0x76, 0x97, 0x3e, 0x61, 0x77, 0xf5, 0x29, 0xb5, 0x3f, 0xb4, 0x04, 0xd9, 0x10, 0xb7,
	0xbc, 0x10, 0xbb, 0xac, 0x34, 0x2d, 0x58, 0x89, 0x39, 0x66, 0x2b, 0x4c, 0x7d, 0xca, 0x1e, 0xe1,
	0x57, 0xce, 0xc3, 0x39, 0x99, 0xa2, 0x24, 0x6c, 0x46, 0x93, 0xe6, 0x0f, 0x3a, 0xa0, 0xc3, 0x1b,
	0x47, 0x8b, 0xa0, 0xf7, 0x43, 0x4f, 0xb9, 0x3d, 0xf1, 0xf0, 0x6b, 0xb0, 0xd0, 0xf3, 0xdb, 0x82,
	0x66, 0x73, 0x2c, 0xba, 0x0f, 0x19, 0xea, 0x76, 0x70, 0x2f, 0xca, 0x99, 0x13, 0x59, 0x0a, 0xce,
	0x89, 0x3d, 0xcc, 0x3a, 0xa4, 0xa5, 0x12, 0xf9, 0x64, 0xa2, 0x84, 0xa3, 0x87, 0x90, 0x73, 0xfa,
	0xac, 0x43, 0x42, 0x8f, 0x0d, 0x95, 0x0f, 0x4f, 0xe4, 0x8e, 0x19, 0xe8, 0x29, 0xcc, 0xc8, 0x74,
	0x8f, 0x1a, 0xd3, 0xdd, 0xd3, 0x65, 0x85, 0x55, 0x97, 0x2c, 0x79, 0xc8, 0x45, 0x3a, 0xca, 0x1f,
	0x43, 0x3e, 0xbe, 0x90, 0x70, 0xcc, 0xfd, 0x3b, 0x7e, 0xcc, 0x9d, 0xc2, 0xd6, 0xd8, 0x39, 0x88,
	0xc1, 0x88, 0xad, 0xa0, 0x8b, 0x30, 0x8d, 0xf7, 0x1d, 0x97, 0x8d, 0x0a, 0x57, 0x8a, 0xbc, 0xa2,
	0x83, 0x10, 0xbf, 0xf0, 0xf6, 0xe5, 0x31, 0xc1, 0x4b, 0x51, 0xca, 0x9c, 0x11, 0xe2, 0x36, 0xde,
	0x97, 0xcd, 0x41, 0x24, 0x14, 0x17, 0x57, 0xf2, 0x00, 0xb2, 0x46, 0xd8, 0x30, 0xc0, 0xe6, 0xd7,
	0x29, 0x28, 0x1e, 0xcc, 0x5a, 0xf4, 0x10, 0xd2, 0x83, 0x8e, 0x23, 0xbf, 0x35, 0x5b, 0xbd, 0x75,
	0x9a, 0x4c, 0xb7, 0x3e, 0xe8, 0x38, 0xcc, 0x16, 0x34, 0xb4, 0x04, 0x7a, 0x87, 0x0c, 0x84, 0x41,
	0xb3, 0xd5, 0x85, 0x53, 0xb1, 0xeb, 0x64, 0x60, 0x73, 0x12, 0xba, 0x0a, 0x86, 0x74, 0x6f, 0x33,
	0xd6, 0xd8, 0x40, 0x4e, 0x3d, 0xe3, 0xa7, 0xe2, 0xa8, 0x73, 0xa4, 0x63, 0x9d, 0xc3, 0xbc, 0x0d,
	0x69, 0x6e, 0x00, 0x9a, 0x01, 0x7d, 0xdb, 0x5e, 0x2f, 0x4e, 0xa1, 0x02, 0xe4, 0x96, 0xb7, 0xb7,
	0xea, 0xcf, 0xed, 0xf5, 0xad, 0x0f, 0x8b, 0x1a, 0x02, 0xc8, 0xd4, 0x6b, 0xcb, 0x6b, 0x35, 0xbb,
	0x98, 0x32, 0x6f, 0x80, 0x5e, 0x27, 0x03, 0x0e, 0x6d, 0xd4, 0xb6, 0x8a, 0x53, 0x7c, 0x6d, 0x79,
	0x73, 0xb3, 0xf6, 0x6c, 0x4d, 0xe2, 0xd6, 0x6a, 0x1b, 0xb5, 0xad, 0x5a, 0x31, 0x65, 0xfe, 0xa4,
	0xc1, 0xb4, 0x28, 0x46, 0xb4, 0x0e, 0xf9, 0x16, 0xa6, 0xcc, 0xf3, 0x9d, 0xf8, 0x91, 0x72, 0xfd,
	0xc8, 0xea, 0xb5, 0xd6, 0xc6, 0x68, 0x7b, 0x82, 0x5a, 0x76, 0xc1, 0x88, 0x2d, 0xf2, 0xa6, 0x2f,
	0x6f, 0x33, 0xd1, 0x23, 0x44, 0x4a, 0x7c, 0x7e, 0x80, 0xbd, 0x76, 0x87, 0x09, 0x2f, 0x16, 0x6c,
	0x25, 0x89, 0x9e, 0xc0, 0x7b, 0xba, 0x2e, 0x66, 0xc5, 0x98, 0xa7, 0x1d, 0xdd, 0x73, 0x95, 0x3f,
	0xf8, 0xd0, 0x5c, 0x82, 0x6c, 0x74, 0x1e, 0xf0, 0xd5, 0xa8, 0xae, 0x73, 0xb2, 0x6c, 0xe7, 0xe2,
	0x45, 0xa4, 0xee, 0x84, 0xa3, 0x09, 0xf3, 0xbb, 0x14, 0xc0, 0xb8, 0xe3, 0xa1, 0x7f, 0x42, 0xde,
	0xe9, 0x76, 0xc9, 0xa0, 0x49, 0x42, 0xaf, 0xed, 0xf9, 0x62, 0xeb, 0x39, 0xdb, 0x10, 0x73, 0xcf,
	0xc5, 0x14, 0xbf, 0x70, 0x48, 0x88, 0x2c, 0x52, 0x79, 0x40, 0xe6, 0x6c, 0xc9, 0x7b, 0x2a, 0xe7,
	0xc6, 0xa0, 0xa8, 0x00, 0xf5, 0x18, 0x48, 0x55, 0x11, 0xba, 0x0e, 0xb3, 0x78, 0x3f, 0x20, 0x14,
	0x8f, 0x50, 0x69, 0x81, 0x2a, 0xc8, 0xd9, 0x08, 0x56, 0x85, 0x99, 0x9e, 0xb3, 0xdf, 0x74, 0xda,
	0x58, 0x9d, 0x88, 0xc7, 0x34, 0xc2, 0x4c, 0xcf, 0xd9, 0x5f, 0x6e, 0x63, 0xf4, 0x04, 0xce, 0xc9,
	0xef, 0xbb, 0x21, 0x6e, 0x61, 0x9f, 0x79, 0x4e, 0x97, 0xdf, 0x35, 0x35, 0x71, 0xd7, 0x3c, 0xc8,
	0x5e, 0x21, 0xa4, 0xfb, 0x3e, 0xcf, 0x2b, 0xbb, 0x28, 0x48, 0xab, 0x63, 0x4e, 0xf5, 0x8b, 0x0c,
	0x64, 0xd5, 0xd5, 0x97, 0xa2, 0x6f, 0x35, 0x28, 0x4c, 0xfc, 0x23, 0x80, 0x16, 0x4e, 0xfb, 0xa7,
	0x41, 0xf9, 0xb8, 0x07, 0xa2, 0xb9, 0xf6, 0xf9, 0x2f, 0xbf, 0xbd, 0x4e, 0x3d, 0x32, 0x1f, 0x54,
	0xf6, 0x16, 0x2b, 0xd1, 0x63, 0xb1, 0x22, 0xaf, 0xe7, 0x95, 0x97, 0xf2, 0xf7, 0x55, 0x65, 0x74,
	0x93, 0xaf, 0xbc, 0x1c, 0x0d, 0x5f, 0x55, 0x5e, 0xf2, 0xca, 0x79, 0xb5, 0xa4, 0xdd, 0x46, 0xaf,
	0x35, 0x80, 0xf1, 0xc3, 0x1a, 0x25, 0x26, 0xec, 0xa1, 0x87, 0xf7, 0xf1, 0x86, 0x2d, 0x0b, 0xc3,
	0xfe, 0x8b, 0xde, 0xdc, 0x30, 0xf4, 0x8d, 0x06, 0x46, 0xec, 0x0d, 0x8d, 0x12, 0x5b, 0xf3, 0xe1,
	0x07, 0x7b, 0xf9, 0xe6, 0x89, 0x38, 0xf9, 0x18, 0x37, 0x97, 0x84, 0x8d, 0xf7, 0x50, 0xf5, 0xcf,
	0xdb, 0x28, 0x22, 0x3a, 0xf1, 0x16, 0x4e, 0x8e, 0x68, 0xd2, 0x73, 0xf9, 0x54, 0x11, 0x2d, 0x9f,
	0x2d, 0xa2, 0x5f, 0x6a, 0x50, 0x98, 0x78, 0x52, 0x26, 0x9b, 0x97, 0xf4, 0xea, 0x2c, 0x5f, 0x3c,
	0x94, 0xe7, 0xb5, 0x5e, 0xc0, 0x86, 0x51, 0x48, 0x6f, 0xbf, 0xb9, 0x65, 0x2b, 0xb7, 0x3e, 0xba,
	0xd9, 0xf6, 0x58, 0xa7, 0xbf, 0x63, 0xb9, 0xa4, 0x57, 0x51, 0x06, 0x79, 0x24, 0x1a, 0x89, 0x3f,
	0x0c, 0x99, 0xeb, 0x56, 0xf6, 0x16, 0x77, 0x32, 0xe2, 0xeb, 0x77, 0xff, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x32, 0x3f, 0xbc, 0x0a, 0x6f, 0x14, 0x00, 0x00,
}
