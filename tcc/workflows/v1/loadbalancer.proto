syntax = "proto3";

package tetrate.api.tcc.workflows.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/workflows/v1";

import "google/api/annotations.proto";
import "tcc/core/v1/tlssettings.proto";

//    service owner   |  network admin
// -------------------|-----------------
// REQUESTED -> PENDING_APPROVAL -> APPROVED -> PUBLISHED
//     V                       | -> DENIED
//  REJECTED                   | -> CANCEL

// namespace members of the service being requested & admins.
// The API call must be made either by the admin or by owners of the
// namespaces whose services are being exposed. It is assumed that
// the load balancer has been created, deployed and imported into TCC
// through out of band mechanisms [for F5] or through service registry
// imports. The parameters should list the set of services that need
// to be exposed. Services will not be exposed until its approved by
// the namespace owner where the load balancer resides.
service LoadBalancerWorkflow {
  rpc Attach(LBTicketDetails) returns (LBTicketId) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/attach"
      body: "*"
    };
  };

  rpc Detach(LBTicketDetails) returns (LBTicketId) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/detach"
      body: "*"
    };
  };

  rpc GetTicketStatus(LBTicketId) returns (LBTicketStatus) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/request/{requestid}/status"
    };
  }

  rpc Cancel(LBTicketId) returns (LBTicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/request/{requestid}/cancel"
      body: "*"
    };
  };

  // LB owner calls this API with additional settings like TLS, to
  // finally expose the service on the load balancer or remove a detached service
  rpc Publish(LBPublishAction) returns (LBTicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/publish"
      body: "*"
    };
  };

  rpc ListPendingTickets(ListTicketsRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/pending"
    };
  };

  rpc Approve(LBTicketResolution) returns (LBTicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/request/{requestid}/approve"
      body: "*"
    };
  };

  rpc Deny(LBTicketResolution) returns (LBTicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workflows/workspaces/{workspace}/loadbalancer/request/{requestid}/deny"
      body: "*"
    };
  };

}

message LBTicketDetails {
  string tenant = 1;
  string workspace = 2;
  
  string loadbalancer_name = 3;

  // We need to allow both logical services as well as physical
  // deployments to be attached to a load balancer.  the physical
  // deployment piece is the essential backdoor to capture the common
  // use cases that a logical service does not address.

  oneof target {
    string service_name = 4;
    string deployment_name = 5;
  }
}

enum LBOperation {
  ATTACH = 0;
  DETACH = 1;
}

message LBTicketStatus {
  string tenant = 1;
  string workspace = 2;
  // e.g. attach-789
  string requestid = 3;
  LBOperation operation = 4;
  enum RequestState {
    PENDING = 0;
    APPROVED = 1;
    DENIED = 2;
    PUBLISHED = 3;
    CANCELED = 4;
  }
  RequestState state = 5;
  string note = 6;
}

message ListTicketsRequest {
  string tenant = 1;
  string workspace = 2;
}

message ListTicketsResponse {
  message PendingTickets {
    string requestid = 1;
    string loadbalancer_name = 2;
    oneof target {
      string service_name = 3;
      string deployment_name = 4;
    }
    LBOperation operation = 5;
  }

  string tenant = 1;
  string workspace = 2;
  repeated PendingTickets pending_tickets = 3;
}

message LBTicketId {
  string tenant = 1;
  string workspace = 2;
  string requestid = 3;
}

message LBTicketResolution {
  string tenant = 1;
  string workspace = 2;
  string requestid = 3;
  // optional description (e.g. to be recorded in audit logs)
  string note = 4;
}

message LBPublishAction {
  string tenant = 1;
  string workspace = 2;
  string requestid = 3;
  tetrate.api.tcc.core.v1.TLSSettings tls = 4;
}
