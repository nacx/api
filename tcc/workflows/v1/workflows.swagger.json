{
  "swagger": "2.0",
  "info": {
    "title": "loadbalancer.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/attach": {
      "post": {
        "summary": "namespace members of the service being requested \u0026 admins.\nThe API call must be made either by the admin or by owners of the\nnamespaces whose services are being exposed. It is assumed that\nthe load balancer has been created, deployed and imported into TCC\nthrough out of band mechanisms [for F5] or through service registry\nimports. The parameters should list the set of services that need\nto be exposed. Services will not be exposed until its approved by\nthe namespace owner where the load balancer resides.",
        "operationId": "Attach",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowUserRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/detach": {
      "post": {
        "operationId": "Detach",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowUserRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/pending": {
      "get": {
        "operationId": "ListPendingRequests",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.ListPendingResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/publish": {
      "post": {
        "summary": "LB owner calls this API with additional settings like TLS, to\nfinally expose the service on the load balancer",
        "operationId": "Publish",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowOwnerRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/request/{requestid}/approve": {
      "post": {
        "operationId": "Approve",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.ApproveResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.ApproveRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/request/{requestid}/cancel": {
      "post": {
        "operationId": "Cancel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.CancelResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.CancelRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/request/{requestid}/deny": {
      "post": {
        "operationId": "Deny",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.DenyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestid",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.DenyRequest"
            }
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    },
    "/v1/tenants/{tenant}/workflows/clusters/{cluster}/loadbalancer/request/{requestid}/status": {
      "get": {
        "operationId": "GetRequestStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.Status"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestid",
            "description": "e.g. attach-789",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "LoadBalancerWorkflow"
        ]
      }
    }
  },
  "definitions": {
    "tetrate.api.tcc.workflows.v1.ApproveRequest": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.ApproveResponse": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "note": {
          "type": "string",
          "title": "optional description of the approval (e.g. to be recorded in audit logs)"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.CancelRequest": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.CancelResponse": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "note": {
          "type": "string",
          "title": "optional description of the cancelation (e.g. to be recorded in audit logs)"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.DenyRequest": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.DenyResponse": {
      "type": "object",
      "properties": {
        "requestid": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "note": {
          "type": "string",
          "title": "optional description of the denial (e.g. to be recorded in audit logs)"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.ListPendingResponse": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "pendingRequests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.ListPendingResponse.PendingRequest"
          }
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.ListPendingResponse.PendingRequest": {
      "type": "object",
      "properties": {
        "loadbalancerName": {
          "type": "string"
        },
        "loadbalancerNamespace": {
          "type": "string"
        },
        "serviceHostname": {
          "type": "string"
        },
        "serviceNamespace": {
          "type": "string"
        },
        "operation": {
          "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.ListPendingResponse.PendingRequest.OP"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.ListPendingResponse.PendingRequest.OP": {
      "type": "string",
      "enum": [
        "ATTACH",
        "DETACH"
      ],
      "default": "ATTACH"
    },
    "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowOwnerRequest": {
      "type": "object",
      "properties": {
        "loadbalancerName": {
          "type": "string"
        },
        "loadbalancerNamespace": {
          "type": "string"
        },
        "serviceName": {
          "type": "string"
        },
        "serviceNamespace": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/tetrate.api.tcc.workflows.v1.TLSSettings"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowUserRequest": {
      "type": "object",
      "properties": {
        "loadbalancerName": {
          "type": "string"
        },
        "loadbalancerNamespace": {
          "type": "string"
        },
        "serviceHostname": {
          "type": "string"
        },
        "serviceNamespace": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.Status": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": "string"
        },
        "requestid": {
          "type": "string",
          "title": "e.g. attach-789"
        },
        "approved": {
          "type": "boolean",
          "format": "boolean"
        },
        "published": {
          "type": "boolean",
          "format": "boolean"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.workflows.v1.TLSSettings": {
      "type": "object",
      "properties": {
        "sni": {
          "type": "string",
          "description": "If specified, only allow requests that match the SNI value."
        },
        "serverCertificate": {
          "type": "string",
          "description": "For proxies running on VMs, the path to the file holding the\nserver-side TLS certificate to use."
        },
        "privateKey": {
          "type": "string",
          "description": "For proxies running on VMs, the path to the file holding the\nserver's private key."
        },
        "caCertificates": {
          "type": "string",
          "description": "For proxies running on VMs, the path to a file containing\ncertificate authority certificates to use in verifying a\npresented client side certificate for mutual TLS connections."
        },
        "secretName": {
          "type": "string",
          "description": "For proxies running on Kubernetes, the name of the secret that\nholds the TLS certs. Currently applicable only on Kubernetes.\nThe secret should contain the server certificate and the private\nkey. If mutual TLS is being used, an additional secret with name\nsecretName-cacert should be created with the CaCertificates that\nthe server will use to verify client side certificates. If the\nservice is exposed via a load balancer, the secret must be\naccessible to it."
        }
      }
    }
  }
}
