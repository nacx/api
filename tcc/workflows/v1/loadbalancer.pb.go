// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loadbalancer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/workflows/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LBTicketStatus_RequestState int32

const (
	LBTicketStatus_PENDING   LBTicketStatus_RequestState = 0
	LBTicketStatus_APPROVED  LBTicketStatus_RequestState = 1
	LBTicketStatus_DENIED    LBTicketStatus_RequestState = 2
	LBTicketStatus_PUBLISHED LBTicketStatus_RequestState = 3
	LBTicketStatus_CANCELED  LBTicketStatus_RequestState = 4
)

var LBTicketStatus_RequestState_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "PUBLISHED",
	4: "CANCELED",
}
var LBTicketStatus_RequestState_value = map[string]int32{
	"PENDING":   0,
	"APPROVED":  1,
	"DENIED":    2,
	"PUBLISHED": 3,
	"CANCELED":  4,
}

func (x LBTicketStatus_RequestState) String() string {
	return proto.EnumName(LBTicketStatus_RequestState_name, int32(x))
}
func (LBTicketStatus_RequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{1, 0}
}

type ListTicketsResponse_PendingTickets_OP int32

const (
	ListTicketsResponse_PendingTickets_ATTACH ListTicketsResponse_PendingTickets_OP = 0
	ListTicketsResponse_PendingTickets_DETACH ListTicketsResponse_PendingTickets_OP = 1
)

var ListTicketsResponse_PendingTickets_OP_name = map[int32]string{
	0: "ATTACH",
	1: "DETACH",
}
var ListTicketsResponse_PendingTickets_OP_value = map[string]int32{
	"ATTACH": 0,
	"DETACH": 1,
}

func (x ListTicketsResponse_PendingTickets_OP) String() string {
	return proto.EnumName(ListTicketsResponse_PendingTickets_OP_name, int32(x))
}
func (ListTicketsResponse_PendingTickets_OP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{3, 0, 0}
}

type LBTicketDetails struct {
	LoadbalancerName      string   `protobuf:"bytes,1,opt,name=loadbalancer_name,json=loadbalancerName,proto3" json:"loadbalancer_name,omitempty"`
	LoadbalancerNamespace string   `protobuf:"bytes,2,opt,name=loadbalancer_namespace,json=loadbalancerNamespace,proto3" json:"loadbalancer_namespace,omitempty"`
	ServiceHostname       string   `protobuf:"bytes,3,opt,name=service_hostname,json=serviceHostname,proto3" json:"service_hostname,omitempty"`
	ServiceNamespace      string   `protobuf:"bytes,4,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	Cluster               string   `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant                string   `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *LBTicketDetails) Reset()         { *m = LBTicketDetails{} }
func (m *LBTicketDetails) String() string { return proto.CompactTextString(m) }
func (*LBTicketDetails) ProtoMessage()    {}
func (*LBTicketDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{0}
}
func (m *LBTicketDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketDetails.Unmarshal(m, b)
}
func (m *LBTicketDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketDetails.Marshal(b, m, deterministic)
}
func (dst *LBTicketDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketDetails.Merge(dst, src)
}
func (m *LBTicketDetails) XXX_Size() int {
	return xxx_messageInfo_LBTicketDetails.Size(m)
}
func (m *LBTicketDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketDetails.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketDetails proto.InternalMessageInfo

func (m *LBTicketDetails) GetLoadbalancerName() string {
	if m != nil {
		return m.LoadbalancerName
	}
	return ""
}

func (m *LBTicketDetails) GetLoadbalancerNamespace() string {
	if m != nil {
		return m.LoadbalancerNamespace
	}
	return ""
}

func (m *LBTicketDetails) GetServiceHostname() string {
	if m != nil {
		return m.ServiceHostname
	}
	return ""
}

func (m *LBTicketDetails) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *LBTicketDetails) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketDetails) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type LBTicketStatus struct {
	Tenant  string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// e.g. attach-789
	Requestid            string   `protobuf:"bytes,3,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Note                 string   `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LBTicketStatus) Reset()         { *m = LBTicketStatus{} }
func (m *LBTicketStatus) String() string { return proto.CompactTextString(m) }
func (*LBTicketStatus) ProtoMessage()    {}
func (*LBTicketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{1}
}
func (m *LBTicketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketStatus.Unmarshal(m, b)
}
func (m *LBTicketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketStatus.Marshal(b, m, deterministic)
}
func (dst *LBTicketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketStatus.Merge(dst, src)
}
func (m *LBTicketStatus) XXX_Size() int {
	return xxx_messageInfo_LBTicketStatus.Size(m)
}
func (m *LBTicketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketStatus proto.InternalMessageInfo

func (m *LBTicketStatus) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBTicketStatus) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketStatus) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketStatus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ListTicketsRequest struct {
	Cluster              string   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTicketsRequest) Reset()         { *m = ListTicketsRequest{} }
func (m *ListTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTicketsRequest) ProtoMessage()    {}
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{2}
}
func (m *ListTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsRequest.Unmarshal(m, b)
}
func (m *ListTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsRequest.Marshal(b, m, deterministic)
}
func (dst *ListTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsRequest.Merge(dst, src)
}
func (m *ListTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTicketsRequest.Size(m)
}
func (m *ListTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsRequest proto.InternalMessageInfo

func (m *ListTicketsRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListTicketsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListTicketsResponse struct {
	Cluster              string                                `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	PendingTickets       []*ListTicketsResponse_PendingTickets `protobuf:"bytes,2,rep,name=pending_tickets,json=pendingTickets,proto3" json:"pending_tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListTicketsResponse) Reset()         { *m = ListTicketsResponse{} }
func (m *ListTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse) ProtoMessage()    {}
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{3}
}
func (m *ListTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse.Unmarshal(m, b)
}
func (m *ListTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse.Marshal(b, m, deterministic)
}
func (dst *ListTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse.Merge(dst, src)
}
func (m *ListTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse.Size(m)
}
func (m *ListTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse proto.InternalMessageInfo

func (m *ListTicketsResponse) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListTicketsResponse) GetPendingTickets() []*ListTicketsResponse_PendingTickets {
	if m != nil {
		return m.PendingTickets
	}
	return nil
}

type ListTicketsResponse_PendingTickets struct {
	LoadbalancerName      string                                `protobuf:"bytes,1,opt,name=loadbalancer_name,json=loadbalancerName,proto3" json:"loadbalancer_name,omitempty"`
	LoadbalancerNamespace string                                `protobuf:"bytes,2,opt,name=loadbalancer_namespace,json=loadbalancerNamespace,proto3" json:"loadbalancer_namespace,omitempty"`
	ServiceHostname       string                                `protobuf:"bytes,3,opt,name=service_hostname,json=serviceHostname,proto3" json:"service_hostname,omitempty"`
	ServiceNamespace      string                                `protobuf:"bytes,4,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	Operation             ListTicketsResponse_PendingTickets_OP `protobuf:"varint,5,opt,name=operation,proto3,enum=tetrate.api.tcc.workflows.v1.ListTicketsResponse_PendingTickets_OP" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                              `json:"-"`
	XXX_unrecognized      []byte                                `json:"-"`
	XXX_sizecache         int32                                 `json:"-"`
}

func (m *ListTicketsResponse_PendingTickets) Reset()         { *m = ListTicketsResponse_PendingTickets{} }
func (m *ListTicketsResponse_PendingTickets) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse_PendingTickets) ProtoMessage()    {}
func (*ListTicketsResponse_PendingTickets) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{3, 0}
}
func (m *ListTicketsResponse_PendingTickets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Unmarshal(m, b)
}
func (m *ListTicketsResponse_PendingTickets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Marshal(b, m, deterministic)
}
func (dst *ListTicketsResponse_PendingTickets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse_PendingTickets.Merge(dst, src)
}
func (m *ListTicketsResponse_PendingTickets) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Size(m)
}
func (m *ListTicketsResponse_PendingTickets) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse_PendingTickets.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse_PendingTickets proto.InternalMessageInfo

func (m *ListTicketsResponse_PendingTickets) GetLoadbalancerName() string {
	if m != nil {
		return m.LoadbalancerName
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetLoadbalancerNamespace() string {
	if m != nil {
		return m.LoadbalancerNamespace
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetServiceHostname() string {
	if m != nil {
		return m.ServiceHostname
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetOperation() ListTicketsResponse_PendingTickets_OP {
	if m != nil {
		return m.Operation
	}
	return ListTicketsResponse_PendingTickets_ATTACH
}

type LBTicketId struct {
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LBTicketId) Reset()         { *m = LBTicketId{} }
func (m *LBTicketId) String() string { return proto.CompactTextString(m) }
func (*LBTicketId) ProtoMessage()    {}
func (*LBTicketId) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{4}
}
func (m *LBTicketId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketId.Unmarshal(m, b)
}
func (m *LBTicketId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketId.Marshal(b, m, deterministic)
}
func (dst *LBTicketId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketId.Merge(dst, src)
}
func (m *LBTicketId) XXX_Size() int {
	return xxx_messageInfo_LBTicketId.Size(m)
}
func (m *LBTicketId) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketId.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketId proto.InternalMessageInfo

func (m *LBTicketId) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketId) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketId) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type LBTicketResolution struct {
	Tenant    string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Cluster   string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Requestid string `protobuf:"bytes,3,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// optional description (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LBTicketResolution) Reset()         { *m = LBTicketResolution{} }
func (m *LBTicketResolution) String() string { return proto.CompactTextString(m) }
func (*LBTicketResolution) ProtoMessage()    {}
func (*LBTicketResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{5}
}
func (m *LBTicketResolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketResolution.Unmarshal(m, b)
}
func (m *LBTicketResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketResolution.Marshal(b, m, deterministic)
}
func (dst *LBTicketResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketResolution.Merge(dst, src)
}
func (m *LBTicketResolution) XXX_Size() int {
	return xxx_messageInfo_LBTicketResolution.Size(m)
}
func (m *LBTicketResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketResolution.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketResolution proto.InternalMessageInfo

func (m *LBTicketResolution) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBTicketResolution) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketResolution) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketResolution) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type LBPublishAction struct {
	LoadbalancerName      string       `protobuf:"bytes,1,opt,name=loadbalancer_name,json=loadbalancerName,proto3" json:"loadbalancer_name,omitempty"`
	LoadbalancerNamespace string       `protobuf:"bytes,2,opt,name=loadbalancer_namespace,json=loadbalancerNamespace,proto3" json:"loadbalancer_namespace,omitempty"`
	ServiceName           string       `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceNamespace      string       `protobuf:"bytes,4,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	Cluster               string       `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant                string       `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Tls                   *TLSSettings `protobuf:"bytes,7,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *LBPublishAction) Reset()         { *m = LBPublishAction{} }
func (m *LBPublishAction) String() string { return proto.CompactTextString(m) }
func (*LBPublishAction) ProtoMessage()    {}
func (*LBPublishAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{6}
}
func (m *LBPublishAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBPublishAction.Unmarshal(m, b)
}
func (m *LBPublishAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBPublishAction.Marshal(b, m, deterministic)
}
func (dst *LBPublishAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBPublishAction.Merge(dst, src)
}
func (m *LBPublishAction) XXX_Size() int {
	return xxx_messageInfo_LBPublishAction.Size(m)
}
func (m *LBPublishAction) XXX_DiscardUnknown() {
	xxx_messageInfo_LBPublishAction.DiscardUnknown(m)
}

var xxx_messageInfo_LBPublishAction proto.InternalMessageInfo

func (m *LBPublishAction) GetLoadbalancerName() string {
	if m != nil {
		return m.LoadbalancerName
	}
	return ""
}

func (m *LBPublishAction) GetLoadbalancerNamespace() string {
	if m != nil {
		return m.LoadbalancerNamespace
	}
	return ""
}

func (m *LBPublishAction) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *LBPublishAction) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *LBPublishAction) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBPublishAction) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBPublishAction) GetTls() *TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

type TLSSettings struct {
	// If specified, only allow requests that match the SNI value.
	Sni string `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,2,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server's private key.
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// For proxies running on VMs, the path to a file containing
	// certificate authority certificates to use in verifying a
	// presented client side certificate for mutual TLS connections.
	CaCertificates string `protobuf:"bytes,4,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// For proxies running on Kubernetes, the name of the secret that
	// holds the TLS certs. Currently applicable only on Kubernetes.
	// The secret should contain the server certificate and the private
	// key. If mutual TLS is being used, an additional secret with name
	// secretName-cacert should be created with the CaCertificates that
	// the server will use to verify client side certificates. If the
	// service is exposed via a load balancer, the secret must be
	// accessible to it.
	SecretName           string   `protobuf:"bytes,5,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_171c3cd5eb633b08, []int{7}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSSettings.Unmarshal(m, b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
}
func (dst *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(dst, src)
}
func (m *TLSSettings) XXX_Size() int {
	return xxx_messageInfo_TLSSettings.Size(m)
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterType((*LBTicketDetails)(nil), "tetrate.api.tcc.workflows.v1.LBTicketDetails")
	proto.RegisterType((*LBTicketStatus)(nil), "tetrate.api.tcc.workflows.v1.LBTicketStatus")
	proto.RegisterType((*ListTicketsRequest)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsRequest")
	proto.RegisterType((*ListTicketsResponse)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsResponse")
	proto.RegisterType((*ListTicketsResponse_PendingTickets)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsResponse.PendingTickets")
	proto.RegisterType((*LBTicketId)(nil), "tetrate.api.tcc.workflows.v1.LBTicketId")
	proto.RegisterType((*LBTicketResolution)(nil), "tetrate.api.tcc.workflows.v1.LBTicketResolution")
	proto.RegisterType((*LBPublishAction)(nil), "tetrate.api.tcc.workflows.v1.LBPublishAction")
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.workflows.v1.TLSSettings")
	proto.RegisterEnum("tetrate.api.tcc.workflows.v1.LBTicketStatus_RequestState", LBTicketStatus_RequestState_name, LBTicketStatus_RequestState_value)
	proto.RegisterEnum("tetrate.api.tcc.workflows.v1.ListTicketsResponse_PendingTickets_OP", ListTicketsResponse_PendingTickets_OP_name, ListTicketsResponse_PendingTickets_OP_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerWorkflowClient is the client API for LoadBalancerWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerWorkflowClient interface {
	Attach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error)
	Detach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error)
	GetTicketStatus(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error)
	Cancel(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer
	Publish(ctx context.Context, in *LBPublishAction, opts ...grpc.CallOption) (*LBTicketStatus, error)
	ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	Approve(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error)
	Deny(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error)
}

type loadBalancerWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerWorkflowClient(cc *grpc.ClientConn) LoadBalancerWorkflowClient {
	return &loadBalancerWorkflowClient{cc}
}

func (c *loadBalancerWorkflowClient) Attach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error) {
	out := new(LBTicketId)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Detach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error) {
	out := new(LBTicketId)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) GetTicketStatus(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetTicketStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Cancel(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Publish(ctx context.Context, in *LBPublishAction, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Approve(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Deny(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerWorkflowServer is the server API for LoadBalancerWorkflow service.
type LoadBalancerWorkflowServer interface {
	Attach(context.Context, *LBTicketDetails) (*LBTicketId, error)
	Detach(context.Context, *LBTicketDetails) (*LBTicketId, error)
	GetTicketStatus(context.Context, *LBTicketId) (*LBTicketStatus, error)
	Cancel(context.Context, *LBTicketId) (*LBTicketStatus, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer
	Publish(context.Context, *LBPublishAction) (*LBTicketStatus, error)
	ListPendingTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	Approve(context.Context, *LBTicketResolution) (*LBTicketStatus, error)
	Deny(context.Context, *LBTicketResolution) (*LBTicketStatus, error)
}

func RegisterLoadBalancerWorkflowServer(s *grpc.Server, srv LoadBalancerWorkflowServer) {
	s.RegisterService(&_LoadBalancerWorkflow_serviceDesc, srv)
}

func _LoadBalancerWorkflow_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, req.(*LBTicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, req.(*LBTicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_GetTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetTicketStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, req.(*LBTicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, req.(*LBTicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBPublishAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, req.(*LBPublishAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_ListPendingTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketResolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, req.(*LBTicketResolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketResolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, req.(*LBTicketResolution))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancerWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow",
	HandlerType: (*LoadBalancerWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _LoadBalancerWorkflow_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _LoadBalancerWorkflow_Detach_Handler,
		},
		{
			MethodName: "GetTicketStatus",
			Handler:    _LoadBalancerWorkflow_GetTicketStatus_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _LoadBalancerWorkflow_Cancel_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _LoadBalancerWorkflow_Publish_Handler,
		},
		{
			MethodName: "ListPendingTickets",
			Handler:    _LoadBalancerWorkflow_ListPendingTickets_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _LoadBalancerWorkflow_Approve_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _LoadBalancerWorkflow_Deny_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadbalancer.proto",
}

func init() { proto.RegisterFile("loadbalancer.proto", fileDescriptor_loadbalancer_171c3cd5eb633b08) }

var fileDescriptor_loadbalancer_171c3cd5eb633b08 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xee, 0xd8, 0xfe, 0xd9, 0xbf, 0xbc, 0x0e, 0xb6, 0x3b, 0x40, 0x65, 0x59, 0x91, 0x08, 0x7b,
	0x21, 0x2d, 0x74, 0x17, 0xa7, 0xe2, 0x52, 0x2e, 0x38, 0xb6, 0xdb, 0x98, 0x5a, 0x8e, 0x71, 0x02,
	0x15, 0xa5, 0xc2, 0x1a, 0x8f, 0xa7, 0xce, 0x28, 0x9b, 0x9d, 0x65, 0x67, 0xec, 0x12, 0x45, 0xb9,
	0xf0, 0x15, 0xf8, 0x28, 0x70, 0xe9, 0x95, 0x03, 0x02, 0x04, 0x12, 0x12, 0x5f, 0x81, 0x13, 0x5f,
	0x02, 0xb4, 0x33, 0xe3, 0x7a, 0x37, 0xa5, 0xf9, 0xa3, 0xc8, 0x48, 0xbd, 0xcd, 0xce, 0xbc, 0xf3,
	0xbc, 0xcf, 0xf3, 0xbe, 0xcf, 0xcc, 0xd8, 0x80, 0x7d, 0x41, 0xc6, 0x23, 0xe2, 0x93, 0x80, 0xb2,
	0xc8, 0x0d, 0x23, 0xa1, 0x04, 0x5e, 0x53, 0x4c, 0x45, 0x44, 0x31, 0x97, 0x84, 0xdc, 0x55, 0x94,
	0xba, 0x4f, 0x45, 0x74, 0xf0, 0xc4, 0x17, 0x4f, 0xa5, 0x3b, 0xab, 0xd7, 0xd6, 0x26, 0x42, 0x4c,
	0x7c, 0xe6, 0x91, 0x90, 0x7b, 0x24, 0x08, 0x84, 0x22, 0x8a, 0x8b, 0x40, 0x9a, 0xbd, 0xce, 0xdf,
	0x08, 0xca, 0xdd, 0xad, 0x3d, 0x4e, 0x0f, 0x98, 0x6a, 0x31, 0x45, 0xb8, 0x2f, 0xf1, 0xbb, 0x70,
	0x3d, 0x99, 0x65, 0x18, 0x90, 0x43, 0x56, 0x45, 0xeb, 0x68, 0x63, 0x65, 0x50, 0x49, 0x2e, 0xf4,
	0xc8, 0x21, 0xc3, 0x1f, 0xc0, 0x8d, 0x17, 0x82, 0x65, 0x48, 0x28, 0xab, 0x66, 0xf4, 0x8e, 0x37,
	0x4f, 0xef, 0xd0, 0x8b, 0xf8, 0x26, 0x54, 0x24, 0x8b, 0x66, 0x9c, 0xb2, 0xe1, 0xbe, 0x90, 0x4a,
	0xa7, 0xc8, 0xea, 0x0d, 0x65, 0x3b, 0xbf, 0x6d, 0xa7, 0x63, 0x3a, 0xf3, 0xd0, 0x05, 0x78, 0xce,
	0xd0, 0xb1, 0x0b, 0x0b, 0xdc, 0x2a, 0x14, 0xa8, 0x3f, 0x95, 0x8a, 0x45, 0xd5, 0xff, 0xe9, 0x90,
	0xf9, 0x27, 0xbe, 0x01, 0x79, 0xc5, 0x02, 0x12, 0xa8, 0x6a, 0x5e, 0x2f, 0xd8, 0x2f, 0xe7, 0x27,
	0x04, 0xa5, 0x79, 0x05, 0x76, 0x15, 0x51, 0x53, 0x99, 0x08, 0x45, 0xc9, 0xd0, 0x24, 0x78, 0x26,
	0x0d, 0xbe, 0x06, 0x2b, 0x11, 0xfb, 0x6a, 0xca, 0xa4, 0xe2, 0x63, 0xab, 0x63, 0x31, 0x81, 0x31,
	0xe4, 0x02, 0xa1, 0x98, 0x4d, 0xac, 0xc7, 0xce, 0x00, 0x56, 0x07, 0x26, 0x20, 0x4e, 0xca, 0x70,
	0x11, 0x0a, 0xfd, 0x76, 0xaf, 0xd5, 0xe9, 0xdd, 0xaf, 0x5c, 0xc3, 0xab, 0xf0, 0xff, 0x46, 0xbf,
	0x3f, 0xd8, 0xf9, 0xac, 0xdd, 0xaa, 0x20, 0x0c, 0x90, 0x6f, 0xb5, 0x7b, 0x9d, 0x76, 0xab, 0x92,
	0xc1, 0xaf, 0xc1, 0x4a, 0xff, 0xd3, 0xad, 0x6e, 0x67, 0x77, 0xbb, 0xdd, 0xaa, 0x64, 0xe3, 0xc0,
	0x66, 0xa3, 0xd7, 0x6c, 0x77, 0xdb, 0xad, 0x4a, 0xce, 0xb9, 0x07, 0xb8, 0xcb, 0xa5, 0x32, 0x5a,
	0xa4, 0x85, 0x4f, 0xb2, 0x46, 0x2f, 0x2b, 0x49, 0x26, 0x55, 0x92, 0xbf, 0xb2, 0xf0, 0x7a, 0x0a,
	0x48, 0x86, 0x22, 0x90, 0xec, 0x0c, 0x24, 0x0e, 0xe5, 0x90, 0x05, 0x63, 0x1e, 0x4c, 0x86, 0xca,
	0x6c, 0xaa, 0x66, 0xd6, 0xb3, 0x1b, 0xc5, 0xcd, 0x8f, 0xdc, 0xb3, 0xcc, 0xe9, 0xfe, 0x4b, 0x16,
	0xb7, 0x6f, 0x80, 0xe6, 0xd3, 0xa5, 0x30, 0xf5, 0x5d, 0xfb, 0x2d, 0x03, 0xa5, 0x74, 0xc8, 0x2b,
	0x6d, 0x58, 0x02, 0x2b, 0x22, 0x64, 0x91, 0x3e, 0x94, 0xda, 0xb2, 0xa5, 0xcd, 0xe6, 0x55, 0x6b,
	0xe6, 0xee, 0xf4, 0x07, 0x0b, 0x54, 0x67, 0x0d, 0x32, 0x3b, 0xfd, 0xd8, 0x45, 0x8d, 0xbd, 0xbd,
	0x46, 0x73, 0xbb, 0x72, 0xcd, 0x38, 0x4a, 0x8f, 0x91, 0xf3, 0x18, 0x60, 0x6e, 0xff, 0xce, 0x38,
	0x6d, 0x64, 0x74, 0xda, 0xc8, 0x2f, 0x3f, 0x00, 0x0b, 0x2b, 0x65, 0x53, 0x56, 0xfa, 0x1a, 0xf0,
	0x1c, 0x7d, 0xc0, 0xa4, 0xf0, 0xa7, 0x31, 0xa3, 0xa5, 0x1d, 0xb0, 0x5c, 0xe2, 0x80, 0x7d, 0x9f,
	0x89, 0x6f, 0xb6, 0xfe, 0x74, 0xe4, 0x73, 0xb9, 0xdf, 0xa0, 0x3a, 0xef, 0x7f, 0x61, 0x94, 0xb7,
	0x61, 0x35, 0xd9, 0x7d, 0x4b, 0xb6, 0x98, 0x68, 0xfc, 0x92, 0x6f, 0x34, 0xfc, 0x21, 0x64, 0x95,
	0x2f, 0xab, 0x85, 0x75, 0xb4, 0x51, 0xdc, 0xbc, 0x79, 0xb6, 0x99, 0xf6, 0xba, 0xbb, 0xbb, 0x4c,
	0x29, 0x1e, 0x4c, 0xe4, 0x20, 0xde, 0xe5, 0x3c, 0x43, 0x50, 0x4c, 0x4c, 0xe2, 0x0a, 0x64, 0x65,
	0xc0, 0x6d, 0x91, 0xe2, 0x21, 0xbe, 0x0d, 0x38, 0x26, 0xc9, 0xa2, 0x21, 0x65, 0x91, 0xe2, 0x4f,
	0x38, 0x25, 0x6a, 0x5e, 0x93, 0xeb, 0x66, 0xa5, 0xb9, 0x58, 0xc0, 0x6f, 0x41, 0x31, 0x8c, 0xf8,
	0x8c, 0x28, 0x36, 0x3c, 0x60, 0x47, 0xb6, 0x1c, 0x60, 0xa7, 0x1e, 0xb0, 0x23, 0xfc, 0x0e, 0x94,
	0x29, 0x49, 0x62, 0x49, 0x5b, 0x8b, 0x12, 0x25, 0x09, 0x20, 0x19, 0x23, 0x49, 0x46, 0x23, 0xa6,
	0x4c, 0x61, 0x4d, 0x35, 0xc0, 0x4c, 0xc5, 0xf5, 0xda, 0xfc, 0x61, 0x15, 0xde, 0xe8, 0x0a, 0x32,
	0xde, 0xb2, 0x4d, 0x79, 0x68, 0x95, 0xe2, 0xef, 0x10, 0xe4, 0x1b, 0x4a, 0x11, 0xba, 0x8f, 0x6f,
	0x9f, 0x73, 0xb8, 0xd2, 0x6f, 0x61, 0x6d, 0xe3, 0x62, 0xe1, 0x9d, 0xb1, 0xd3, 0xff, 0xe6, 0x8f,
	0x3f, 0xbf, 0xcd, 0x7c, 0xec, 0xb4, 0xbd, 0x59, 0xdd, 0x33, 0x9d, 0x90, 0xde, 0xb1, 0x19, 0x9c,
	0x78, 0xcf, 0x77, 0x79, 0xb6, 0x7b, 0xd2, 0x3b, 0xb6, 0xa3, 0x13, 0x2f, 0x69, 0x24, 0x8f, 0x68,
	0x9e, 0x77, 0xd1, 0x2d, 0xcd, 0x3a, 0xe6, 0xf1, 0x2a, 0xb0, 0x1e, 0xb3, 0x39, 0xeb, 0x5f, 0x11,
	0x94, 0xef, 0x33, 0x95, 0x7a, 0x50, 0x2f, 0xcc, 0xa7, 0xf6, 0xde, 0xc5, 0x22, 0x0d, 0xae, 0x43,
	0x34, 0xfb, 0x2f, 0xf0, 0xe7, 0x57, 0x64, 0x6f, 0x6f, 0x12, 0xef, 0xf8, 0xf9, 0x95, 0x72, 0xe2,
	0x49, 0x43, 0xfd, 0x47, 0x04, 0xf9, 0x66, 0x1c, 0xe5, 0x2f, 0x4d, 0xc5, 0x58, 0xab, 0xf8, 0xd2,
	0x59, 0x86, 0x0a, 0xaa, 0xa9, 0xc7, 0x7d, 0x79, 0x86, 0xa0, 0x60, 0x6f, 0xc3, 0xf3, 0xed, 0x94,
	0xba, 0x36, 0x2f, 0x29, 0xe7, 0x13, 0x2d, 0xe7, 0x81, 0x73, 0xef, 0x8a, 0x72, 0x42, 0xc3, 0x21,
	0xe6, 0xfe, 0x33, 0x32, 0xbf, 0x6c, 0x4e, 0xbd, 0xfb, 0xef, 0x5f, 0xe2, 0xa1, 0xd4, 0x15, 0xa9,
	0xd5, 0x2f, 0xfd, 0xb4, 0x3a, 0x3d, 0x2d, 0x67, 0x1b, 0x5f, 0x59, 0x8e, 0xe1, 0x8e, 0x7f, 0x47,
	0x50, 0x68, 0x84, 0x61, 0x24, 0x66, 0xec, 0x5c, 0x01, 0x2f, 0xbc, 0x9c, 0x97, 0x6c, 0x05, 0xd3,
	0xdc, 0x87, 0xce, 0xa3, 0x25, 0x38, 0x8b, 0x18, 0x0d, 0x71, 0x7b, 0x7e, 0x41, 0x90, 0x6b, 0xb1,
	0xe0, 0x68, 0xe9, 0x7a, 0x46, 0x5a, 0xcf, 0x63, 0xe7, 0xe1, 0x12, 0xf4, 0x8c, 0x59, 0x70, 0x74,
	0x17, 0xdd, 0xda, 0xba, 0xf3, 0xa8, 0x3e, 0xe1, 0x6a, 0x7f, 0x3a, 0x72, 0xa9, 0x38, 0xf4, 0x2c,
	0x3b, 0x2e, 0xe6, 0x23, 0xfd, 0x3f, 0x4a, 0x51, 0x9a, 0xc8, 0x36, 0xab, 0x8f, 0xf2, 0xfa, 0xdf,
	0xd4, 0x9d, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xe8, 0x15, 0x8a, 0x9f, 0x0d, 0x00, 0x00,
}
