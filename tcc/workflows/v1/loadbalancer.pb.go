// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loadbalancer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/workflows/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListPendingResponse_PendingRequest_OP int32

const (
	ListPendingResponse_PendingRequest_ATTACH ListPendingResponse_PendingRequest_OP = 0
	ListPendingResponse_PendingRequest_DETACH ListPendingResponse_PendingRequest_OP = 1
)

var ListPendingResponse_PendingRequest_OP_name = map[int32]string{
	0: "ATTACH",
	1: "DETACH",
}
var ListPendingResponse_PendingRequest_OP_value = map[string]int32{
	"ATTACH": 0,
	"DETACH": 1,
}

func (x ListPendingResponse_PendingRequest_OP) String() string {
	return proto.EnumName(ListPendingResponse_PendingRequest_OP_name, int32(x))
}
func (ListPendingResponse_PendingRequest_OP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{4, 0, 0}
}

type LoadBalancerWorkflowUserRequest struct {
	// The load balancer where the service should be attached/detached from
	// of form tenant/123/workspace/345/loadbalancer/blah
	Loadbalancer string `protobuf:"bytes,1,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	// the name of the service to attach/detach; `tenant/123/workspace/456/service/foo.com`
	Service              string   `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadBalancerWorkflowUserRequest) Reset()         { *m = LoadBalancerWorkflowUserRequest{} }
func (m *LoadBalancerWorkflowUserRequest) String() string { return proto.CompactTextString(m) }
func (*LoadBalancerWorkflowUserRequest) ProtoMessage()    {}
func (*LoadBalancerWorkflowUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{0}
}
func (m *LoadBalancerWorkflowUserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalancerWorkflowUserRequest.Unmarshal(m, b)
}
func (m *LoadBalancerWorkflowUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalancerWorkflowUserRequest.Marshal(b, m, deterministic)
}
func (dst *LoadBalancerWorkflowUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancerWorkflowUserRequest.Merge(dst, src)
}
func (m *LoadBalancerWorkflowUserRequest) XXX_Size() int {
	return xxx_messageInfo_LoadBalancerWorkflowUserRequest.Size(m)
}
func (m *LoadBalancerWorkflowUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancerWorkflowUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancerWorkflowUserRequest proto.InternalMessageInfo

func (m *LoadBalancerWorkflowUserRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *LoadBalancerWorkflowUserRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type Status struct {
	// e.g. `attach-789`
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Approved             bool     `protobuf:"varint,2,opt,name=approved,proto3" json:"approved,omitempty"`
	Published            bool     `protobuf:"varint,3,opt,name=published,proto3" json:"published,omitempty"`
	Note                 string   `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{1}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *Status) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func (m *Status) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *Status) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type GetStatus struct {
	// e.g. `attach-789`
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatus) Reset()         { *m = GetStatus{} }
func (m *GetStatus) String() string { return proto.CompactTextString(m) }
func (*GetStatus) ProtoMessage()    {}
func (*GetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{2}
}
func (m *GetStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatus.Unmarshal(m, b)
}
func (m *GetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatus.Marshal(b, m, deterministic)
}
func (dst *GetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatus.Merge(dst, src)
}
func (m *GetStatus) XXX_Size() int {
	return xxx_messageInfo_GetStatus.Size(m)
}
func (m *GetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatus proto.InternalMessageInfo

func (m *GetStatus) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

type ListRequests struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRequests) Reset()         { *m = ListRequests{} }
func (m *ListRequests) String() string { return proto.CompactTextString(m) }
func (*ListRequests) ProtoMessage()    {}
func (*ListRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{3}
}
func (m *ListRequests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRequests.Unmarshal(m, b)
}
func (m *ListRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRequests.Marshal(b, m, deterministic)
}
func (dst *ListRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRequests.Merge(dst, src)
}
func (m *ListRequests) XXX_Size() int {
	return xxx_messageInfo_ListRequests.Size(m)
}
func (m *ListRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRequests.DiscardUnknown(m)
}

var xxx_messageInfo_ListRequests proto.InternalMessageInfo

type ListPendingResponse struct {
	PendingRequests      []*ListPendingResponse_PendingRequest `protobuf:"bytes,1,rep,name=pending_requests,json=pendingRequests,proto3" json:"pending_requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListPendingResponse) Reset()         { *m = ListPendingResponse{} }
func (m *ListPendingResponse) String() string { return proto.CompactTextString(m) }
func (*ListPendingResponse) ProtoMessage()    {}
func (*ListPendingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{4}
}
func (m *ListPendingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPendingResponse.Unmarshal(m, b)
}
func (m *ListPendingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPendingResponse.Marshal(b, m, deterministic)
}
func (dst *ListPendingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPendingResponse.Merge(dst, src)
}
func (m *ListPendingResponse) XXX_Size() int {
	return xxx_messageInfo_ListPendingResponse.Size(m)
}
func (m *ListPendingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPendingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPendingResponse proto.InternalMessageInfo

func (m *ListPendingResponse) GetPendingRequests() []*ListPendingResponse_PendingRequest {
	if m != nil {
		return m.PendingRequests
	}
	return nil
}

type ListPendingResponse_PendingRequest struct {
	Loadbalancer         string                                `protobuf:"bytes,1,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Service              string                                `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	Operation            ListPendingResponse_PendingRequest_OP `protobuf:"varint,3,opt,name=operation,proto3,enum=tetrate.api.tcc.workflows.v1.ListPendingResponse_PendingRequest_OP" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListPendingResponse_PendingRequest) Reset()         { *m = ListPendingResponse_PendingRequest{} }
func (m *ListPendingResponse_PendingRequest) String() string { return proto.CompactTextString(m) }
func (*ListPendingResponse_PendingRequest) ProtoMessage()    {}
func (*ListPendingResponse_PendingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{4, 0}
}
func (m *ListPendingResponse_PendingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPendingResponse_PendingRequest.Unmarshal(m, b)
}
func (m *ListPendingResponse_PendingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPendingResponse_PendingRequest.Marshal(b, m, deterministic)
}
func (dst *ListPendingResponse_PendingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPendingResponse_PendingRequest.Merge(dst, src)
}
func (m *ListPendingResponse_PendingRequest) XXX_Size() int {
	return xxx_messageInfo_ListPendingResponse_PendingRequest.Size(m)
}
func (m *ListPendingResponse_PendingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPendingResponse_PendingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPendingResponse_PendingRequest proto.InternalMessageInfo

func (m *ListPendingResponse_PendingRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *ListPendingResponse_PendingRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ListPendingResponse_PendingRequest) GetOperation() ListPendingResponse_PendingRequest_OP {
	if m != nil {
		return m.Operation
	}
	return ListPendingResponse_PendingRequest_ATTACH
}

type ApproveRequest struct {
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveRequest) Reset()         { *m = ApproveRequest{} }
func (m *ApproveRequest) String() string { return proto.CompactTextString(m) }
func (*ApproveRequest) ProtoMessage()    {}
func (*ApproveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{5}
}
func (m *ApproveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApproveRequest.Unmarshal(m, b)
}
func (m *ApproveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApproveRequest.Marshal(b, m, deterministic)
}
func (dst *ApproveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveRequest.Merge(dst, src)
}
func (m *ApproveRequest) XXX_Size() int {
	return xxx_messageInfo_ApproveRequest.Size(m)
}
func (m *ApproveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveRequest proto.InternalMessageInfo

func (m *ApproveRequest) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

type DenyRequest struct {
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenyRequest) Reset()         { *m = DenyRequest{} }
func (m *DenyRequest) String() string { return proto.CompactTextString(m) }
func (*DenyRequest) ProtoMessage()    {}
func (*DenyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{6}
}
func (m *DenyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DenyRequest.Unmarshal(m, b)
}
func (m *DenyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DenyRequest.Marshal(b, m, deterministic)
}
func (dst *DenyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyRequest.Merge(dst, src)
}
func (m *DenyRequest) XXX_Size() int {
	return xxx_messageInfo_DenyRequest.Size(m)
}
func (m *DenyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenyRequest proto.InternalMessageInfo

func (m *DenyRequest) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

type CancelRequest struct {
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelRequest) Reset()         { *m = CancelRequest{} }
func (m *CancelRequest) String() string { return proto.CompactTextString(m) }
func (*CancelRequest) ProtoMessage()    {}
func (*CancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{7}
}
func (m *CancelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelRequest.Unmarshal(m, b)
}
func (m *CancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelRequest.Marshal(b, m, deterministic)
}
func (dst *CancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelRequest.Merge(dst, src)
}
func (m *CancelRequest) XXX_Size() int {
	return xxx_messageInfo_CancelRequest.Size(m)
}
func (m *CancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelRequest proto.InternalMessageInfo

func (m *CancelRequest) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

type ApproveResponse struct {
	Requestid string `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// optional description of the approval (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApproveResponse) Reset()         { *m = ApproveResponse{} }
func (m *ApproveResponse) String() string { return proto.CompactTextString(m) }
func (*ApproveResponse) ProtoMessage()    {}
func (*ApproveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{8}
}
func (m *ApproveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApproveResponse.Unmarshal(m, b)
}
func (m *ApproveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApproveResponse.Marshal(b, m, deterministic)
}
func (dst *ApproveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApproveResponse.Merge(dst, src)
}
func (m *ApproveResponse) XXX_Size() int {
	return xxx_messageInfo_ApproveResponse.Size(m)
}
func (m *ApproveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ApproveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ApproveResponse proto.InternalMessageInfo

func (m *ApproveResponse) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *ApproveResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type DenyResponse struct {
	Requestid string `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// optional description of the denial (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DenyResponse) Reset()         { *m = DenyResponse{} }
func (m *DenyResponse) String() string { return proto.CompactTextString(m) }
func (*DenyResponse) ProtoMessage()    {}
func (*DenyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{9}
}
func (m *DenyResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DenyResponse.Unmarshal(m, b)
}
func (m *DenyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DenyResponse.Marshal(b, m, deterministic)
}
func (dst *DenyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenyResponse.Merge(dst, src)
}
func (m *DenyResponse) XXX_Size() int {
	return xxx_messageInfo_DenyResponse.Size(m)
}
func (m *DenyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenyResponse proto.InternalMessageInfo

func (m *DenyResponse) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *DenyResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type CancelResponse struct {
	Requestid string `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// optional description of the cancelation (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelResponse) Reset()         { *m = CancelResponse{} }
func (m *CancelResponse) String() string { return proto.CompactTextString(m) }
func (*CancelResponse) ProtoMessage()    {}
func (*CancelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{10}
}
func (m *CancelResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelResponse.Unmarshal(m, b)
}
func (m *CancelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelResponse.Marshal(b, m, deterministic)
}
func (dst *CancelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelResponse.Merge(dst, src)
}
func (m *CancelResponse) XXX_Size() int {
	return xxx_messageInfo_CancelResponse.Size(m)
}
func (m *CancelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CancelResponse proto.InternalMessageInfo

func (m *CancelResponse) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *CancelResponse) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type LoadBalancerWorkflowOwnerRequest struct {
	// The load balancer where the service should be published
	// of form tenant/123/workspace/345/loadbalancer/blah
	Loadbalancer string `protobuf:"bytes,1,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	// the name of the service to publish. `tenant/123/workspace/456/service/foo.com`
	Service string `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	// TLS settings for the service to be published.
	Tls                  *TLSSettings `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *LoadBalancerWorkflowOwnerRequest) Reset()         { *m = LoadBalancerWorkflowOwnerRequest{} }
func (m *LoadBalancerWorkflowOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*LoadBalancerWorkflowOwnerRequest) ProtoMessage()    {}
func (*LoadBalancerWorkflowOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{11}
}
func (m *LoadBalancerWorkflowOwnerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalancerWorkflowOwnerRequest.Unmarshal(m, b)
}
func (m *LoadBalancerWorkflowOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalancerWorkflowOwnerRequest.Marshal(b, m, deterministic)
}
func (dst *LoadBalancerWorkflowOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancerWorkflowOwnerRequest.Merge(dst, src)
}
func (m *LoadBalancerWorkflowOwnerRequest) XXX_Size() int {
	return xxx_messageInfo_LoadBalancerWorkflowOwnerRequest.Size(m)
}
func (m *LoadBalancerWorkflowOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancerWorkflowOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancerWorkflowOwnerRequest proto.InternalMessageInfo

func (m *LoadBalancerWorkflowOwnerRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *LoadBalancerWorkflowOwnerRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *LoadBalancerWorkflowOwnerRequest) GetTls() *TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

type TLSSettings struct {
	// If specified, only allow requests that match the SNI value.
	Sni string `protobuf:"bytes,1,opt,name=sni,proto3" json:"sni,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,2,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server's private key.
	PrivateKey string `protobuf:"bytes,3,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// For proxies running on VMs, the path to a file containing
	// certificate authority certificates to use in verifying a
	// presented client side certificate for mutual TLS connections.
	CaCertificates string `protobuf:"bytes,4,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// For proxies running on Kubernetes, the name of the secret that
	// holds the TLS certs. Currently applicable only on Kubernetes.
	// The secret should contain the server certificate and the private
	// key. If mutual TLS is being used, an additional secret with name
	// secretName-cacert should be created with the CaCertificates that
	// the server will use to verify client side certificates. If the
	// service is exposed via a load balancer, the secret must be
	// accessible to it.
	SecretName           string   `protobuf:"bytes,5,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_a59420ed2a8c0ce2, []int{12}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSSettings.Unmarshal(m, b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
}
func (dst *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(dst, src)
}
func (m *TLSSettings) XXX_Size() int {
	return xxx_messageInfo_TLSSettings.Size(m)
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetSni() string {
	if m != nil {
		return m.Sni
	}
	return ""
}

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterType((*LoadBalancerWorkflowUserRequest)(nil), "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowUserRequest")
	proto.RegisterType((*Status)(nil), "tetrate.api.tcc.workflows.v1.Status")
	proto.RegisterType((*GetStatus)(nil), "tetrate.api.tcc.workflows.v1.GetStatus")
	proto.RegisterType((*ListRequests)(nil), "tetrate.api.tcc.workflows.v1.ListRequests")
	proto.RegisterType((*ListPendingResponse)(nil), "tetrate.api.tcc.workflows.v1.ListPendingResponse")
	proto.RegisterType((*ListPendingResponse_PendingRequest)(nil), "tetrate.api.tcc.workflows.v1.ListPendingResponse.PendingRequest")
	proto.RegisterType((*ApproveRequest)(nil), "tetrate.api.tcc.workflows.v1.ApproveRequest")
	proto.RegisterType((*DenyRequest)(nil), "tetrate.api.tcc.workflows.v1.DenyRequest")
	proto.RegisterType((*CancelRequest)(nil), "tetrate.api.tcc.workflows.v1.CancelRequest")
	proto.RegisterType((*ApproveResponse)(nil), "tetrate.api.tcc.workflows.v1.ApproveResponse")
	proto.RegisterType((*DenyResponse)(nil), "tetrate.api.tcc.workflows.v1.DenyResponse")
	proto.RegisterType((*CancelResponse)(nil), "tetrate.api.tcc.workflows.v1.CancelResponse")
	proto.RegisterType((*LoadBalancerWorkflowOwnerRequest)(nil), "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflowOwnerRequest")
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.workflows.v1.TLSSettings")
	proto.RegisterEnum("tetrate.api.tcc.workflows.v1.ListPendingResponse_PendingRequest_OP", ListPendingResponse_PendingRequest_OP_name, ListPendingResponse_PendingRequest_OP_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerWorkflowClient is the client API for LoadBalancerWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerWorkflowClient interface {
	// namespace members of the service being requested & admins.
	// The API call must be made either by the admin or by owners of the
	// namespaces whose services are being exposed. It is assumed that
	// the load balancer has been created, deployed and imported into TCC
	// through out of band mechanisms [for F5] or through service registry
	// imports. The parameters should list the set of services that need
	// to be exposed. Services will not be exposed until its approved by
	// the namespace owner where the load balancer resides.
	Attach(ctx context.Context, in *LoadBalancerWorkflowUserRequest, opts ...grpc.CallOption) (*Status, error)
	Detach(ctx context.Context, in *LoadBalancerWorkflowUserRequest, opts ...grpc.CallOption) (*Status, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer
	Publish(ctx context.Context, in *LoadBalancerWorkflowOwnerRequest, opts ...grpc.CallOption) (*Status, error)
	ListPendingRequests(ctx context.Context, in *ListRequests, opts ...grpc.CallOption) (*ListPendingResponse, error)
	GetRequestStatus(ctx context.Context, in *GetStatus, opts ...grpc.CallOption) (*Status, error)
	// namespace members who own the load balancer & admins.
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	// namespace members who own the load balancer & admins.
	Deny(ctx context.Context, in *DenyRequest, opts ...grpc.CallOption) (*DenyResponse, error)
	// namespace members who own the load balancer & admins.
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
}

type loadBalancerWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerWorkflowClient(cc *grpc.ClientConn) LoadBalancerWorkflowClient {
	return &loadBalancerWorkflowClient{cc}
}

func (c *loadBalancerWorkflowClient) Attach(ctx context.Context, in *LoadBalancerWorkflowUserRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Detach(ctx context.Context, in *LoadBalancerWorkflowUserRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Publish(ctx context.Context, in *LoadBalancerWorkflowOwnerRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) ListPendingRequests(ctx context.Context, in *ListRequests, opts ...grpc.CallOption) (*ListPendingResponse, error) {
	out := new(ListPendingResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) GetRequestStatus(ctx context.Context, in *GetStatus, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Deny(ctx context.Context, in *DenyRequest, opts ...grpc.CallOption) (*DenyResponse, error) {
	out := new(DenyResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerWorkflowServer is the server API for LoadBalancerWorkflow service.
type LoadBalancerWorkflowServer interface {
	// namespace members of the service being requested & admins.
	// The API call must be made either by the admin or by owners of the
	// namespaces whose services are being exposed. It is assumed that
	// the load balancer has been created, deployed and imported into TCC
	// through out of band mechanisms [for F5] or through service registry
	// imports. The parameters should list the set of services that need
	// to be exposed. Services will not be exposed until its approved by
	// the namespace owner where the load balancer resides.
	Attach(context.Context, *LoadBalancerWorkflowUserRequest) (*Status, error)
	Detach(context.Context, *LoadBalancerWorkflowUserRequest) (*Status, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer
	Publish(context.Context, *LoadBalancerWorkflowOwnerRequest) (*Status, error)
	ListPendingRequests(context.Context, *ListRequests) (*ListPendingResponse, error)
	GetRequestStatus(context.Context, *GetStatus) (*Status, error)
	// namespace members who own the load balancer & admins.
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	// namespace members who own the load balancer & admins.
	Deny(context.Context, *DenyRequest) (*DenyResponse, error)
	// namespace members who own the load balancer & admins.
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
}

func RegisterLoadBalancerWorkflowServer(s *grpc.Server, srv LoadBalancerWorkflowServer) {
	s.RegisterService(&_LoadBalancerWorkflow_serviceDesc, srv)
}

func _LoadBalancerWorkflow_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalancerWorkflowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, req.(*LoadBalancerWorkflowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalancerWorkflowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, req.(*LoadBalancerWorkflowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalancerWorkflowOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, req.(*LoadBalancerWorkflowOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_ListPendingRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).ListPendingRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).ListPendingRequests(ctx, req.(*ListRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_GetRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).GetRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).GetRequestStatus(ctx, req.(*GetStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, req.(*DenyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancerWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow",
	HandlerType: (*LoadBalancerWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _LoadBalancerWorkflow_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _LoadBalancerWorkflow_Detach_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _LoadBalancerWorkflow_Publish_Handler,
		},
		{
			MethodName: "ListPendingRequests",
			Handler:    _LoadBalancerWorkflow_ListPendingRequests_Handler,
		},
		{
			MethodName: "GetRequestStatus",
			Handler:    _LoadBalancerWorkflow_GetRequestStatus_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _LoadBalancerWorkflow_Approve_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _LoadBalancerWorkflow_Deny_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _LoadBalancerWorkflow_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadbalancer.proto",
}

func init() { proto.RegisterFile("loadbalancer.proto", fileDescriptor_loadbalancer_a59420ed2a8c0ce2) }

var fileDescriptor_loadbalancer_a59420ed2a8c0ce2 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xdf, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0x71, 0x52, 0xd2, 0xcd, 0x49, 0x49, 0xc3, 0xc0, 0x45, 0x14, 0x45, 0xda, 0x32, 0x5a,
	0xd1, 0xdd, 0x6c, 0x63, 0x2b, 0xa9, 0xf8, 0xa3, 0xae, 0x76, 0xd5, 0x34, 0x45, 0x8b, 0x44, 0x45,
	0x23, 0xb7, 0x08, 0x89, 0x9b, 0x68, 0x62, 0x9f, 0x4d, 0xad, 0xa6, 0x1e, 0xe3, 0x99, 0xa4, 0x8a,
	0x10, 0x37, 0xbc, 0x02, 0x97, 0x68, 0x11, 0x37, 0x5c, 0x70, 0xc1, 0x03, 0xf0, 0x14, 0x5c, 0xc0,
	0x23, 0xf0, 0x20, 0xc8, 0xe3, 0x89, 0xe3, 0xa0, 0xca, 0x75, 0x5a, 0x2e, 0xf6, 0x6e, 0x7c, 0x66,
	0xe6, 0x3b, 0x3f, 0xcf, 0x19, 0x7f, 0xc7, 0x40, 0x26, 0x9c, 0xb9, 0x23, 0x36, 0x61, 0xbe, 0x83,
	0xa1, 0x19, 0x84, 0x5c, 0x72, 0xd2, 0x94, 0x28, 0x43, 0x26, 0xd1, 0x64, 0x81, 0x67, 0x4a, 0xc7,
	0x31, 0xaf, 0x79, 0x78, 0xf9, 0x6a, 0xc2, 0xaf, 0x85, 0x39, 0xeb, 0x34, 0x9a, 0x63, 0xce, 0xc7,
	0x13, 0xb4, 0x58, 0xe0, 0x59, 0xcc, 0xf7, 0xb9, 0x64, 0xd2, 0xe3, 0xbe, 0x88, 0xf7, 0xd2, 0x21,
	0x3c, 0x3c, 0xe1, 0xcc, 0x3d, 0xd2, 0x8a, 0x5f, 0xeb, 0x9d, 0x5f, 0x09, 0x0c, 0x6d, 0xfc, 0x76,
	0x8a, 0x42, 0x12, 0x0a, 0x5b, 0xe9, 0xa4, 0x75, 0x63, 0xc7, 0x78, 0x5c, 0xb6, 0x57, 0x62, 0xa4,
	0x0e, 0x9b, 0x02, 0xc3, 0x99, 0xe7, 0x60, 0xbd, 0xa0, 0xa6, 0x17, 0x8f, 0x54, 0x42, 0xe9, 0x4c,
	0x32, 0x39, 0x15, 0xa4, 0x09, 0xe5, 0x30, 0x96, 0xf4, 0x5c, 0x2d, 0xb2, 0x0c, 0x90, 0x06, 0x3c,
	0x60, 0x41, 0x10, 0xf2, 0x19, 0xba, 0x4a, 0xe2, 0x81, 0x9d, 0x3c, 0x47, 0x3b, 0x83, 0xe9, 0x68,
	0xe2, 0x89, 0x0b, 0x74, 0xeb, 0x45, 0x35, 0xb9, 0x0c, 0x10, 0x02, 0x1b, 0x3e, 0x97, 0x58, 0xdf,
	0x50, 0x92, 0x6a, 0x4c, 0x9f, 0x40, 0xf9, 0x25, 0xca, 0x3c, 0x89, 0x69, 0x15, 0xb6, 0x4e, 0x3c,
	0x21, 0xf5, 0xdb, 0x0a, 0xfa, 0x77, 0x01, 0xde, 0x8b, 0x02, 0x03, 0xf4, 0x5d, 0xcf, 0x1f, 0xdb,
	0x28, 0x02, 0xee, 0x0b, 0x24, 0x97, 0x50, 0x0b, 0xe2, 0xd0, 0x50, 0x6f, 0x16, 0x75, 0x63, 0xa7,
	0xf8, 0xb8, 0xd2, 0x3d, 0x34, 0xb3, 0x0a, 0x60, 0xde, 0x20, 0x66, 0x26, 0xcf, 0x4a, 0xc8, 0xde,
	0x0e, 0x56, 0x9e, 0x45, 0xe3, 0x4f, 0x03, 0xaa, 0xab, 0x6b, 0xee, 0x57, 0x06, 0xc2, 0xa0, 0xcc,
	0x03, 0x0c, 0x55, 0xed, 0xd5, 0x11, 0x56, 0xbb, 0xfd, 0xfb, 0x62, 0x9b, 0xa7, 0x03, 0x7b, 0xa9,
	0x4a, 0x9b, 0x50, 0x38, 0x1d, 0x10, 0x80, 0x52, 0xef, 0xfc, 0xbc, 0xd7, 0xff, 0xbc, 0xf6, 0x56,
	0x34, 0x3e, 0xfe, 0x4c, 0x8d, 0x0d, 0x6a, 0x42, 0xb5, 0x17, 0xd7, 0x73, 0xf1, 0x42, 0xd9, 0x65,
	0x79, 0x0a, 0x95, 0x63, 0xf4, 0xe7, 0xf9, 0x16, 0xb7, 0xe1, 0x9d, 0x7e, 0x74, 0x02, 0x93, 0x7c,
	0xcb, 0xfb, 0xb0, 0x9d, 0xb0, 0xe8, 0xea, 0x66, 0x5f, 0xce, 0xc5, 0x15, 0x2b, 0xa4, 0xae, 0xd8,
	0x21, 0x6c, 0xc5, 0x80, 0x77, 0x56, 0x38, 0x82, 0xea, 0x82, 0xfa, 0xce, 0x1a, 0xaf, 0x0d, 0xd8,
	0xb9, 0xe9, 0x03, 0x3e, 0xbd, 0xf6, 0xff, 0xa7, 0x2f, 0x98, 0x3c, 0x83, 0xa2, 0x9c, 0x08, 0x75,
	0x69, 0x2a, 0xdd, 0x27, 0xd9, 0x97, 0xe6, 0xfc, 0xe4, 0xec, 0x0c, 0xa5, 0xf4, 0xfc, 0xb1, 0xb0,
	0xa3, 0x5d, 0xf4, 0x0f, 0x03, 0x2a, 0xa9, 0x20, 0xa9, 0x41, 0x51, 0xf8, 0x9e, 0x26, 0x88, 0x86,
	0xa4, 0x0d, 0x24, 0xca, 0x84, 0xe1, 0xd0, 0xc1, 0x50, 0x7a, 0xaf, 0x3c, 0x87, 0x25, 0xef, 0xf8,
	0x6e, 0x3c, 0xd3, 0x5f, 0x4e, 0x90, 0x87, 0x50, 0x09, 0x42, 0x6f, 0xc6, 0x24, 0x0e, 0x2f, 0x71,
	0xae, 0xa8, 0xca, 0x36, 0xe8, 0xd0, 0x17, 0x38, 0x27, 0xbb, 0xb0, 0xed, 0xb0, 0xb4, 0x96, 0xd0,
	0xce, 0x50, 0x75, 0x58, 0x4a, 0x48, 0x44, 0x4a, 0x02, 0x9d, 0x10, 0xe5, 0xd0, 0x67, 0x57, 0x58,
	0x7f, 0x3b, 0x56, 0x8a, 0x43, 0x5f, 0xb2, 0x2b, 0xec, 0xfe, 0x0e, 0xf0, 0xfe, 0x4d, 0x67, 0x4b,
	0x7e, 0x32, 0xa0, 0xd4, 0x93, 0x92, 0x39, 0x17, 0xe4, 0xf9, 0x2d, 0x1f, 0x51, 0xb6, 0xb7, 0x36,
	0x1e, 0x65, 0x6f, 0x8f, 0x0d, 0x8c, 0xee, 0xfd, 0xf0, 0xd7, 0x3f, 0x3f, 0x16, 0x3e, 0xa4, 0x1f,
	0x58, 0xb3, 0x8e, 0x95, 0x2c, 0xb0, 0xd2, 0xf5, 0xb3, 0x98, 0xe2, 0x39, 0x30, 0x5a, 0x8a, 0xee,
	0x18, 0xdf, 0x2c, 0x3a, 0x17, 0x17, 0x74, 0x3f, 0x1b, 0xb0, 0x39, 0x88, 0xbd, 0x9b, 0xbc, 0x58,
	0x1f, 0x2f, 0x7d, 0xaf, 0x73, 0xf2, 0xb5, 0x15, 0xdf, 0x2e, 0xa5, 0x19, 0x7c, 0xba, 0x9b, 0x44,
	0x80, 0xbf, 0x18, 0xff, 0xf1, 0xff, 0xd8, 0x92, 0x49, 0xeb, 0x76, 0xbb, 0x4c, 0xec, 0xbb, 0xb3,
	0xb6, 0xb5, 0xd2, 0x96, 0xa2, 0x7c, 0x44, 0x32, 0x29, 0xe3, 0x3d, 0x11, 0x62, 0xed, 0x25, 0x2e,
	0xd2, 0xe9, 0x2e, 0xb7, 0x9b, 0x9d, 0x33, 0x69, 0x87, 0x39, 0x4f, 0xed, 0xb9, 0xe2, 0xf9, 0x84,
	0x7c, 0x94, 0xc1, 0xa3, 0xad, 0xc9, 0xfa, 0x2e, 0xf1, 0xa8, 0xef, 0x2d, 0x11, 0xd3, 0xfc, 0x66,
	0xc0, 0xa6, 0xf6, 0x58, 0xb2, 0x97, 0x9d, 0x70, 0xb5, 0x2d, 0x34, 0xda, 0x39, 0x57, 0xeb, 0x73,
	0xeb, 0x29, 0xce, 0x67, 0xf4, 0xe3, 0x35, 0x39, 0xf5, 0xcf, 0x45, 0x54, 0xf1, 0xd7, 0x06, 0x6c,
	0x44, 0x56, 0x4e, 0x6e, 0x31, 0xb7, 0x54, 0x3f, 0x6a, 0xb4, 0xf2, 0x2c, 0xd5, 0x88, 0x2f, 0x14,
	0xe2, 0xa7, 0x74, 0x7f, 0x4d, 0x44, 0x17, 0xfd, 0x79, 0xc4, 0xf7, 0xab, 0x01, 0xa5, 0xb8, 0x51,
	0x90, 0xa7, 0xd9, 0x69, 0x57, 0x9a, 0x60, 0x63, 0x2f, 0xdf, 0x62, 0x4d, 0x79, 0xa8, 0x28, 0x0f,
	0xe8, 0xba, 0x05, 0x77, 0x94, 0xcc, 0x81, 0xd1, 0x3a, 0xda, 0xff, 0xa6, 0x33, 0xf6, 0xe4, 0xc5,
	0x74, 0x64, 0x3a, 0xfc, 0xca, 0xd2, 0xb9, 0x3d, 0xbe, 0x18, 0xa9, 0x3f, 0x50, 0xe9, 0x38, 0x29,
	0xf1, 0x59, 0x67, 0x54, 0x52, 0xff, 0xa1, 0xfb, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xc4,
	0x85, 0x6c, 0xd9, 0x0a, 0x00, 0x00,
}
