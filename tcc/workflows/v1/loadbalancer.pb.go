// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loadbalancer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/workflows/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/tetrateio/tetrate/api/tcc/core/v1"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LBOperation int32

const (
	LBOperation_ATTACH LBOperation = 0
	LBOperation_DETACH LBOperation = 1
)

var LBOperation_name = map[int32]string{
	0: "ATTACH",
	1: "DETACH",
}
var LBOperation_value = map[string]int32{
	"ATTACH": 0,
	"DETACH": 1,
}

func (x LBOperation) String() string {
	return proto.EnumName(LBOperation_name, int32(x))
}
func (LBOperation) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{0}
}

type LBTicketStatus_RequestState int32

const (
	LBTicketStatus_PENDING   LBTicketStatus_RequestState = 0
	LBTicketStatus_APPROVED  LBTicketStatus_RequestState = 1
	LBTicketStatus_DENIED    LBTicketStatus_RequestState = 2
	LBTicketStatus_PUBLISHED LBTicketStatus_RequestState = 3
	LBTicketStatus_CANCELED  LBTicketStatus_RequestState = 4
)

var LBTicketStatus_RequestState_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "PUBLISHED",
	4: "CANCELED",
}
var LBTicketStatus_RequestState_value = map[string]int32{
	"PENDING":   0,
	"APPROVED":  1,
	"DENIED":    2,
	"PUBLISHED": 3,
	"CANCELED":  4,
}

func (x LBTicketStatus_RequestState) String() string {
	return proto.EnumName(LBTicketStatus_RequestState_name, int32(x))
}
func (LBTicketStatus_RequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{1, 0}
}

type LBTicketDetails struct {
	LoadbalancerName      string   `protobuf:"bytes,1,opt,name=loadbalancer_name,json=loadbalancerName,proto3" json:"loadbalancer_name,omitempty"`
	LoadbalancerNamespace string   `protobuf:"bytes,2,opt,name=loadbalancer_namespace,json=loadbalancerNamespace,proto3" json:"loadbalancer_namespace,omitempty"`
	ServiceHostname       string   `protobuf:"bytes,3,opt,name=service_hostname,json=serviceHostname,proto3" json:"service_hostname,omitempty"`
	ServiceNamespace      string   `protobuf:"bytes,4,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	Cluster               string   `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant                string   `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *LBTicketDetails) Reset()         { *m = LBTicketDetails{} }
func (m *LBTicketDetails) String() string { return proto.CompactTextString(m) }
func (*LBTicketDetails) ProtoMessage()    {}
func (*LBTicketDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{0}
}
func (m *LBTicketDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketDetails.Unmarshal(m, b)
}
func (m *LBTicketDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketDetails.Marshal(b, m, deterministic)
}
func (dst *LBTicketDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketDetails.Merge(dst, src)
}
func (m *LBTicketDetails) XXX_Size() int {
	return xxx_messageInfo_LBTicketDetails.Size(m)
}
func (m *LBTicketDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketDetails.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketDetails proto.InternalMessageInfo

func (m *LBTicketDetails) GetLoadbalancerName() string {
	if m != nil {
		return m.LoadbalancerName
	}
	return ""
}

func (m *LBTicketDetails) GetLoadbalancerNamespace() string {
	if m != nil {
		return m.LoadbalancerNamespace
	}
	return ""
}

func (m *LBTicketDetails) GetServiceHostname() string {
	if m != nil {
		return m.ServiceHostname
	}
	return ""
}

func (m *LBTicketDetails) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *LBTicketDetails) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketDetails) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type LBTicketStatus struct {
	Tenant  string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// e.g. attach-789
	Requestid            string                      `protobuf:"bytes,3,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Operation            LBOperation                 `protobuf:"varint,4,opt,name=operation,proto3,enum=tetrate.api.tcc.workflows.v1.LBOperation" json:"operation,omitempty"`
	State                LBTicketStatus_RequestState `protobuf:"varint,5,opt,name=state,proto3,enum=tetrate.api.tcc.workflows.v1.LBTicketStatus_RequestState" json:"state,omitempty"`
	Note                 string                      `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *LBTicketStatus) Reset()         { *m = LBTicketStatus{} }
func (m *LBTicketStatus) String() string { return proto.CompactTextString(m) }
func (*LBTicketStatus) ProtoMessage()    {}
func (*LBTicketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{1}
}
func (m *LBTicketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketStatus.Unmarshal(m, b)
}
func (m *LBTicketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketStatus.Marshal(b, m, deterministic)
}
func (dst *LBTicketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketStatus.Merge(dst, src)
}
func (m *LBTicketStatus) XXX_Size() int {
	return xxx_messageInfo_LBTicketStatus.Size(m)
}
func (m *LBTicketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketStatus proto.InternalMessageInfo

func (m *LBTicketStatus) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBTicketStatus) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketStatus) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketStatus) GetOperation() LBOperation {
	if m != nil {
		return m.Operation
	}
	return LBOperation_ATTACH
}

func (m *LBTicketStatus) GetState() LBTicketStatus_RequestState {
	if m != nil {
		return m.State
	}
	return LBTicketStatus_PENDING
}

func (m *LBTicketStatus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ListTicketsRequest struct {
	Cluster              string   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTicketsRequest) Reset()         { *m = ListTicketsRequest{} }
func (m *ListTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTicketsRequest) ProtoMessage()    {}
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{2}
}
func (m *ListTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsRequest.Unmarshal(m, b)
}
func (m *ListTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsRequest.Marshal(b, m, deterministic)
}
func (dst *ListTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsRequest.Merge(dst, src)
}
func (m *ListTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTicketsRequest.Size(m)
}
func (m *ListTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsRequest proto.InternalMessageInfo

func (m *ListTicketsRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListTicketsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListTicketsResponse struct {
	Cluster              string                                `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	PendingTickets       []*ListTicketsResponse_PendingTickets `protobuf:"bytes,2,rep,name=pending_tickets,json=pendingTickets,proto3" json:"pending_tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *ListTicketsResponse) Reset()         { *m = ListTicketsResponse{} }
func (m *ListTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse) ProtoMessage()    {}
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{3}
}
func (m *ListTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse.Unmarshal(m, b)
}
func (m *ListTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse.Marshal(b, m, deterministic)
}
func (dst *ListTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse.Merge(dst, src)
}
func (m *ListTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse.Size(m)
}
func (m *ListTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse proto.InternalMessageInfo

func (m *ListTicketsResponse) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListTicketsResponse) GetPendingTickets() []*ListTicketsResponse_PendingTickets {
	if m != nil {
		return m.PendingTickets
	}
	return nil
}

type ListTicketsResponse_PendingTickets struct {
	Requestid             string      `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	LoadbalancerName      string      `protobuf:"bytes,2,opt,name=loadbalancer_name,json=loadbalancerName,proto3" json:"loadbalancer_name,omitempty"`
	LoadbalancerNamespace string      `protobuf:"bytes,3,opt,name=loadbalancer_namespace,json=loadbalancerNamespace,proto3" json:"loadbalancer_namespace,omitempty"`
	ServiceHostname       string      `protobuf:"bytes,4,opt,name=service_hostname,json=serviceHostname,proto3" json:"service_hostname,omitempty"`
	ServiceNamespace      string      `protobuf:"bytes,5,opt,name=service_namespace,json=serviceNamespace,proto3" json:"service_namespace,omitempty"`
	Operation             LBOperation `protobuf:"varint,6,opt,name=operation,proto3,enum=tetrate.api.tcc.workflows.v1.LBOperation" json:"operation,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}    `json:"-"`
	XXX_unrecognized      []byte      `json:"-"`
	XXX_sizecache         int32       `json:"-"`
}

func (m *ListTicketsResponse_PendingTickets) Reset()         { *m = ListTicketsResponse_PendingTickets{} }
func (m *ListTicketsResponse_PendingTickets) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse_PendingTickets) ProtoMessage()    {}
func (*ListTicketsResponse_PendingTickets) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{3, 0}
}
func (m *ListTicketsResponse_PendingTickets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Unmarshal(m, b)
}
func (m *ListTicketsResponse_PendingTickets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Marshal(b, m, deterministic)
}
func (dst *ListTicketsResponse_PendingTickets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse_PendingTickets.Merge(dst, src)
}
func (m *ListTicketsResponse_PendingTickets) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse_PendingTickets.Size(m)
}
func (m *ListTicketsResponse_PendingTickets) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse_PendingTickets.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse_PendingTickets proto.InternalMessageInfo

func (m *ListTicketsResponse_PendingTickets) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetLoadbalancerName() string {
	if m != nil {
		return m.LoadbalancerName
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetLoadbalancerNamespace() string {
	if m != nil {
		return m.LoadbalancerNamespace
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetServiceHostname() string {
	if m != nil {
		return m.ServiceHostname
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetServiceNamespace() string {
	if m != nil {
		return m.ServiceNamespace
	}
	return ""
}

func (m *ListTicketsResponse_PendingTickets) GetOperation() LBOperation {
	if m != nil {
		return m.Operation
	}
	return LBOperation_ATTACH
}

type LBTicketId struct {
	Requestid            string   `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LBTicketId) Reset()         { *m = LBTicketId{} }
func (m *LBTicketId) String() string { return proto.CompactTextString(m) }
func (*LBTicketId) ProtoMessage()    {}
func (*LBTicketId) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{4}
}
func (m *LBTicketId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketId.Unmarshal(m, b)
}
func (m *LBTicketId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketId.Marshal(b, m, deterministic)
}
func (dst *LBTicketId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketId.Merge(dst, src)
}
func (m *LBTicketId) XXX_Size() int {
	return xxx_messageInfo_LBTicketId.Size(m)
}
func (m *LBTicketId) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketId.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketId proto.InternalMessageInfo

func (m *LBTicketId) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketId) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketId) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type LBTicketResolution struct {
	Tenant    string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Cluster   string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Requestid string `protobuf:"bytes,3,opt,name=requestid,proto3" json:"requestid,omitempty"`
	// optional description (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,4,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LBTicketResolution) Reset()         { *m = LBTicketResolution{} }
func (m *LBTicketResolution) String() string { return proto.CompactTextString(m) }
func (*LBTicketResolution) ProtoMessage()    {}
func (*LBTicketResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{5}
}
func (m *LBTicketResolution) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBTicketResolution.Unmarshal(m, b)
}
func (m *LBTicketResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBTicketResolution.Marshal(b, m, deterministic)
}
func (dst *LBTicketResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBTicketResolution.Merge(dst, src)
}
func (m *LBTicketResolution) XXX_Size() int {
	return xxx_messageInfo_LBTicketResolution.Size(m)
}
func (m *LBTicketResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_LBTicketResolution.DiscardUnknown(m)
}

var xxx_messageInfo_LBTicketResolution proto.InternalMessageInfo

func (m *LBTicketResolution) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBTicketResolution) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBTicketResolution) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBTicketResolution) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type LBPublishAction struct {
	Requestid            string          `protobuf:"bytes,1,opt,name=requestid,proto3" json:"requestid,omitempty"`
	Cluster              string          `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string          `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Tls                  *v1.TLSSettings `protobuf:"bytes,4,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LBPublishAction) Reset()         { *m = LBPublishAction{} }
func (m *LBPublishAction) String() string { return proto.CompactTextString(m) }
func (*LBPublishAction) ProtoMessage()    {}
func (*LBPublishAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_7e4d52049a0b959f, []int{6}
}
func (m *LBPublishAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LBPublishAction.Unmarshal(m, b)
}
func (m *LBPublishAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LBPublishAction.Marshal(b, m, deterministic)
}
func (dst *LBPublishAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LBPublishAction.Merge(dst, src)
}
func (m *LBPublishAction) XXX_Size() int {
	return xxx_messageInfo_LBPublishAction.Size(m)
}
func (m *LBPublishAction) XXX_DiscardUnknown() {
	xxx_messageInfo_LBPublishAction.DiscardUnknown(m)
}

var xxx_messageInfo_LBPublishAction proto.InternalMessageInfo

func (m *LBPublishAction) GetRequestid() string {
	if m != nil {
		return m.Requestid
	}
	return ""
}

func (m *LBPublishAction) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LBPublishAction) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LBPublishAction) GetTls() *v1.TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

func init() {
	proto.RegisterType((*LBTicketDetails)(nil), "tetrate.api.tcc.workflows.v1.LBTicketDetails")
	proto.RegisterType((*LBTicketStatus)(nil), "tetrate.api.tcc.workflows.v1.LBTicketStatus")
	proto.RegisterType((*ListTicketsRequest)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsRequest")
	proto.RegisterType((*ListTicketsResponse)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsResponse")
	proto.RegisterType((*ListTicketsResponse_PendingTickets)(nil), "tetrate.api.tcc.workflows.v1.ListTicketsResponse.PendingTickets")
	proto.RegisterType((*LBTicketId)(nil), "tetrate.api.tcc.workflows.v1.LBTicketId")
	proto.RegisterType((*LBTicketResolution)(nil), "tetrate.api.tcc.workflows.v1.LBTicketResolution")
	proto.RegisterType((*LBPublishAction)(nil), "tetrate.api.tcc.workflows.v1.LBPublishAction")
	proto.RegisterEnum("tetrate.api.tcc.workflows.v1.LBOperation", LBOperation_name, LBOperation_value)
	proto.RegisterEnum("tetrate.api.tcc.workflows.v1.LBTicketStatus_RequestState", LBTicketStatus_RequestState_name, LBTicketStatus_RequestState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerWorkflowClient is the client API for LoadBalancerWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerWorkflowClient interface {
	Attach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error)
	Detach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error)
	GetTicketStatus(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error)
	Cancel(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer or remove a detached service
	Publish(ctx context.Context, in *LBPublishAction, opts ...grpc.CallOption) (*LBTicketStatus, error)
	ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	Approve(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error)
	Deny(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error)
}

type loadBalancerWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerWorkflowClient(cc *grpc.ClientConn) LoadBalancerWorkflowClient {
	return &loadBalancerWorkflowClient{cc}
}

func (c *loadBalancerWorkflowClient) Attach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error) {
	out := new(LBTicketId)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Detach(ctx context.Context, in *LBTicketDetails, opts ...grpc.CallOption) (*LBTicketId, error) {
	out := new(LBTicketId)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) GetTicketStatus(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetTicketStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Cancel(ctx context.Context, in *LBTicketId, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Publish(ctx context.Context, in *LBPublishAction, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Approve(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Deny(ctx context.Context, in *LBTicketResolution, opts ...grpc.CallOption) (*LBTicketStatus, error) {
	out := new(LBTicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerWorkflowServer is the server API for LoadBalancerWorkflow service.
type LoadBalancerWorkflowServer interface {
	Attach(context.Context, *LBTicketDetails) (*LBTicketId, error)
	Detach(context.Context, *LBTicketDetails) (*LBTicketId, error)
	GetTicketStatus(context.Context, *LBTicketId) (*LBTicketStatus, error)
	Cancel(context.Context, *LBTicketId) (*LBTicketStatus, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer or remove a detached service
	Publish(context.Context, *LBPublishAction) (*LBTicketStatus, error)
	ListPendingTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	Approve(context.Context, *LBTicketResolution) (*LBTicketStatus, error)
	Deny(context.Context, *LBTicketResolution) (*LBTicketStatus, error)
}

func RegisterLoadBalancerWorkflowServer(s *grpc.Server, srv LoadBalancerWorkflowServer) {
	s.RegisterService(&_LoadBalancerWorkflow_serviceDesc, srv)
}

func _LoadBalancerWorkflow_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, req.(*LBTicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, req.(*LBTicketDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_GetTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/GetTicketStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, req.(*LBTicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, req.(*LBTicketId))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBPublishAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, req.(*LBPublishAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_ListPendingTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/ListPendingTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketResolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, req.(*LBTicketResolution))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LBTicketResolution)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, req.(*LBTicketResolution))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancerWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.workflows.v1.LoadBalancerWorkflow",
	HandlerType: (*LoadBalancerWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _LoadBalancerWorkflow_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _LoadBalancerWorkflow_Detach_Handler,
		},
		{
			MethodName: "GetTicketStatus",
			Handler:    _LoadBalancerWorkflow_GetTicketStatus_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _LoadBalancerWorkflow_Cancel_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _LoadBalancerWorkflow_Publish_Handler,
		},
		{
			MethodName: "ListPendingTickets",
			Handler:    _LoadBalancerWorkflow_ListPendingTickets_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _LoadBalancerWorkflow_Approve_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _LoadBalancerWorkflow_Deny_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadbalancer.proto",
}

func init() { proto.RegisterFile("loadbalancer.proto", fileDescriptor_loadbalancer_7e4d52049a0b959f) }

var fileDescriptor_loadbalancer_7e4d52049a0b959f = []byte{
	// 928 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xde, 0x71, 0xd2, 0x94, 0xbe, 0x96, 0x34, 0x0c, 0xb0, 0x8a, 0xa2, 0x22, 0xad, 0x2c, 0x90,
	0xba, 0x05, 0x6c, 0x92, 0x15, 0x48, 0xec, 0x89, 0xa4, 0xf1, 0xb6, 0x81, 0x28, 0x0d, 0x6e, 0x61,
	0xc5, 0xb2, 0xa2, 0x9a, 0xd8, 0x43, 0x6a, 0xad, 0xeb, 0x31, 0x9e, 0x49, 0x96, 0x55, 0xd5, 0x0b,
	0x7f, 0x81, 0x13, 0xbf, 0x63, 0x4f, 0x5c, 0x39, 0x20, 0x81, 0x38, 0xac, 0xc4, 0x3f, 0x40, 0xfc,
	0x0f, 0x90, 0xc7, 0xe3, 0x8d, 0xdd, 0xd2, 0x4d, 0x4d, 0x9b, 0xc3, 0xde, 0xc6, 0x33, 0xef, 0xbd,
	0xf9, 0xbe, 0xf7, 0xde, 0x37, 0x4f, 0x06, 0xec, 0x33, 0xe2, 0x8e, 0x88, 0x4f, 0x02, 0x87, 0x46,
	0x46, 0x18, 0x31, 0xc1, 0xf0, 0x86, 0xa0, 0x22, 0x22, 0x82, 0x1a, 0x24, 0xf4, 0x0c, 0xe1, 0x38,
	0xc6, 0x63, 0x16, 0x3d, 0xfa, 0xd6, 0x67, 0x8f, 0xb9, 0x31, 0x6d, 0x36, 0x36, 0xc6, 0x8c, 0x8d,
	0x7d, 0x6a, 0x92, 0xd0, 0x33, 0x49, 0x10, 0x30, 0x41, 0x84, 0xc7, 0x02, 0x9e, 0xf8, 0x36, 0xde,
	0x12, 0x8e, 0x63, 0x3a, 0x2c, 0xa2, 0xe6, 0xb4, 0x69, 0x0a, 0x9f, 0x73, 0x2a, 0x84, 0x17, 0x8c,
	0xd5, 0xb1, 0xfe, 0x0f, 0x82, 0xf5, 0x7e, 0xe7, 0xc0, 0x73, 0x1e, 0x51, 0xd1, 0xa5, 0x82, 0x78,
	0x3e, 0xc7, 0xef, 0xc2, 0x6b, 0x59, 0x10, 0x87, 0x01, 0x39, 0xa6, 0x75, 0x74, 0x0b, 0x6d, 0xae,
	0xd8, 0xb5, 0xec, 0xc1, 0x80, 0x1c, 0x53, 0xfc, 0x21, 0xdc, 0x3c, 0x67, 0xcc, 0x43, 0xe2, 0xd0,
	0xba, 0x26, 0x3d, 0xde, 0x3c, 0xeb, 0x21, 0x0f, 0xf1, 0x6d, 0xa8, 0x71, 0x1a, 0x4d, 0x3d, 0x87,
	0x1e, 0x1e, 0x31, 0x2e, 0xe4, 0x15, 0x25, 0xe9, 0xb0, 0xae, 0xf6, 0x77, 0xd5, 0x76, 0x0c, 0x27,
	0x35, 0x9d, 0x05, 0x2f, 0x27, 0x70, 0xd4, 0xc1, 0x2c, 0x6e, 0x1d, 0x96, 0x1d, 0x7f, 0xc2, 0x05,
	0x8d, 0xea, 0x4b, 0xd2, 0x24, 0xfd, 0xc4, 0x37, 0xa1, 0x22, 0x68, 0x40, 0x02, 0x51, 0xaf, 0xc8,
	0x03, 0xf5, 0xa5, 0xff, 0xa5, 0x41, 0x35, 0xcd, 0xc0, 0xbe, 0x20, 0x62, 0xc2, 0x33, 0xa6, 0x28,
	0x6b, 0x9a, 0x0d, 0xae, 0xe5, 0x83, 0x6f, 0xc0, 0x4a, 0x44, 0xbf, 0x9b, 0x50, 0x2e, 0x3c, 0x57,
	0xf1, 0x98, 0x6d, 0xe0, 0x1d, 0x58, 0x61, 0x21, 0x8d, 0x64, 0x5d, 0x24, 0xf2, 0x6a, 0xeb, 0xb6,
	0xf1, 0xa2, 0x9a, 0x1a, 0xfd, 0xce, 0x5e, 0xea, 0x60, 0xcf, 0x7c, 0xf1, 0x1e, 0x2c, 0x71, 0x41,
	0x04, 0x95, 0xdc, 0xaa, 0xad, 0x8f, 0xe7, 0x05, 0xc9, 0xb2, 0x32, 0xec, 0x04, 0x4f, 0xfc, 0x45,
	0xed, 0x24, 0x0e, 0xc6, 0x50, 0x0e, 0x98, 0xa0, 0x2a, 0x25, 0x72, 0xad, 0xdb, 0xb0, 0x96, 0x35,
	0xc5, 0xab, 0xb0, 0x3c, 0xb4, 0x06, 0xdd, 0xde, 0x60, 0xa7, 0x76, 0x03, 0xaf, 0xc1, 0x2b, 0xed,
	0xe1, 0xd0, 0xde, 0xfb, 0xd2, 0xea, 0xd6, 0x10, 0x06, 0xa8, 0x74, 0xad, 0x41, 0xcf, 0xea, 0xd6,
	0x34, 0xfc, 0x2a, 0xac, 0x0c, 0xbf, 0xe8, 0xf4, 0x7b, 0xfb, 0xbb, 0x56, 0xb7, 0x56, 0x8a, 0x0d,
	0xb7, 0xdb, 0x83, 0x6d, 0xab, 0x6f, 0x75, 0x6b, 0x65, 0xfd, 0x1e, 0xe0, 0xbe, 0xc7, 0x45, 0x82,
	0x87, 0xab, 0xf0, 0xd9, 0x7c, 0xa2, 0x8b, 0x8a, 0xa5, 0xe5, 0x8a, 0xf5, 0xac, 0x04, 0xaf, 0xe7,
	0x02, 0xf1, 0x90, 0x05, 0x9c, 0xbe, 0x20, 0x92, 0x07, 0xeb, 0x21, 0x0d, 0x5c, 0x2f, 0x18, 0x1f,
	0x8a, 0xc4, 0xa9, 0xae, 0xdd, 0x2a, 0x6d, 0xae, 0xb6, 0x3e, 0x99, 0x93, 0xbc, 0xf3, 0xb7, 0x18,
	0xc3, 0x24, 0x50, 0xba, 0x5d, 0x0d, 0x73, 0xdf, 0x8d, 0xa7, 0x1a, 0x54, 0xf3, 0x26, 0xf9, 0xbe,
	0x40, 0x67, 0xfb, 0xe2, 0x3f, 0x85, 0xa6, 0x15, 0x16, 0x5a, 0xa9, 0xa8, 0xd0, 0xca, 0x05, 0x84,
	0xb6, 0x74, 0x81, 0xd0, 0x72, 0x3d, 0x5d, 0xf9, 0xff, 0x3d, 0xad, 0x3f, 0x04, 0x48, 0x1b, 0xb5,
	0xe7, 0xce, 0x49, 0xd8, 0xc5, 0x02, 0x9c, 0x35, 0x4c, 0x29, 0xd7, 0x30, 0xdf, 0x03, 0x4e, 0xa3,
	0xdb, 0x94, 0x33, 0x7f, 0x22, 0x75, 0x74, 0xdd, 0x02, 0x4f, 0x65, 0x54, 0xce, 0xc8, 0xe8, 0x27,
	0xf9, 0xb2, 0x0e, 0x27, 0x23, 0xdf, 0xe3, 0x47, 0x6d, 0x47, 0xde, 0x7b, 0xcd, 0xec, 0xf0, 0x47,
	0x50, 0x12, 0x3e, 0x97, 0xd7, 0xae, 0xb6, 0xde, 0x3e, 0x97, 0xfe, 0xf8, 0xd9, 0x8f, 0x33, 0x7f,
	0xd0, 0xdf, 0xdf, 0x57, 0xcf, 0xbe, 0x1d, 0x3b, 0x6c, 0xbd, 0x03, 0xab, 0x99, 0x6a, 0xc4, 0x32,
	0x6e, 0x1f, 0x1c, 0xb4, 0xb7, 0x77, 0x6b, 0x37, 0x12, 0x49, 0xcb, 0x35, 0x6a, 0xfd, 0xb2, 0x06,
	0x6f, 0xf4, 0x19, 0x71, 0x3b, 0xaa, 0xab, 0xee, 0xab, 0x72, 0xe2, 0xa7, 0x08, 0x2a, 0x6d, 0x21,
	0x88, 0x73, 0x84, 0xdf, 0xbf, 0xdc, 0x1b, 0xa4, 0x66, 0x4b, 0x63, 0xf3, 0x72, 0xe6, 0x3d, 0x57,
	0x1f, 0xfe, 0xf0, 0xe7, 0xdf, 0x3f, 0x6a, 0x9f, 0xea, 0x96, 0x1c, 0x5c, 0x92, 0x2f, 0x37, 0x4f,
	0x92, 0xc5, 0xa9, 0xf9, 0xdc, 0xcb, 0x54, 0x39, 0xe2, 0xe6, 0x89, 0x5a, 0x9d, 0x9a, 0x59, 0x25,
	0x98, 0x44, 0xe2, 0xbc, 0x8b, 0xb6, 0x24, 0xea, 0x18, 0xc7, 0xcb, 0x80, 0xda, 0xa5, 0x29, 0xea,
	0x3f, 0x10, 0xac, 0xef, 0x50, 0x91, 0x1b, 0x50, 0x97, 0xc6, 0xd3, 0x78, 0xaf, 0xc8, 0x88, 0xd0,
	0x89, 0x44, 0xff, 0x35, 0xfe, 0xea, 0x8a, 0xe8, 0x55, 0x4f, 0x9b, 0x27, 0xcf, 0x9b, 0xfb, 0xd4,
	0xe4, 0x09, 0xf4, 0x5f, 0x11, 0x54, 0xb6, 0x63, 0x2b, 0x7f, 0x61, 0x2c, 0x5c, 0xc9, 0xe2, 0x1b,
	0x7d, 0x11, 0x2c, 0x1c, 0x09, 0x3d, 0xae, 0xcb, 0xcf, 0x08, 0x96, 0x95, 0xba, 0xe7, 0xb7, 0x53,
	0xee, 0x19, 0x28, 0x48, 0xe7, 0x73, 0x49, 0xe7, 0x33, 0xfd, 0xde, 0x15, 0xe9, 0x84, 0x09, 0x86,
	0x18, 0xfb, 0x6f, 0x28, 0x99, 0xc7, 0x67, 0xa6, 0xd5, 0x07, 0x05, 0x46, 0xa2, 0xcc, 0x48, 0xa3,
	0x59, 0x78, 0x88, 0xea, 0x03, 0x49, 0x67, 0x17, 0x5f, 0x99, 0x4e, 0x82, 0x1d, 0x3f, 0x43, 0xb0,
	0xdc, 0x0e, 0xc3, 0x88, 0x4d, 0xe9, 0x5c, 0x02, 0xe7, 0x26, 0x41, 0xc1, 0x52, 0x50, 0x89, 0xfd,
	0x50, 0x7f, 0xb0, 0x80, 0xce, 0x22, 0x09, 0x87, 0xb8, 0x3c, 0xbf, 0x23, 0x28, 0x77, 0x69, 0xf0,
	0x64, 0xe1, 0x7c, 0x46, 0x92, 0xcf, 0x43, 0xfd, 0xfe, 0x02, 0xf8, 0xb8, 0x34, 0x78, 0x72, 0x17,
	0x6d, 0x75, 0xee, 0x3c, 0x68, 0x8e, 0x3d, 0x71, 0x34, 0x19, 0x19, 0x0e, 0x3b, 0x36, 0x15, 0x3a,
	0x8f, 0xa5, 0x2b, 0xf9, 0xdb, 0x12, 0xff, 0xa3, 0xcc, 0x6e, 0x9b, 0x36, 0x47, 0x15, 0xf9, 0x77,
	0x72, 0xe7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x8b, 0x75, 0x91, 0x0e, 0x0d, 0x00, 0x00,
}
