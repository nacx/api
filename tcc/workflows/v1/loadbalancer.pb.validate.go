// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loadbalancer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on LBTicketDetails with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LBTicketDetails) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for LoadbalancerName

	switch m.Target.(type) {

	case *LBTicketDetails_ServiceName:
		// no validation rules for ServiceName

	case *LBTicketDetails_DeploymentName:
		// no validation rules for DeploymentName

	}

	return nil
}

// LBTicketDetailsValidationError is the validation error returned by
// LBTicketDetails.Validate if the designated constraints aren't met.
type LBTicketDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBTicketDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBTicketDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBTicketDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBTicketDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBTicketDetailsValidationError) ErrorName() string { return "LBTicketDetailsValidationError" }

// Error satisfies the builtin error interface
func (e LBTicketDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBTicketDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBTicketDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBTicketDetailsValidationError{}

// Validate checks the field values on LBTicketStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LBTicketStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Requestid

	// no validation rules for Operation

	// no validation rules for State

	// no validation rules for Note

	return nil
}

// LBTicketStatusValidationError is the validation error returned by
// LBTicketStatus.Validate if the designated constraints aren't met.
type LBTicketStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBTicketStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBTicketStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBTicketStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBTicketStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBTicketStatusValidationError) ErrorName() string { return "LBTicketStatusValidationError" }

// Error satisfies the builtin error interface
func (e LBTicketStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBTicketStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBTicketStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBTicketStatusValidationError{}

// Validate checks the field values on ListTicketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTicketsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	return nil
}

// ListTicketsRequestValidationError is the validation error returned by
// ListTicketsRequest.Validate if the designated constraints aren't met.
type ListTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsRequestValidationError) ErrorName() string {
	return "ListTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsRequestValidationError{}

// Validate checks the field values on ListTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTicketsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	for idx, item := range m.GetPendingTickets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTicketsResponseValidationError{
					field:  fmt.Sprintf("PendingTickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTicketsResponseValidationError is the validation error returned by
// ListTicketsResponse.Validate if the designated constraints aren't met.
type ListTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsResponseValidationError) ErrorName() string {
	return "ListTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsResponseValidationError{}

// Validate checks the field values on LBTicketId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LBTicketId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Requestid

	return nil
}

// LBTicketIdValidationError is the validation error returned by
// LBTicketId.Validate if the designated constraints aren't met.
type LBTicketIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBTicketIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBTicketIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBTicketIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBTicketIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBTicketIdValidationError) ErrorName() string { return "LBTicketIdValidationError" }

// Error satisfies the builtin error interface
func (e LBTicketIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBTicketId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBTicketIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBTicketIdValidationError{}

// Validate checks the field values on LBTicketResolution with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LBTicketResolution) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Requestid

	// no validation rules for Note

	return nil
}

// LBTicketResolutionValidationError is the validation error returned by
// LBTicketResolution.Validate if the designated constraints aren't met.
type LBTicketResolutionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBTicketResolutionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBTicketResolutionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBTicketResolutionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBTicketResolutionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBTicketResolutionValidationError) ErrorName() string {
	return "LBTicketResolutionValidationError"
}

// Error satisfies the builtin error interface
func (e LBTicketResolutionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBTicketResolution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBTicketResolutionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBTicketResolutionValidationError{}

// Validate checks the field values on LBPublishAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LBPublishAction) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Requestid

	if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LBPublishActionValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LBPublishActionValidationError is the validation error returned by
// LBPublishAction.Validate if the designated constraints aren't met.
type LBPublishActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBPublishActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBPublishActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBPublishActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBPublishActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBPublishActionValidationError) ErrorName() string { return "LBPublishActionValidationError" }

// Error satisfies the builtin error interface
func (e LBPublishActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBPublishAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBPublishActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBPublishActionValidationError{}

// Validate checks the field values on ListTicketsResponse_PendingTickets with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListTicketsResponse_PendingTickets) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Requestid

	// no validation rules for LoadbalancerName

	// no validation rules for Operation

	switch m.Target.(type) {

	case *ListTicketsResponse_PendingTickets_ServiceName:
		// no validation rules for ServiceName

	case *ListTicketsResponse_PendingTickets_DeploymentName:
		// no validation rules for DeploymentName

	}

	return nil
}

// ListTicketsResponse_PendingTicketsValidationError is the validation error
// returned by ListTicketsResponse_PendingTickets.Validate if the designated
// constraints aren't met.
type ListTicketsResponse_PendingTicketsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsResponse_PendingTicketsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsResponse_PendingTicketsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsResponse_PendingTicketsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsResponse_PendingTicketsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsResponse_PendingTicketsValidationError) ErrorName() string {
	return "ListTicketsResponse_PendingTicketsValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsResponse_PendingTicketsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsResponse_PendingTickets.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsResponse_PendingTicketsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsResponse_PendingTicketsValidationError{}
