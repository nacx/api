// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: loadbalancer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Id

	// no validation rules for Application

	return nil
}

// CreateTicketRequestValidationError is the validation error returned by
// CreateTicketRequest.Validate if the designated constraints aren't met.
type CreateTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTicketRequestValidationError) ErrorName() string {
	return "CreateTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTicketRequestValidationError{}

// Validate checks the field values on GetTicketStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTicketStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Loadbalancer

	// no validation rules for Id

	return nil
}

// GetTicketStatusRequestValidationError is the validation error returned by
// GetTicketStatusRequest.Validate if the designated constraints aren't met.
type GetTicketStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTicketStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTicketStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTicketStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTicketStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTicketStatusRequestValidationError) ErrorName() string {
	return "GetTicketStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTicketStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTicketStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTicketStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTicketStatusRequestValidationError{}

// Validate checks the field values on CancelTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CancelTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Loadbalancer

	// no validation rules for Id

	return nil
}

// CancelTicketRequestValidationError is the validation error returned by
// CancelTicketRequest.Validate if the designated constraints aren't met.
type CancelTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelTicketRequestValidationError) ErrorName() string {
	return "CancelTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelTicketRequestValidationError{}

// Validate checks the field values on TicketStatus with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TicketStatus) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Loadbalancer

	// no validation rules for Id

	// no validation rules for Application

	// no validation rules for Action

	// no validation rules for State

	// no validation rules for Note

	return nil
}

// TicketStatusValidationError is the validation error returned by
// TicketStatus.Validate if the designated constraints aren't met.
type TicketStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TicketStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TicketStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TicketStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TicketStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TicketStatusValidationError) ErrorName() string { return "TicketStatusValidationError" }

// Error satisfies the builtin error interface
func (e TicketStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTicketStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TicketStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TicketStatusValidationError{}

// Validate checks the field values on ListTicketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTicketsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Id

	return nil
}

// ListTicketsRequestValidationError is the validation error returned by
// ListTicketsRequest.Validate if the designated constraints aren't met.
type ListTicketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsRequestValidationError) ErrorName() string {
	return "ListTicketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsRequestValidationError{}

// Validate checks the field values on ListTicketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTicketsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTickets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTicketsResponseValidationError{
					field:  fmt.Sprintf("Tickets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTicketsResponseValidationError is the validation error returned by
// ListTicketsResponse.Validate if the designated constraints aren't met.
type ListTicketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTicketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTicketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTicketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTicketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTicketsResponseValidationError) ErrorName() string {
	return "ListTicketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTicketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTicketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTicketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTicketsResponseValidationError{}

// Validate checks the field values on ResolveTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResolveTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Loadbalancer

	// no validation rules for Id

	// no validation rules for Note

	return nil
}

// ResolveTicketRequestValidationError is the validation error returned by
// ResolveTicketRequest.Validate if the designated constraints aren't met.
type ResolveTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResolveTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResolveTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResolveTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResolveTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResolveTicketRequestValidationError) ErrorName() string {
	return "ResolveTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResolveTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResolveTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResolveTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResolveTicketRequestValidationError{}

// Validate checks the field values on PublishTicketRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublishTicketRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Environment

	// no validation rules for Loadbalancer

	// no validation rules for Id

	if v, ok := interface{}(m.GetTls()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishTicketRequestValidationError{
				field:  "Tls",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PublishTicketRequestValidationError is the validation error returned by
// PublishTicketRequest.Validate if the designated constraints aren't met.
type PublishTicketRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishTicketRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishTicketRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishTicketRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishTicketRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishTicketRequestValidationError) ErrorName() string {
	return "PublishTicketRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishTicketRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishTicketRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishTicketRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishTicketRequestValidationError{}
