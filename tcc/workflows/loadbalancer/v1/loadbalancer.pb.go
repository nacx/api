// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tcc/workflows/loadbalancer/v1/loadbalancer.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/tetrateio/api/tcc/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action int32

const (
	Action_ATTACH Action = 0
	Action_DETACH Action = 1
)

var Action_name = map[int32]string{
	0: "ATTACH",
	1: "DETACH",
}

var Action_value = map[string]int32{
	"ATTACH": 0,
	"DETACH": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{0}
}

type TicketStatus_RequestState int32

const (
	TicketStatus_PENDING   TicketStatus_RequestState = 0
	TicketStatus_APPROVED  TicketStatus_RequestState = 1
	TicketStatus_DENIED    TicketStatus_RequestState = 2
	TicketStatus_PUBLISHED TicketStatus_RequestState = 3
	TicketStatus_CANCELED  TicketStatus_RequestState = 4
)

var TicketStatus_RequestState_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "PUBLISHED",
	4: "CANCELED",
}

var TicketStatus_RequestState_value = map[string]int32{
	"PENDING":   0,
	"APPROVED":  1,
	"DENIED":    2,
	"PUBLISHED": 3,
	"CANCELED":  4,
}

func (x TicketStatus_RequestState) String() string {
	return proto.EnumName(TicketStatus_RequestState_name, int32(x))
}

func (TicketStatus_RequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{3, 0}
}

type CreateTicketRequest struct {
	Parent               string   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Application          string   `protobuf:"bytes,5,opt,name=application,proto3" json:"application,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTicketRequest) Reset()         { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()    {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{0}
}
func (m *CreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketRequest.Merge(m, src)
}
func (m *CreateTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketRequest proto.InternalMessageInfo

func (m *CreateTicketRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CreateTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateTicketRequest) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

type GetTicketStatusRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string   `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTicketStatusRequest) Reset()         { *m = GetTicketStatusRequest{} }
func (m *GetTicketStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetTicketStatusRequest) ProtoMessage()    {}
func (*GetTicketStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{1}
}
func (m *GetTicketStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTicketStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTicketStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTicketStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTicketStatusRequest.Merge(m, src)
}
func (m *GetTicketStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTicketStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTicketStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTicketStatusRequest proto.InternalMessageInfo

func (m *GetTicketStatusRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTicketStatusRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *GetTicketStatusRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *GetTicketStatusRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *GetTicketStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CancelTicketRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string   `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelTicketRequest) Reset()         { *m = CancelTicketRequest{} }
func (m *CancelTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CancelTicketRequest) ProtoMessage()    {}
func (*CancelTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{2}
}
func (m *CancelTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTicketRequest.Merge(m, src)
}
func (m *CancelTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTicketRequest proto.InternalMessageInfo

func (m *CancelTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CancelTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CancelTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *CancelTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TicketStatus struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string                    `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string                    `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string                    `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string                    `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Application          string                    `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	Action               Action                    `protobuf:"varint,7,opt,name=action,proto3,enum=tetrateio.api.tcc.workflows.loadbalancer.v1.Action" json:"action,omitempty"`
	State                TicketStatus_RequestState `protobuf:"varint,8,opt,name=state,proto3,enum=tetrateio.api.tcc.workflows.loadbalancer.v1.TicketStatus_RequestState" json:"state,omitempty"`
	Note                 string                    `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TicketStatus) Reset()         { *m = TicketStatus{} }
func (m *TicketStatus) String() string { return proto.CompactTextString(m) }
func (*TicketStatus) ProtoMessage()    {}
func (*TicketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{3}
}
func (m *TicketStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TicketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TicketStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TicketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketStatus.Merge(m, src)
}
func (m *TicketStatus) XXX_Size() int {
	return m.Size()
}
func (m *TicketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TicketStatus proto.InternalMessageInfo

func (m *TicketStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TicketStatus) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *TicketStatus) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *TicketStatus) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *TicketStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TicketStatus) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *TicketStatus) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_ATTACH
}

func (m *TicketStatus) GetState() TicketStatus_RequestState {
	if m != nil {
		return m.State
	}
	return TicketStatus_PENDING
}

func (m *TicketStatus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ListTicketsRequest struct {
	Parent               string   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string   `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTicketsRequest) Reset()         { *m = ListTicketsRequest{} }
func (m *ListTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTicketsRequest) ProtoMessage()    {}
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{4}
}
func (m *ListTicketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTicketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsRequest.Merge(m, src)
}
func (m *ListTicketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsRequest proto.InternalMessageInfo

func (m *ListTicketsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTicketsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListTicketsRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ListTicketsRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

type ListTicketsResponse struct {
	Tickets              []*TicketStatus `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTicketsResponse) Reset()         { *m = ListTicketsResponse{} }
func (m *ListTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse) ProtoMessage()    {}
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{5}
}
func (m *ListTicketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTicketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse.Merge(m, src)
}
func (m *ListTicketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse proto.InternalMessageInfo

func (m *ListTicketsResponse) GetTickets() []*TicketStatus {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type ResolveTicketRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant       string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer string `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id           string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// optional description (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveTicketRequest) Reset()         { *m = ResolveTicketRequest{} }
func (m *ResolveTicketRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveTicketRequest) ProtoMessage()    {}
func (*ResolveTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{6}
}
func (m *ResolveTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveTicketRequest.Merge(m, src)
}
func (m *ResolveTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResolveTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveTicketRequest proto.InternalMessageInfo

func (m *ResolveTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResolveTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ResolveTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ResolveTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *ResolveTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResolveTicketRequest) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type PublishTicketRequest struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string          `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string          `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string          `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string          `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Tls                  *v1.TLSSettings `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PublishTicketRequest) Reset()         { *m = PublishTicketRequest{} }
func (m *PublishTicketRequest) String() string { return proto.CompactTextString(m) }
func (*PublishTicketRequest) ProtoMessage()    {}
func (*PublishTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_da22e0d38e8cafc0, []int{7}
}
func (m *PublishTicketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishTicketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishTicketRequest.Merge(m, src)
}
func (m *PublishTicketRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishTicketRequest proto.InternalMessageInfo

func (m *PublishTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublishTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *PublishTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *PublishTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *PublishTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublishTicketRequest) GetTls() *v1.TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

func init() {
	proto.RegisterEnum("tetrateio.api.tcc.workflows.loadbalancer.v1.Action", Action_name, Action_value)
	proto.RegisterEnum("tetrateio.api.tcc.workflows.loadbalancer.v1.TicketStatus_RequestState", TicketStatus_RequestState_name, TicketStatus_RequestState_value)
	proto.RegisterType((*CreateTicketRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.CreateTicketRequest")
	proto.RegisterType((*GetTicketStatusRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.GetTicketStatusRequest")
	proto.RegisterType((*CancelTicketRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.CancelTicketRequest")
	proto.RegisterType((*TicketStatus)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.TicketStatus")
	proto.RegisterType((*ListTicketsRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.ListTicketsRequest")
	proto.RegisterType((*ListTicketsResponse)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.ListTicketsResponse")
	proto.RegisterType((*ResolveTicketRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.ResolveTicketRequest")
	proto.RegisterType((*PublishTicketRequest)(nil), "tetrateio.api.tcc.workflows.loadbalancer.v1.PublishTicketRequest")
}

func init() {
	proto.RegisterFile("tcc/workflows/loadbalancer/v1/loadbalancer.proto", fileDescriptor_da22e0d38e8cafc0)
}

var fileDescriptor_da22e0d38e8cafc0 = []byte{
	// 1010 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x97, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xc7, 0x3b, 0x6b, 0x67, 0x9d, 0x4c, 0x42, 0x6b, 0x4d, 0x23, 0x63, 0xb9, 0x10, 0xac, 0x15,
	0x42, 0x69, 0x2a, 0xef, 0xb6, 0xae, 0x84, 0xd4, 0x5e, 0x5a, 0xbf, 0xd1, 0x46, 0x58, 0xc1, 0x5a,
	0x87, 0x17, 0x41, 0x09, 0x8c, 0x77, 0x27, 0xce, 0x92, 0xf5, 0xcc, 0x76, 0x67, 0xec, 0x60, 0xa2,
	0xa0, 0x8a, 0x03, 0x07, 0xae, 0x7c, 0x06, 0xae, 0x7c, 0x01, 0x24, 0x6e, 0x48, 0x1c, 0x8b, 0xb8,
	0x21, 0x21, 0xa1, 0x08, 0xbe, 0x44, 0x2e, 0xa0, 0x9d, 0x9d, 0x98, 0x75, 0xe2, 0x22, 0x9c, 0x16,
	0xa3, 0xf4, 0xb6, 0xb3, 0xf3, 0xec, 0xb3, 0xff, 0xdf, 0xf3, 0x32, 0x2f, 0xf0, 0xba, 0x70, 0x1c,
	0x6b, 0x8f, 0x85, 0xbb, 0xdb, 0x3e, 0xdb, 0xe3, 0x96, 0xcf, 0xb0, 0xdb, 0xc1, 0x3e, 0xa6, 0x0e,
	0x09, 0xad, 0xc1, 0x8d, 0xb1, 0xb1, 0x19, 0x84, 0x4c, 0x30, 0x74, 0x4d, 0x10, 0x11, 0x62, 0x41,
	0x3c, 0x66, 0xe2, 0xc0, 0x33, 0x85, 0xe3, 0x98, 0xa3, 0xef, 0xcd, 0x31, 0xfb, 0xc1, 0x8d, 0xc2,
	0x4b, 0x5d, 0xc6, 0xba, 0x3e, 0xb1, 0x70, 0xe0, 0x59, 0x98, 0x52, 0x26, 0xb0, 0xf0, 0x18, 0xe5,
	0xb1, 0xab, 0xc2, 0x15, 0x35, 0x2b, 0x47, 0x9d, 0xfe, 0xb6, 0x45, 0x7a, 0x81, 0x18, 0xaa, 0xc9,
	0x4a, 0xd7, 0x13, 0x3b, 0xfd, 0x8e, 0xe9, 0xb0, 0x9e, 0x45, 0xe8, 0x80, 0x0d, 0x83, 0x90, 0x7d,
	0x3a, 0x8c, 0x6d, 0x9d, 0x52, 0x97, 0xd0, 0xd2, 0x00, 0xfb, 0x9e, 0x8b, 0x05, 0xb1, 0x4e, 0x3d,
	0x28, 0x17, 0x2f, 0x47, 0x70, 0x0e, 0x0b, 0x49, 0x84, 0x22, 0x7c, 0xce, 0x89, 0x10, 0x1e, 0xed,
	0xaa, 0xdf, 0x1b, 0x3f, 0x01, 0x78, 0xb9, 0x16, 0x12, 0x2c, 0xc8, 0xa6, 0xe7, 0xec, 0x12, 0x61,
	0x93, 0x87, 0x7d, 0xc2, 0x05, 0xca, 0x41, 0x3d, 0xc0, 0x21, 0xa1, 0x22, 0x0f, 0x8a, 0x60, 0x75,
	0xc1, 0x56, 0x23, 0xf4, 0x0a, 0xd4, 0x05, 0xa1, 0x98, 0x8a, 0xbc, 0x16, 0xbd, 0xaf, 0x66, 0x8e,
	0xaa, 0xe9, 0x50, 0xcb, 0x02, 0x5b, 0xbd, 0x46, 0x57, 0xe1, 0x22, 0xa1, 0x03, 0x2f, 0x64, 0xb4,
	0x17, 0x7d, 0x9d, 0x1a, 0xb7, 0x4a, 0xce, 0xa1, 0x6b, 0x50, 0xf3, 0xdc, 0x7c, 0x5a, 0x5a, 0x5c,
	0x39, 0xaa, 0xe6, 0xc3, 0x5c, 0x79, 0x79, 0xf5, 0x8e, 0x77, 0x75, 0xeb, 0x83, 0xeb, 0xa5, 0x5b,
	0xb8, 0xf4, 0x99, 0xf9, 0xf9, 0x83, 0xd2, 0x47, 0x1f, 0xae, 0xbd, 0x6a, 0x6b, 0x9e, 0x1b, 0xf9,
	0xc5, 0x41, 0xe0, 0x7b, 0x8e, 0x8c, 0x5e, 0x7e, 0xee, 0x84, 0xdf, 0xc4, 0x9c, 0xf1, 0x3d, 0x80,
	0xb9, 0x7b, 0x44, 0xc4, 0x40, 0x6d, 0x81, 0x45, 0x9f, 0x1f, 0x63, 0x21, 0x98, 0xa6, 0xb8, 0x47,
	0x14, 0x94, 0x7c, 0x7e, 0xc6, 0x48, 0x4b, 0xc9, 0xf4, 0x2b, 0xb8, 0x91, 0xed, 0xd8, 0x24, 0x7a,
	0x51, 0xf2, 0x9f, 0x20, 0xd1, 0x3c, 0xd7, 0xf8, 0x2e, 0x4a, 0x4a, 0x64, 0xe3, 0x8f, 0x27, 0xe5,
	0x7c, 0xa8, 0xff, 0x21, 0x05, 0x97, 0x92, 0xb1, 0x9f, 0x28, 0x3b, 0x37, 0x2e, 0x7b, 0xa4, 0xb6,
	0x38, 0x41, 0xed, 0xb8, 0x48, 0x63, 0x92, 0xc8, 0x13, 0xda, 0x2e, 0xfe, 0xad, 0x4d, 0x16, 0x4f,
	0x71, 0xbc, 0x78, 0xf4, 0xd8, 0x6b, 0xe2, 0x15, 0x7a, 0x13, 0xea, 0xd8, 0x91, 0x93, 0x99, 0x22,
	0x58, 0xbd, 0x58, 0xbe, 0x69, 0x4e, 0xd1, 0xe2, 0x66, 0x45, 0x7e, 0x6a, 0x2b, 0x17, 0xe8, 0x01,
	0x9c, 0xe3, 0x02, 0x0b, 0x92, 0x9f, 0x97, 0xbe, 0xde, 0x98, 0xca, 0x57, 0x32, 0x74, 0xa6, 0xca,
	0x7c, 0x34, 0x22, 0x76, 0xec, 0x54, 0x86, 0x93, 0x09, 0x92, 0x5f, 0x50, 0xe1, 0x64, 0x82, 0x18,
	0x36, 0x5c, 0x4a, 0x9a, 0xa2, 0x45, 0x98, 0x69, 0x35, 0x36, 0xea, 0xeb, 0x1b, 0xf7, 0xb2, 0x17,
	0xd0, 0x12, 0x9c, 0xaf, 0xb4, 0x5a, 0xf6, 0x5b, 0xef, 0x34, 0xea, 0x59, 0x80, 0x20, 0xd4, 0xeb,
	0x8d, 0x8d, 0xf5, 0x46, 0x3d, 0xab, 0xa1, 0x17, 0xe0, 0x42, 0xeb, 0xed, 0x6a, 0x73, 0xbd, 0x7d,
	0xbf, 0x51, 0xcf, 0xa6, 0x22, 0xc3, 0x5a, 0x65, 0xa3, 0xd6, 0x68, 0x36, 0xea, 0xd9, 0xb4, 0xf1,
	0x0d, 0x80, 0xa8, 0xe9, 0x71, 0xd5, 0x47, 0x7c, 0xb6, 0x2b, 0xc3, 0xbf, 0x2f, 0x44, 0xe3, 0x13,
	0x78, 0x79, 0x4c, 0x26, 0x0f, 0x18, 0xe5, 0x04, 0xb5, 0x61, 0x46, 0xc4, 0xaf, 0xf2, 0xa0, 0x98,
	0x5a, 0x5d, 0x2c, 0xdf, 0x3a, 0x73, 0x1a, 0xec, 0x63, 0x4f, 0xc6, 0x63, 0x00, 0x97, 0x6d, 0xc2,
	0x99, 0x3f, 0x20, 0xe7, 0xb0, 0x35, 0x47, 0xa5, 0xa3, 0x27, 0x4a, 0xe7, 0x91, 0x06, 0x97, 0x5b,
	0xfd, 0x8e, 0xef, 0xf1, 0x9d, 0xf3, 0x88, 0x54, 0x85, 0x29, 0xe1, 0x73, 0x49, 0xb4, 0x58, 0x7e,
	0x6d, 0x42, 0x8a, 0xa3, 0xbd, 0x4f, 0x26, 0xb4, 0xd9, 0x6e, 0xab, 0xbd, 0xaf, 0x3a, 0x7f, 0x54,
	0x9d, 0xfb, 0x0a, 0x44, 0x2e, 0xa2, 0x8f, 0xd7, 0x8a, 0x50, 0x8f, 0x3b, 0x38, 0x6a, 0x8e, 0xca,
	0xe6, 0x66, 0xa5, 0x76, 0x3f, 0x7b, 0x21, 0x6e, 0x14, 0xf9, 0x0c, 0xca, 0xdf, 0x5e, 0x82, 0xcb,
	0x4d, 0x86, 0xdd, 0xaa, 0xd2, 0xf3, 0xae, 0xaa, 0x1b, 0xf4, 0x07, 0x80, 0x7a, 0x45, 0x08, 0xec,
	0xec, 0xa0, 0xbb, 0x53, 0xd5, 0xd7, 0x84, 0x4d, 0xb7, 0x70, 0xf6, 0x0a, 0x35, 0xb6, 0xbe, 0xf8,
	0xf9, 0xf7, 0xaf, 0xb5, 0xf7, 0x8c, 0xb6, 0xdc, 0xe6, 0x65, 0x2e, 0xb8, 0xb5, 0x1f, 0x3f, 0x1c,
	0x58, 0x89, 0xb0, 0x73, 0x6b, 0x3f, 0x31, 0x3a, 0x78, 0xc2, 0xb9, 0x87, 0x5b, 0xfb, 0x9e, 0x7b,
	0x60, 0x61, 0x49, 0x76, 0x1b, 0xac, 0x49, 0xce, 0x3a, 0x79, 0x5e, 0x39, 0x5d, 0x72, 0xcc, 0xf9,
	0xa5, 0x06, 0x2f, 0x9d, 0x38, 0x3b, 0xa0, 0xda, 0x54, 0x72, 0x27, 0x9f, 0x3c, 0x9e, 0x86, 0x99,
	0x4b, 0xe6, 0x1e, 0xda, 0x7d, 0x66, 0xcc, 0xc9, 0xe1, 0x81, 0x15, 0xc6, 0x12, 0x55, 0x2c, 0x78,
	0x0c, 0xfd, 0xa7, 0x5a, 0xfd, 0x5b, 0x84, 0xba, 0x1e, 0xed, 0xaa, 0xd5, 0x15, 0xdd, 0x99, 0x0a,
	0xe3, 0xf4, 0xf6, 0x51, 0xb8, 0x7b, 0x76, 0x07, 0xf1, 0xc2, 0x6e, 0x6c, 0xcb, 0x70, 0x7c, 0x8c,
	0xb6, 0xfe, 0xa3, 0x70, 0x04, 0x31, 0x31, 0x7a, 0xa4, 0xc1, 0x4c, 0x25, 0x08, 0x42, 0x36, 0x20,
	0xa8, 0x32, 0x95, 0xea, 0x49, 0x3b, 0xc4, 0xd3, 0x14, 0xc0, 0x9e, 0x24, 0x7e, 0x68, 0xf8, 0x33,
	0x29, 0x00, 0x1c, 0x33, 0x47, 0xdd, 0x70, 0x04, 0x60, 0xba, 0x4e, 0xe8, 0xf0, 0x7f, 0xe6, 0x17,
	0x92, 0x9f, 0x1a, 0xde, 0x4c, 0xf8, 0x5d, 0x42, 0x87, 0x11, 0xfc, 0x2f, 0x00, 0xea, 0xf1, 0x29,
	0x7c, 0xda, 0x25, 0xef, 0xf4, 0xd1, 0xbd, 0x90, 0x33, 0xe3, 0x7b, 0x9e, 0x79, 0x7c, 0xcf, 0x33,
	0x1b, 0xd1, 0x3d, 0xcf, 0x18, 0x48, 0xb4, 0xc0, 0x98, 0x4d, 0x6f, 0x3b, 0x52, 0x59, 0x04, 0xf7,
	0x2b, 0x80, 0x19, 0xb5, 0xeb, 0x4f, 0x99, 0xdc, 0x49, 0x67, 0x85, 0x27, 0xe2, 0xcd, 0xb6, 0x72,
	0x83, 0x58, 0xda, 0x6d, 0xb0, 0x56, 0xad, 0xff, 0x78, 0xb8, 0x02, 0x1e, 0x1f, 0xae, 0x80, 0xdf,
	0x0e, 0x57, 0xc0, 0xfb, 0xaf, 0x27, 0xee, 0xd1, 0x23, 0x56, 0x79, 0x21, 0xff, 0xc7, 0xab, 0x7f,
	0x47, 0x97, 0x38, 0x37, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xc5, 0x3b, 0x72, 0x22, 0x10,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerWorkflowClient is the client API for LoadBalancerWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerWorkflowClient interface {
	// clang-format off
	Attach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Detach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	GetTicketStatus(ctx context.Context, in *GetTicketStatusRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	Approve(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Deny(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Cancel(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*types.Empty, error)
	// LB owner calls this API with additional settings like TLS, to finally expose the service on the
	// load balancer or remove a detached service
	Publish(ctx context.Context, in *PublishTicketRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type loadBalancerWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerWorkflowClient(cc *grpc.ClientConn) LoadBalancerWorkflowClient {
	return &loadBalancerWorkflowClient{cc}
}

func (c *loadBalancerWorkflowClient) Attach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Detach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) GetTicketStatus(ctx context.Context, in *GetTicketStatusRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/GetTicketStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/ListPendingTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Approve(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Deny(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Cancel(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Publish(ctx context.Context, in *PublishTicketRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerWorkflowServer is the server API for LoadBalancerWorkflow service.
type LoadBalancerWorkflowServer interface {
	// clang-format off
	Attach(context.Context, *CreateTicketRequest) (*TicketStatus, error)
	Detach(context.Context, *CreateTicketRequest) (*TicketStatus, error)
	GetTicketStatus(context.Context, *GetTicketStatusRequest) (*TicketStatus, error)
	ListPendingTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	Approve(context.Context, *ResolveTicketRequest) (*TicketStatus, error)
	Deny(context.Context, *ResolveTicketRequest) (*TicketStatus, error)
	Cancel(context.Context, *CancelTicketRequest) (*types.Empty, error)
	// LB owner calls this API with additional settings like TLS, to finally expose the service on the
	// load balancer or remove a detached service
	Publish(context.Context, *PublishTicketRequest) (*types.Empty, error)
}

// UnimplementedLoadBalancerWorkflowServer can be embedded to have forward compatible implementations.
type UnimplementedLoadBalancerWorkflowServer struct {
}

func (*UnimplementedLoadBalancerWorkflowServer) Attach(ctx context.Context, req *CreateTicketRequest) (*TicketStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attach not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) Detach(ctx context.Context, req *CreateTicketRequest) (*TicketStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detach not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) GetTicketStatus(ctx context.Context, req *GetTicketStatusRequest) (*TicketStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketStatus not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) ListPendingTickets(ctx context.Context, req *ListTicketsRequest) (*ListTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingTickets not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) Approve(ctx context.Context, req *ResolveTicketRequest) (*TicketStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) Deny(ctx context.Context, req *ResolveTicketRequest) (*TicketStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deny not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) Cancel(ctx context.Context, req *CancelTicketRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedLoadBalancerWorkflowServer) Publish(ctx context.Context, req *PublishTicketRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func RegisterLoadBalancerWorkflowServer(s *grpc.Server, srv LoadBalancerWorkflowServer) {
	s.RegisterService(&_LoadBalancerWorkflow_serviceDesc, srv)
}

func _LoadBalancerWorkflow_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_GetTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/GetTicketStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, req.(*GetTicketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_ListPendingTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/ListPendingTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, req.(*ResolveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, req.(*ResolveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, req.(*CancelTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, req.(*PublishTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancerWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow",
	HandlerType: (*LoadBalancerWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _LoadBalancerWorkflow_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _LoadBalancerWorkflow_Detach_Handler,
		},
		{
			MethodName: "GetTicketStatus",
			Handler:    _LoadBalancerWorkflow_GetTicketStatus_Handler,
		},
		{
			MethodName: "ListPendingTickets",
			Handler:    _LoadBalancerWorkflow_ListPendingTickets_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _LoadBalancerWorkflow_Approve_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _LoadBalancerWorkflow_Deny_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _LoadBalancerWorkflow_Cancel_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _LoadBalancerWorkflow_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcc/workflows/loadbalancer/v1/loadbalancer.proto",
}

func (m *CreateTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTicketStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTicketStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTicketStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TicketStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TicketStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x4a
	}
	if m.State != 0 {
		i = encodeVarintLoadbalancer(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Action != 0 {
		i = encodeVarintLoadbalancer(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Application) > 0 {
		i -= len(m.Application)
		copy(dAtA[i:], m.Application)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Application)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTicketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTicketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTicketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTicketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTicketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTicketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tickets) > 0 {
		for iNdEx := len(m.Tickets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tickets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLoadbalancer(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResolveTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublishTicketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishTicketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublishTicketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLoadbalancer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Loadbalancer) > 0 {
		i -= len(m.Loadbalancer)
		copy(dAtA[i:], m.Loadbalancer)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Loadbalancer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLoadbalancer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLoadbalancer(dAtA []byte, offset int, v uint64) int {
	offset -= sovLoadbalancer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetTicketStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TicketStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Application)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovLoadbalancer(uint64(m.Action))
	}
	if m.State != 0 {
		n += 1 + sovLoadbalancer(uint64(m.State))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTicketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListTicketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tickets) > 0 {
		for _, e := range m.Tickets {
			l = e.Size()
			n += 1 + l + sovLoadbalancer(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResolveTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublishTicketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Loadbalancer)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovLoadbalancer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLoadbalancer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLoadbalancer(x uint64) (n int) {
	return sovLoadbalancer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTicketStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTicketStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTicketStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TicketStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TicketStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TicketStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Application", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Application = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TicketStatus_RequestState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTicketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTicketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTicketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTicketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTicketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTicketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tickets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tickets = append(m.Tickets, &TicketStatus{})
			if err := m.Tickets[len(m.Tickets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishTicketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishTicketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishTicketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loadbalancer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Loadbalancer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &v1.TLSSettings{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLoadbalancer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthLoadbalancer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLoadbalancer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLoadbalancer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLoadbalancer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLoadbalancer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthLoadbalancer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLoadbalancer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLoadbalancer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthLoadbalancer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLoadbalancer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLoadbalancer   = fmt.Errorf("proto: integer overflow")
)
