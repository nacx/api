// Code generated by protoc-gen-go. DO NOT EDIT.
// source: loadbalancer.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/workflows/loadbalancer/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import v1 "github.com/tetrateio/tetrate/api/tcc/core/v1"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Action int32

const (
	Action_ATTACH Action = 0
	Action_DETACH Action = 1
)

var Action_name = map[int32]string{
	0: "ATTACH",
	1: "DETACH",
}
var Action_value = map[string]int32{
	"ATTACH": 0,
	"DETACH": 1,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}
func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{0}
}

type TicketStatus_RequestState int32

const (
	TicketStatus_PENDING   TicketStatus_RequestState = 0
	TicketStatus_APPROVED  TicketStatus_RequestState = 1
	TicketStatus_DENIED    TicketStatus_RequestState = 2
	TicketStatus_PUBLISHED TicketStatus_RequestState = 3
	TicketStatus_CANCELED  TicketStatus_RequestState = 4
)

var TicketStatus_RequestState_name = map[int32]string{
	0: "PENDING",
	1: "APPROVED",
	2: "DENIED",
	3: "PUBLISHED",
	4: "CANCELED",
}
var TicketStatus_RequestState_value = map[string]int32{
	"PENDING":   0,
	"APPROVED":  1,
	"DENIED":    2,
	"PUBLISHED": 3,
	"CANCELED":  4,
}

func (x TicketStatus_RequestState) String() string {
	return proto.EnumName(TicketStatus_RequestState_name, int32(x))
}
func (TicketStatus_RequestState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{3, 0}
}

type CreateTicketRequest struct {
	Parent               string   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Application          string   `protobuf:"bytes,5,opt,name=application,proto3" json:"application,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTicketRequest) Reset()         { *m = CreateTicketRequest{} }
func (m *CreateTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTicketRequest) ProtoMessage()    {}
func (*CreateTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{0}
}
func (m *CreateTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTicketRequest.Unmarshal(m, b)
}
func (m *CreateTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTicketRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTicketRequest.Merge(dst, src)
}
func (m *CreateTicketRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTicketRequest.Size(m)
}
func (m *CreateTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTicketRequest proto.InternalMessageInfo

func (m *CreateTicketRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *CreateTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CreateTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateTicketRequest) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

type GetTicketStatusRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string   `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTicketStatusRequest) Reset()         { *m = GetTicketStatusRequest{} }
func (m *GetTicketStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetTicketStatusRequest) ProtoMessage()    {}
func (*GetTicketStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{1}
}
func (m *GetTicketStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTicketStatusRequest.Unmarshal(m, b)
}
func (m *GetTicketStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTicketStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GetTicketStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTicketStatusRequest.Merge(dst, src)
}
func (m *GetTicketStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetTicketStatusRequest.Size(m)
}
func (m *GetTicketStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTicketStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTicketStatusRequest proto.InternalMessageInfo

func (m *GetTicketStatusRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetTicketStatusRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *GetTicketStatusRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *GetTicketStatusRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *GetTicketStatusRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CancelTicketRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string   `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string   `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelTicketRequest) Reset()         { *m = CancelTicketRequest{} }
func (m *CancelTicketRequest) String() string { return proto.CompactTextString(m) }
func (*CancelTicketRequest) ProtoMessage()    {}
func (*CancelTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{2}
}
func (m *CancelTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CancelTicketRequest.Unmarshal(m, b)
}
func (m *CancelTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CancelTicketRequest.Marshal(b, m, deterministic)
}
func (dst *CancelTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelTicketRequest.Merge(dst, src)
}
func (m *CancelTicketRequest) XXX_Size() int {
	return xxx_messageInfo_CancelTicketRequest.Size(m)
}
func (m *CancelTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelTicketRequest proto.InternalMessageInfo

func (m *CancelTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CancelTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CancelTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *CancelTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *CancelTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TicketStatus struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string                    `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string                    `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string                    `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string                    `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Application          string                    `protobuf:"bytes,6,opt,name=application,proto3" json:"application,omitempty"`
	Action               Action                    `protobuf:"varint,7,opt,name=action,proto3,enum=tetrate.api.tcc.workflows.loadbalancer.v1.Action" json:"action,omitempty"`
	State                TicketStatus_RequestState `protobuf:"varint,8,opt,name=state,proto3,enum=tetrate.api.tcc.workflows.loadbalancer.v1.TicketStatus_RequestState" json:"state,omitempty"`
	Note                 string                    `protobuf:"bytes,9,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TicketStatus) Reset()         { *m = TicketStatus{} }
func (m *TicketStatus) String() string { return proto.CompactTextString(m) }
func (*TicketStatus) ProtoMessage()    {}
func (*TicketStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{3}
}
func (m *TicketStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TicketStatus.Unmarshal(m, b)
}
func (m *TicketStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TicketStatus.Marshal(b, m, deterministic)
}
func (dst *TicketStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketStatus.Merge(dst, src)
}
func (m *TicketStatus) XXX_Size() int {
	return xxx_messageInfo_TicketStatus.Size(m)
}
func (m *TicketStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TicketStatus proto.InternalMessageInfo

func (m *TicketStatus) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TicketStatus) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *TicketStatus) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *TicketStatus) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *TicketStatus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TicketStatus) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *TicketStatus) GetAction() Action {
	if m != nil {
		return m.Action
	}
	return Action_ATTACH
}

func (m *TicketStatus) GetState() TicketStatus_RequestState {
	if m != nil {
		return m.State
	}
	return TicketStatus_PENDING
}

func (m *TicketStatus) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ListTicketsRequest struct {
	Parent               string   `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string   `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Id                   string   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTicketsRequest) Reset()         { *m = ListTicketsRequest{} }
func (m *ListTicketsRequest) String() string { return proto.CompactTextString(m) }
func (*ListTicketsRequest) ProtoMessage()    {}
func (*ListTicketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{4}
}
func (m *ListTicketsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsRequest.Unmarshal(m, b)
}
func (m *ListTicketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsRequest.Marshal(b, m, deterministic)
}
func (dst *ListTicketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsRequest.Merge(dst, src)
}
func (m *ListTicketsRequest) XXX_Size() int {
	return xxx_messageInfo_ListTicketsRequest.Size(m)
}
func (m *ListTicketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsRequest proto.InternalMessageInfo

func (m *ListTicketsRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListTicketsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ListTicketsRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ListTicketsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListTicketsResponse struct {
	Tickets              []*TicketStatus `protobuf:"bytes,1,rep,name=tickets,proto3" json:"tickets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListTicketsResponse) Reset()         { *m = ListTicketsResponse{} }
func (m *ListTicketsResponse) String() string { return proto.CompactTextString(m) }
func (*ListTicketsResponse) ProtoMessage()    {}
func (*ListTicketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{5}
}
func (m *ListTicketsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTicketsResponse.Unmarshal(m, b)
}
func (m *ListTicketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTicketsResponse.Marshal(b, m, deterministic)
}
func (dst *ListTicketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTicketsResponse.Merge(dst, src)
}
func (m *ListTicketsResponse) XXX_Size() int {
	return xxx_messageInfo_ListTicketsResponse.Size(m)
}
func (m *ListTicketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTicketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTicketsResponse proto.InternalMessageInfo

func (m *ListTicketsResponse) GetTickets() []*TicketStatus {
	if m != nil {
		return m.Tickets
	}
	return nil
}

type ResolveTicketRequest struct {
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant       string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment  string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer string `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id           string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// optional description (e.g. to be recorded in audit logs)
	Note                 string   `protobuf:"bytes,6,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResolveTicketRequest) Reset()         { *m = ResolveTicketRequest{} }
func (m *ResolveTicketRequest) String() string { return proto.CompactTextString(m) }
func (*ResolveTicketRequest) ProtoMessage()    {}
func (*ResolveTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{6}
}
func (m *ResolveTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveTicketRequest.Unmarshal(m, b)
}
func (m *ResolveTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveTicketRequest.Marshal(b, m, deterministic)
}
func (dst *ResolveTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveTicketRequest.Merge(dst, src)
}
func (m *ResolveTicketRequest) XXX_Size() int {
	return xxx_messageInfo_ResolveTicketRequest.Size(m)
}
func (m *ResolveTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveTicketRequest proto.InternalMessageInfo

func (m *ResolveTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResolveTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ResolveTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ResolveTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *ResolveTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ResolveTicketRequest) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type PublishTicketRequest struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string          `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment          string          `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Loadbalancer         string          `protobuf:"bytes,4,opt,name=loadbalancer,proto3" json:"loadbalancer,omitempty"`
	Id                   string          `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Tls                  *v1.TLSSettings `protobuf:"bytes,6,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PublishTicketRequest) Reset()         { *m = PublishTicketRequest{} }
func (m *PublishTicketRequest) String() string { return proto.CompactTextString(m) }
func (*PublishTicketRequest) ProtoMessage()    {}
func (*PublishTicketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_loadbalancer_d18fbc76f56860de, []int{7}
}
func (m *PublishTicketRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishTicketRequest.Unmarshal(m, b)
}
func (m *PublishTicketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishTicketRequest.Marshal(b, m, deterministic)
}
func (dst *PublishTicketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishTicketRequest.Merge(dst, src)
}
func (m *PublishTicketRequest) XXX_Size() int {
	return xxx_messageInfo_PublishTicketRequest.Size(m)
}
func (m *PublishTicketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishTicketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishTicketRequest proto.InternalMessageInfo

func (m *PublishTicketRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublishTicketRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *PublishTicketRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *PublishTicketRequest) GetLoadbalancer() string {
	if m != nil {
		return m.Loadbalancer
	}
	return ""
}

func (m *PublishTicketRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PublishTicketRequest) GetTls() *v1.TLSSettings {
	if m != nil {
		return m.Tls
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTicketRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.CreateTicketRequest")
	proto.RegisterType((*GetTicketStatusRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.GetTicketStatusRequest")
	proto.RegisterType((*CancelTicketRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.CancelTicketRequest")
	proto.RegisterType((*TicketStatus)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.TicketStatus")
	proto.RegisterType((*ListTicketsRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.ListTicketsRequest")
	proto.RegisterType((*ListTicketsResponse)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.ListTicketsResponse")
	proto.RegisterType((*ResolveTicketRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.ResolveTicketRequest")
	proto.RegisterType((*PublishTicketRequest)(nil), "tetrate.api.tcc.workflows.loadbalancer.v1.PublishTicketRequest")
	proto.RegisterEnum("tetrate.api.tcc.workflows.loadbalancer.v1.Action", Action_name, Action_value)
	proto.RegisterEnum("tetrate.api.tcc.workflows.loadbalancer.v1.TicketStatus_RequestState", TicketStatus_RequestState_name, TicketStatus_RequestState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoadBalancerWorkflowClient is the client API for LoadBalancerWorkflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoadBalancerWorkflowClient interface {
	Attach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Detach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	GetTicketStatus(ctx context.Context, in *GetTicketStatusRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error)
	Approve(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Deny(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error)
	Cancel(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer or remove a detached service
	Publish(ctx context.Context, in *PublishTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type loadBalancerWorkflowClient struct {
	cc *grpc.ClientConn
}

func NewLoadBalancerWorkflowClient(cc *grpc.ClientConn) LoadBalancerWorkflowClient {
	return &loadBalancerWorkflowClient{cc}
}

func (c *loadBalancerWorkflowClient) Attach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Attach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Detach(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Detach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) GetTicketStatus(ctx context.Context, in *GetTicketStatusRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/GetTicketStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) ListPendingTickets(ctx context.Context, in *ListTicketsRequest, opts ...grpc.CallOption) (*ListTicketsResponse, error) {
	out := new(ListTicketsResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/ListPendingTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Approve(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Deny(ctx context.Context, in *ResolveTicketRequest, opts ...grpc.CallOption) (*TicketStatus, error) {
	out := new(TicketStatus)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Cancel(ctx context.Context, in *CancelTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerWorkflowClient) Publish(ctx context.Context, in *PublishTicketRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerWorkflowServer is the server API for LoadBalancerWorkflow service.
type LoadBalancerWorkflowServer interface {
	Attach(context.Context, *CreateTicketRequest) (*TicketStatus, error)
	Detach(context.Context, *CreateTicketRequest) (*TicketStatus, error)
	GetTicketStatus(context.Context, *GetTicketStatusRequest) (*TicketStatus, error)
	ListPendingTickets(context.Context, *ListTicketsRequest) (*ListTicketsResponse, error)
	Approve(context.Context, *ResolveTicketRequest) (*TicketStatus, error)
	Deny(context.Context, *ResolveTicketRequest) (*TicketStatus, error)
	Cancel(context.Context, *CancelTicketRequest) (*empty.Empty, error)
	// LB owner calls this API with additional settings like TLS, to
	// finally expose the service on the load balancer or remove a detached service
	Publish(context.Context, *PublishTicketRequest) (*empty.Empty, error)
}

func RegisterLoadBalancerWorkflowServer(s *grpc.Server, srv LoadBalancerWorkflowServer) {
	s.RegisterService(&_LoadBalancerWorkflow_serviceDesc, srv)
}

func _LoadBalancerWorkflow_Attach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Attach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Attach(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Detach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Detach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Detach(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_GetTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/GetTicketStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).GetTicketStatus(ctx, req.(*GetTicketStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_ListPendingTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/ListPendingTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).ListPendingTickets(ctx, req.(*ListTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Approve(ctx, req.(*ResolveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Deny(ctx, req.(*ResolveTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Cancel(ctx, req.(*CancelTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancerWorkflow_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerWorkflowServer).Publish(ctx, req.(*PublishTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancerWorkflow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.workflows.loadbalancer.v1.LoadBalancerWorkflow",
	HandlerType: (*LoadBalancerWorkflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attach",
			Handler:    _LoadBalancerWorkflow_Attach_Handler,
		},
		{
			MethodName: "Detach",
			Handler:    _LoadBalancerWorkflow_Detach_Handler,
		},
		{
			MethodName: "GetTicketStatus",
			Handler:    _LoadBalancerWorkflow_GetTicketStatus_Handler,
		},
		{
			MethodName: "ListPendingTickets",
			Handler:    _LoadBalancerWorkflow_ListPendingTickets_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _LoadBalancerWorkflow_Approve_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _LoadBalancerWorkflow_Deny_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _LoadBalancerWorkflow_Cancel_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _LoadBalancerWorkflow_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loadbalancer.proto",
}

func init() { proto.RegisterFile("loadbalancer.proto", fileDescriptor_loadbalancer_d18fbc76f56860de) }

var fileDescriptor_loadbalancer_d18fbc76f56860de = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4f, 0x6b, 0x24, 0x45,
	0x14, 0xdf, 0x9a, 0x49, 0x7a, 0x36, 0x95, 0xb8, 0x3b, 0xd4, 0x86, 0x30, 0x8c, 0x0a, 0x43, 0xe3,
	0x21, 0xe6, 0xd0, 0x45, 0x22, 0x28, 0x2c, 0x18, 0xed, 0xa4, 0x9b, 0xdd, 0xc0, 0x10, 0xc7, 0x9e,
	0xb8, 0xca, 0x22, 0x42, 0x4d, 0x77, 0xed, 0xa4, 0x48, 0x4f, 0x55, 0x6f, 0x57, 0x4d, 0x87, 0x10,
	0x72, 0xd9, 0x93, 0x77, 0x0f, 0xa2, 0x9f, 0xc1, 0x2f, 0xe1, 0x37, 0x10, 0xbc, 0x08, 0x9e, 0x04,
	0xbf, 0x80, 0x17, 0x4f, 0x1e, 0xa4, 0xab, 0x6a, 0x96, 0xce, 0xce, 0x08, 0xce, 0xb8, 0x4c, 0x82,
	0xb7, 0xfa, 0xd3, 0xef, 0xd5, 0xef, 0xf7, 0x7e, 0xaf, 0xde, 0xeb, 0x82, 0x28, 0x15, 0x24, 0x19,
	0x90, 0x94, 0xf0, 0x98, 0xe6, 0x5e, 0x96, 0x0b, 0x25, 0xd0, 0xbb, 0x8a, 0xaa, 0x9c, 0x28, 0xea,
	0x91, 0x8c, 0x79, 0x2a, 0x8e, 0xbd, 0x73, 0x91, 0x9f, 0x3d, 0x4b, 0xc5, 0xb9, 0xf4, 0xae, 0x7d,
	0x5d, 0xec, 0xb6, 0xdf, 0x1a, 0x0a, 0x31, 0x4c, 0x29, 0x26, 0x19, 0xc3, 0x84, 0x73, 0xa1, 0x88,
	0x62, 0x82, 0x4b, 0xe3, 0xa8, 0xfd, 0xa6, 0xdd, 0xd5, 0xb3, 0xc1, 0xf8, 0x19, 0xa6, 0xa3, 0x4c,
	0x5d, 0xd8, 0xcd, 0xb7, 0x55, 0x1c, 0xe3, 0x58, 0xe4, 0x14, 0x17, 0xbb, 0x58, 0xa5, 0x52, 0x52,
	0xa5, 0x18, 0x1f, 0x5a, 0x5b, 0xf7, 0x3b, 0x00, 0x1f, 0x1c, 0xe6, 0x94, 0x28, 0x7a, 0xc2, 0xe2,
	0x33, 0xaa, 0x22, 0xfa, 0x7c, 0x4c, 0xa5, 0x42, 0x5b, 0xd0, 0xc9, 0x48, 0x4e, 0xb9, 0x6a, 0x81,
	0x0e, 0xd8, 0x5e, 0x8b, 0xec, 0xac, 0x5c, 0x57, 0x94, 0x13, 0xae, 0x5a, 0x35, 0xb3, 0x6e, 0x66,
	0xa8, 0x03, 0xd7, 0x29, 0x2f, 0x58, 0x2e, 0xf8, 0xa8, 0x34, 0xaa, 0xeb, 0xcd, 0xea, 0x12, 0xba,
	0x07, 0x6b, 0x2c, 0x69, 0xad, 0xe8, 0x8d, 0x1a, 0x4b, 0x4a, 0x0b, 0x92, 0x65, 0x29, 0x8b, 0x35,
	0x97, 0xd6, 0xaa, 0xb1, 0xa8, 0x2c, 0xb9, 0xdf, 0x03, 0xb8, 0xf5, 0x88, 0x2a, 0x03, 0xac, 0xaf,
	0x88, 0x1a, 0xcb, 0x09, 0x3c, 0x04, 0x57, 0x38, 0x19, 0x51, 0x0b, 0x4e, 0x8f, 0xff, 0x03, 0x34,
	0x17, 0x6e, 0x54, 0x23, 0x6e, 0x41, 0x5e, 0x5b, 0xb3, 0xf0, 0x57, 0x27, 0xf0, 0xdd, 0x6f, 0xcb,
	0xc0, 0x95, 0x5b, 0xe9, 0xf5, 0xc0, 0xdd, 0x3c, 0xb2, 0x1f, 0xeb, 0x70, 0xa3, 0x1a, 0xb3, 0x9b,
	0x87, 0xf4, 0xaa, 0xd6, 0xce, 0x94, 0xd6, 0xe8, 0x08, 0x3a, 0x24, 0xd6, 0x9b, 0x8d, 0x0e, 0xd8,
	0xbe, 0xb7, 0xb7, 0xeb, 0xfd, 0xeb, 0xdb, 0xe1, 0xf9, 0xda, 0x30, 0xb2, 0x0e, 0xd0, 0x53, 0xb8,
	0x2a, 0x15, 0x51, 0xb4, 0x75, 0x57, 0x7b, 0x0a, 0xe6, 0xf0, 0x54, 0x0d, 0x9b, 0x67, 0x15, 0x2d,
	0x67, 0x34, 0x32, 0x2e, 0x75, 0x28, 0x85, 0xa2, 0xad, 0x35, 0x1b, 0x4a, 0xa1, 0xa8, 0x1b, 0xc1,
	0x8d, 0xea, 0xa7, 0x68, 0x1d, 0x36, 0x7a, 0xe1, 0x71, 0x70, 0x74, 0xfc, 0xa8, 0x79, 0x07, 0x6d,
	0xc0, 0xbb, 0x7e, 0xaf, 0x17, 0x7d, 0xf2, 0x24, 0x0c, 0x9a, 0x00, 0x41, 0xe8, 0x04, 0xe1, 0xf1,
	0x51, 0x18, 0x34, 0x6b, 0xe8, 0x0d, 0xb8, 0xd6, 0xfb, 0xec, 0xa0, 0x7b, 0xd4, 0x7f, 0x1c, 0x06,
	0xcd, 0x7a, 0xf9, 0xe1, 0xa1, 0x7f, 0x7c, 0x18, 0x76, 0xc3, 0xa0, 0xb9, 0xe2, 0x16, 0x10, 0x75,
	0x99, 0xb4, 0xa9, 0x2f, 0x97, 0x76, 0x29, 0xdd, 0x53, 0xf8, 0xe0, 0xda, 0xb9, 0x32, 0x13, 0x5c,
	0x52, 0xf4, 0x29, 0x6c, 0x28, 0xb3, 0xd4, 0x02, 0x9d, 0xfa, 0xf6, 0xfa, 0xde, 0x07, 0x0b, 0x06,
	0x35, 0x9a, 0xf8, 0x71, 0x7f, 0x00, 0x70, 0x33, 0xa2, 0x52, 0xa4, 0x05, 0xbd, 0x65, 0x17, 0xe8,
	0xa5, 0xc8, 0x4e, 0x45, 0xe4, 0x9f, 0x00, 0xdc, 0xec, 0x8d, 0x07, 0x29, 0x93, 0xa7, 0xb7, 0x0d,
	0xee, 0xfb, 0xb0, 0xae, 0x52, 0xa9, 0xd1, 0xae, 0xef, 0xbd, 0x33, 0x25, 0x4c, 0x59, 0xfb, 0xb5,
	0x0c, 0xdd, 0x7e, 0xdf, 0xd6, 0xfe, 0xa8, 0x34, 0xd8, 0xe9, 0x40, 0xc7, 0xdc, 0x9c, 0x32, 0x2d,
	0xfd, 0x93, 0x13, 0xff, 0xf0, 0x71, 0xf3, 0x8e, 0x49, 0x51, 0x3d, 0x06, 0x7b, 0x5f, 0xdf, 0x87,
	0x9b, 0x5d, 0x41, 0x92, 0x03, 0x7b, 0xf4, 0xe7, 0x56, 0x63, 0xf4, 0x1b, 0x80, 0x8e, 0xaf, 0x14,
	0x89, 0x4f, 0xd1, 0xfe, 0x1c, 0x99, 0x30, 0xa3, 0xd1, 0xb4, 0x17, 0xcd, 0x24, 0xf7, 0xab, 0x17,
	0x3f, 0xff, 0xfe, 0x4d, 0xed, 0x0b, 0xb7, 0xaf, 0x1b, 0x9b, 0x0e, 0xb0, 0xc4, 0x97, 0x66, 0x70,
	0x85, 0x2b, 0x41, 0x95, 0xf8, 0xb2, 0x32, 0xbb, 0xc2, 0x2f, 0xfd, 0xe3, 0xaa, 0x7f, 0x89, 0x2f,
	0x59, 0x72, 0x85, 0x89, 0x66, 0xf5, 0x10, 0xec, 0x68, 0x8e, 0x01, 0xfd, 0x3f, 0x72, 0x4c, 0xe8,
	0x84, 0xe3, 0x8b, 0x1a, 0xbc, 0xff, 0x4a, 0x87, 0x45, 0xfe, 0x1c, 0x60, 0x67, 0x77, 0xe7, 0xc5,
	0xf9, 0x4a, 0xcd, 0x77, 0x84, 0xce, 0x5e, 0x1b, 0xdf, 0xea, 0xf4, 0x0a, 0xe7, 0x06, 0xa0, 0x8d,
	0x83, 0x34, 0x84, 0xff, 0x00, 0xa6, 0xd8, 0xf6, 0x28, 0x4f, 0x18, 0x1f, 0xda, 0xda, 0x87, 0x3e,
	0x9c, 0x83, 0xc4, 0x74, 0xad, 0x6e, 0xef, 0x2f, 0x6a, 0x6e, 0x4a, 0xae, 0xfb, 0xa5, 0x0e, 0xc5,
	0x13, 0x74, 0xf2, 0x5a, 0xa5, 0xcf, 0x0c, 0x47, 0xf4, 0x17, 0x80, 0x0d, 0x3f, 0xcb, 0x72, 0x51,
	0x50, 0xf4, 0xd1, 0x1c, 0x48, 0x67, 0x55, 0xec, 0xc5, 0xe5, 0x3e, 0xd7, 0x1c, 0x9f, 0xbb, 0xe9,
	0x52, 0xe4, 0x26, 0x86, 0x6f, 0x99, 0xf7, 0x7f, 0x02, 0xb8, 0x12, 0x50, 0x7e, 0x71, 0x83, 0xdc,
	0x95, 0xe6, 0xce, 0x5d, 0xb6, 0x14, 0xee, 0x09, 0xe5, 0x17, 0x25, 0xf1, 0x5f, 0x00, 0x74, 0xcc,
	0x5f, 0xeb, 0x7c, 0x45, 0x6d, 0xfa, 0x47, 0xb7, 0xbd, 0xe5, 0x99, 0x67, 0x87, 0x37, 0x79, 0x76,
	0x78, 0x61, 0xf9, 0xec, 0x70, 0x0b, 0x4d, 0x2c, 0x73, 0x97, 0x73, 0x87, 0x63, 0x8d, 0xac, 0xa4,
	0xf6, 0x2b, 0x80, 0x0d, 0xdb, 0xa1, 0xe7, 0x92, 0x75, 0x56, 0x57, 0xff, 0x47, 0x72, 0xcb, 0xcd,
	0xd8, 0xcc, 0x40, 0x7b, 0x08, 0x76, 0x0e, 0x3e, 0x7e, 0xba, 0x3f, 0x64, 0xea, 0x74, 0x3c, 0xf0,
	0x62, 0x31, 0xc2, 0x96, 0x1d, 0x13, 0x93, 0x91, 0x7e, 0x19, 0x96, 0x2f, 0xbd, 0xd9, 0xe7, 0xe0,
	0x62, 0x77, 0xe0, 0x68, 0x2a, 0xef, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x07, 0x02, 0x4d, 0x4d,
	0x8b, 0x0e, 0x00, 0x00,
}
