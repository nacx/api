syntax = "proto3";

package tetrate.api.tcc.workflows.loadbalancer.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/workflows/loadbalancer/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "tcc/core/v1/tlssettings.proto";

//    service owner   |  network admin
// -------------------|-----------------
// REQUESTED -> PENDING_APPROVAL -> APPROVED -> PUBLISHED
//     V                       | -> DENIED
//  REJECTED                   | -> CANCEL

// namespace members of the service being requested & admins. The API call must be made either by
// the admin or by owners of the namespaces whose services are being exposed. It is assumed that the
// load balancer has been created, deployed and imported into TCC through out of band mechanisms
// [for F5] or through service registry imports. The parameters should list the set of services that
// need to be exposed. Services will not be exposed until its approved by the namespace owner where
// the load balancer resides.
service LoadBalancerWorkflow {
  // clang-format off
  rpc Attach(CreateTicketRequest) returns (TicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{id}/attach"
      body: "*"
    };
  };

  rpc Detach(CreateTicketRequest) returns (TicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{id}/detach"
      body: "*"
    };
  };

  rpc GetTicketStatus(GetTicketStatusRequest) returns (TicketStatus) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/requests/{id}/status"
    };
  }

  rpc ListPendingTickets(ListTicketsRequest) returns (ListTicketsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/pending"
    };
  };

  rpc Approve(ResolveTicketRequest) returns (TicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/requests/{id}/approve"
      body: "*"
    };
  };

  rpc Deny(ResolveTicketRequest) returns (TicketStatus) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/requests/{id}/deny"
      body: "*"
    };
  };

  rpc Cancel(CancelTicketRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/requests/{id}/cancel"
      body: "*"
    };
  };

  // LB owner calls this API with additional settings like TLS, to finally expose the service on the
  // load balancer or remove a detached service
  rpc Publish(PublishTicketRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/workflows/loadbalancers/{loadbalancer}/requests/{id}/publish"
      body: "*"
    };
  };
  // clang-format on
}

message CreateTicketRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4;
  string application = 5 [(validate.rules).string.min_len = 1];
}

enum Action {
  ATTACH = 0;
  DETACH = 1;
}

message GetTicketStatusRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string loadbalancer = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message CancelTicketRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string loadbalancer = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message TicketStatus {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string loadbalancer = 4;
  string id = 5;
  string application = 6;

  Action action = 7;
  enum RequestState {
    PENDING = 0;
    APPROVED = 1;
    DENIED = 2;
    PUBLISHED = 3;
    CANCELED = 4;
  }
  RequestState state = 8;
  string note = 9;
}

message ListTicketsRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string loadbalancer = 4 [(validate.rules).string.min_len = 1];
}

message ListTicketsResponse {
  repeated TicketStatus tickets = 1;
}

message ResolveTicketRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string loadbalancer = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];

  // optional description (e.g. to be recorded in audit logs)
  string note = 6;
}

message PublishTicketRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string loadbalancer = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];

  tetrate.api.tcc.core.v1.TLSSettings tls = 6 [(validate.rules).message.required = true];
}
