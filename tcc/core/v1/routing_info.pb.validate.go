// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: routing_info.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on RoutingInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RoutingInfo) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSubsets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RoutingInfoValidationError{
						field:  fmt.Sprintf("Subsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetHttpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RoutingInfoValidationError{
					field:  "HttpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTcpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RoutingInfoValidationError{
					field:  "TcpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// RoutingInfoValidationError is the validation error returned by
// RoutingInfo.Validate if the designated constraints aren't met.
type RoutingInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoutingInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoutingInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoutingInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoutingInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoutingInfoValidationError) ErrorName() string { return "RoutingInfoValidationError" }

// Error satisfies the builtin error interface
func (e RoutingInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoutingInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoutingInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoutingInfoValidationError{}

// Validate checks the field values on LBRouteSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LBRouteSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnableWorkflows

	if _, ok := _LBRouteSettings_LoadBalancerClass_NotInLookup[m.GetLoadBalancerClass()]; ok {
		return LBRouteSettingsValidationError{
			field:  "LoadBalancerClass",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := LoadBalancerClass_name[int32(m.GetLoadBalancerClass())]; !ok {
		return LBRouteSettingsValidationError{
			field:  "LoadBalancerClass",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for LoadBalancerTier

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return LBRouteSettingsValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// LBRouteSettingsValidationError is the validation error returned by
// LBRouteSettings.Validate if the designated constraints aren't met.
type LBRouteSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBRouteSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBRouteSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBRouteSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBRouteSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBRouteSettingsValidationError) ErrorName() string { return "LBRouteSettingsValidationError" }

// Error satisfies the builtin error interface
func (e LBRouteSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBRouteSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBRouteSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBRouteSettingsValidationError{}

var _LBRouteSettings_LoadBalancerClass_NotInLookup = map[LoadBalancerClass]struct{}{
	0: {},
}

// Validate checks the field values on InternalRouteSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InternalRouteSettings) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetHttpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return InternalRouteSettingsValidationError{
					field:  "HttpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTcpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return InternalRouteSettingsValidationError{
					field:  "TcpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// InternalRouteSettingsValidationError is the validation error returned by
// InternalRouteSettings.Validate if the designated constraints aren't met.
type InternalRouteSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InternalRouteSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InternalRouteSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InternalRouteSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InternalRouteSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InternalRouteSettingsValidationError) ErrorName() string {
	return "InternalRouteSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e InternalRouteSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInternalRouteSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InternalRouteSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InternalRouteSettingsValidationError{}

// Validate checks the field values on ExternalRouteSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExternalRouteSettings) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetTls()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ExternalRouteSettingsValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetHttpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ExternalRouteSettingsValidationError{
					field:  "HttpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTcpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ExternalRouteSettingsValidationError{
					field:  "TcpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ExternalRouteSettingsValidationError is the validation error returned by
// ExternalRouteSettings.Validate if the designated constraints aren't met.
type ExternalRouteSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExternalRouteSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExternalRouteSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExternalRouteSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExternalRouteSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExternalRouteSettingsValidationError) ErrorName() string {
	return "ExternalRouteSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e ExternalRouteSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExternalRouteSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExternalRouteSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExternalRouteSettingsValidationError{}

// Validate checks the field values on Port with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Port) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Number

	if _, ok := _Port_Protocol_InLookup[m.GetProtocol()]; !ok {
		return PortValidationError{
			field:  "Protocol",
			reason: "value must be in list [HTTP GRPC HTTP2 HTTPS TCP TLS UDP SCTP]",
		}
	}

	// no validation rules for Name

	// no validation rules for EndpointPort

	// no validation rules for KubernetesNodePort

	return nil
}

// PortValidationError is the validation error returned by Port.Validate if the
// designated constraints aren't met.
type PortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortValidationError) ErrorName() string { return "PortValidationError" }

// Error satisfies the builtin error interface
func (e PortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortValidationError{}

var _Port_Protocol_InLookup = map[string]struct{}{
	"HTTP":  {},
	"GRPC":  {},
	"HTTP2": {},
	"HTTPS": {},
	"TCP":   {},
	"TLS":   {},
	"UDP":   {},
	"SCTP":  {},
}

// Validate checks the field values on Subset with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Subset) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return SubsetValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetLabels()) < 1 {
		return SubsetValidationError{
			field:  "Labels",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// SubsetValidationError is the validation error returned by Subset.Validate if
// the designated constraints aren't met.
type SubsetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubsetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubsetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubsetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubsetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubsetValidationError) ErrorName() string { return "SubsetValidationError" }

// Error satisfies the builtin error interface
func (e SubsetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubset.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubsetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubsetValidationError{}

// Validate checks the field values on HttpSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HttpSettings) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetStickySession()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpSettingsValidationError{
					field:  "StickySession",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetCorsPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpSettingsValidationError{
					field:  "CorsPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetRouteRules() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpSettingsValidationError{
						field:  fmt.Sprintf("RouteRules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// HttpSettingsValidationError is the validation error returned by
// HttpSettings.Validate if the designated constraints aren't met.
type HttpSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpSettingsValidationError) ErrorName() string { return "HttpSettingsValidationError" }

// Error satisfies the builtin error interface
func (e HttpSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpSettingsValidationError{}

// Validate checks the field values on TcpSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TcpSettings) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRoute() == nil {
		return TcpSettingsValidationError{
			field:  "Route",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetRoute()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return TcpSettingsValidationError{
					field:  "Route",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// TcpSettingsValidationError is the validation error returned by
// TcpSettings.Validate if the designated constraints aren't met.
type TcpSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TcpSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TcpSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TcpSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TcpSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TcpSettingsValidationError) ErrorName() string { return "TcpSettingsValidationError" }

// Error satisfies the builtin error interface
func (e TcpSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTcpSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TcpSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TcpSettingsValidationError{}

// Validate checks the field values on HttpRule with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HttpRule) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMatch() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  fmt.Sprintf("Match[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetModify()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpRuleValidationError{
					field:  "Modify",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	switch m.RouteOrRedirect.(type) {

	case *HttpRule_Route:

		{
			tmp := m.GetRoute()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  "Route",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HttpRule_Redirect:

		{
			tmp := m.GetRedirect()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpRuleValidationError{
						field:  "Redirect",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// HttpRuleValidationError is the validation error returned by
// HttpRule.Validate if the designated constraints aren't met.
type HttpRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpRuleValidationError) ErrorName() string { return "HttpRuleValidationError" }

// Error satisfies the builtin error interface
func (e HttpRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpRuleValidationError{}

// Validate checks the field values on HttpMatchCondition with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpMatchCondition) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetUri()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpMatchConditionValidationError{
					field:  "Uri",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetScheme()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpMatchConditionValidationError{
					field:  "Scheme",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetMethod()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpMatchConditionValidationError{
					field:  "Method",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAuthority()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpMatchConditionValidationError{
					field:  "Authority",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for Headers

	return nil
}

// HttpMatchConditionValidationError is the validation error returned by
// HttpMatchCondition.Validate if the designated constraints aren't met.
type HttpMatchConditionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpMatchConditionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpMatchConditionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpMatchConditionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpMatchConditionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpMatchConditionValidationError) ErrorName() string {
	return "HttpMatchConditionValidationError"
}

// Error satisfies the builtin error interface
func (e HttpMatchConditionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpMatchCondition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpMatchConditionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpMatchConditionValidationError{}

// Validate checks the field values on StringMatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StringMatch) Validate() error {
	if m == nil {
		return nil
	}

	switch m.MatchType.(type) {

	case *StringMatch_Exact:
		// no validation rules for Exact

	case *StringMatch_Prefix:
		// no validation rules for Prefix

	case *StringMatch_Regex:
		// no validation rules for Regex

	}

	return nil
}

// StringMatchValidationError is the validation error returned by
// StringMatch.Validate if the designated constraints aren't met.
type StringMatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringMatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringMatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringMatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringMatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringMatchValidationError) ErrorName() string { return "StringMatchValidationError" }

// Error satisfies the builtin error interface
func (e StringMatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringMatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringMatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringMatchValidationError{}

// Validate checks the field values on HTTPRewrite with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HTTPRewrite) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// HTTPRewriteValidationError is the validation error returned by
// HTTPRewrite.Validate if the designated constraints aren't met.
type HTTPRewriteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRewriteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRewriteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRewriteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRewriteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRewriteValidationError) ErrorName() string { return "HTTPRewriteValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRewriteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRewrite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRewriteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRewriteValidationError{}

// Validate checks the field values on Headers with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Headers) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRequest()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HeadersValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetResponse()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HeadersValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HeadersValidationError is the validation error returned by Headers.Validate
// if the designated constraints aren't met.
type HeadersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HeadersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HeadersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HeadersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HeadersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HeadersValidationError) ErrorName() string { return "HeadersValidationError" }

// Error satisfies the builtin error interface
func (e HeadersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaders.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HeadersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HeadersValidationError{}

// Validate checks the field values on HttpModifyAction with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HttpModifyAction) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetRewrite()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpModifyActionValidationError{
					field:  "Rewrite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetHeaders()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpModifyActionValidationError{
					field:  "Headers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HttpModifyActionValidationError is the validation error returned by
// HttpModifyAction.Validate if the designated constraints aren't met.
type HttpModifyActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpModifyActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpModifyActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpModifyActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpModifyActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpModifyActionValidationError) ErrorName() string { return "HttpModifyActionValidationError" }

// Error satisfies the builtin error interface
func (e HttpModifyActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpModifyAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpModifyActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpModifyActionValidationError{}

// Validate checks the field values on Route with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Route) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetDestinations()) < 1 {
		return RouteValidationError{
			field:  "Destinations",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetDestinations() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return RouteValidationError{
						field:  fmt.Sprintf("Destinations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// RouteValidationError is the validation error returned by Route.Validate if
// the designated constraints aren't met.
type RouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteValidationError) ErrorName() string { return "RouteValidationError" }

// Error satisfies the builtin error interface
func (e RouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteValidationError{}

// Validate checks the field values on Redirect with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Redirect) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	// no validation rules for Authority

	return nil
}

// RedirectValidationError is the validation error returned by
// Redirect.Validate if the designated constraints aren't met.
type RedirectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedirectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedirectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedirectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedirectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedirectValidationError) ErrorName() string { return "RedirectValidationError" }

// Error satisfies the builtin error interface
func (e RedirectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedirect.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedirectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedirectValidationError{}

// Validate checks the field values on CorsPolicy with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CorsPolicy) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetMaxAge()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CorsPolicyValidationError{
					field:  "MaxAge",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAllowCredentials()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CorsPolicyValidationError{
					field:  "AllowCredentials",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CorsPolicyValidationError is the validation error returned by
// CorsPolicy.Validate if the designated constraints aren't met.
type CorsPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CorsPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CorsPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CorsPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CorsPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CorsPolicyValidationError) ErrorName() string { return "CorsPolicyValidationError" }

// Error satisfies the builtin error interface
func (e CorsPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCorsPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CorsPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CorsPolicyValidationError{}

// Validate checks the field values on BasicAuthSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BasicAuthSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Realm

	// no validation rules for Charset

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return BasicAuthSettingsValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// BasicAuthSettingsValidationError is the validation error returned by
// BasicAuthSettings.Validate if the designated constraints aren't met.
type BasicAuthSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthSettingsValidationError) ErrorName() string {
	return "BasicAuthSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e BasicAuthSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuthSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthSettingsValidationError{}

// Validate checks the field values on RateLimitSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RateLimitSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RequestsLimit

	{
		tmp := m.GetInterval()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return RateLimitSettingsValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for LimitBy

	return nil
}

// RateLimitSettingsValidationError is the validation error returned by
// RateLimitSettings.Validate if the designated constraints aren't met.
type RateLimitSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimitSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimitSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimitSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimitSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimitSettingsValidationError) ErrorName() string {
	return "RateLimitSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimitSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimitSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimitSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimitSettingsValidationError{}

// Validate checks the field values on LBRouteSettings_LBRoute with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LBRouteSettings_LBRoute) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		return LBRouteSettings_LBRouteValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
	}

	{
		tmp := m.GetTls()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return LBRouteSettings_LBRouteValidationError{
					field:  "Tls",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetHttpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return LBRouteSettings_LBRouteValidationError{
					field:  "HttpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTcpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return LBRouteSettings_LBRouteValidationError{
					field:  "TcpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetAuthSettings() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return LBRouteSettings_LBRouteValidationError{
						field:  fmt.Sprintf("AuthSettings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	{
		tmp := m.GetRateLimitSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return LBRouteSettings_LBRouteValidationError{
					field:  "RateLimitSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// LBRouteSettings_LBRouteValidationError is the validation error returned by
// LBRouteSettings_LBRoute.Validate if the designated constraints aren't met.
type LBRouteSettings_LBRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBRouteSettings_LBRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBRouteSettings_LBRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBRouteSettings_LBRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBRouteSettings_LBRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBRouteSettings_LBRouteValidationError) ErrorName() string {
	return "LBRouteSettings_LBRouteValidationError"
}

// Error satisfies the builtin error interface
func (e LBRouteSettings_LBRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBRouteSettings_LBRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBRouteSettings_LBRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBRouteSettings_LBRouteValidationError{}

// Validate checks the field values on LBRouteSettings_LBRoute_AuthSettings
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *LBRouteSettings_LBRoute_AuthSettings) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Settings.(type) {

	case *LBRouteSettings_LBRoute_AuthSettings_BasicAuthSettings:

		{
			tmp := m.GetBasicAuthSettings()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return LBRouteSettings_LBRoute_AuthSettingsValidationError{
						field:  "BasicAuthSettings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// LBRouteSettings_LBRoute_AuthSettingsValidationError is the validation error
// returned by LBRouteSettings_LBRoute_AuthSettings.Validate if the designated
// constraints aren't met.
type LBRouteSettings_LBRoute_AuthSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) ErrorName() string {
	return "LBRouteSettings_LBRoute_AuthSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e LBRouteSettings_LBRoute_AuthSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLBRouteSettings_LBRoute_AuthSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LBRouteSettings_LBRoute_AuthSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LBRouteSettings_LBRoute_AuthSettingsValidationError{}

// Validate checks the field values on HttpSettings_HTTPCookie with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpSettings_HTTPCookie) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return HttpSettings_HTTPCookieValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPath()) < 1 {
		return HttpSettings_HTTPCookieValidationError{
			field:  "Path",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetTtl() == nil {
		return HttpSettings_HTTPCookieValidationError{
			field:  "Ttl",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetTtl()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return HttpSettings_HTTPCookieValidationError{
					field:  "Ttl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// HttpSettings_HTTPCookieValidationError is the validation error returned by
// HttpSettings_HTTPCookie.Validate if the designated constraints aren't met.
type HttpSettings_HTTPCookieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpSettings_HTTPCookieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpSettings_HTTPCookieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpSettings_HTTPCookieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpSettings_HTTPCookieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpSettings_HTTPCookieValidationError) ErrorName() string {
	return "HttpSettings_HTTPCookieValidationError"
}

// Error satisfies the builtin error interface
func (e HttpSettings_HTTPCookieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpSettings_HTTPCookie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpSettings_HTTPCookieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpSettings_HTTPCookieValidationError{}

// Validate checks the field values on HttpSettings_StickySession with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HttpSettings_StickySession) Validate() error {
	if m == nil {
		return nil
	}

	switch m.HashKey.(type) {

	case *HttpSettings_StickySession_Header:

		if utf8.RuneCountInString(m.GetHeader()) < 1 {
			return HttpSettings_StickySessionValidationError{
				field:  "Header",
				reason: "value length must be at least 1 runes",
			}
		}

	case *HttpSettings_StickySession_Cookie:

		{
			tmp := m.GetCookie()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return HttpSettings_StickySessionValidationError{
						field:  "Cookie",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *HttpSettings_StickySession_UseSourceIp:
		// no validation rules for UseSourceIp

	}

	return nil
}

// HttpSettings_StickySessionValidationError is the validation error returned
// by HttpSettings_StickySession.Validate if the designated constraints aren't met.
type HttpSettings_StickySessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HttpSettings_StickySessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HttpSettings_StickySessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HttpSettings_StickySessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HttpSettings_StickySessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HttpSettings_StickySessionValidationError) ErrorName() string {
	return "HttpSettings_StickySessionValidationError"
}

// Error satisfies the builtin error interface
func (e HttpSettings_StickySessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHttpSettings_StickySession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HttpSettings_StickySessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HttpSettings_StickySessionValidationError{}

// Validate checks the field values on Headers_HeaderOperations with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Headers_HeaderOperations) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Set

	// no validation rules for Add

	return nil
}

// Headers_HeaderOperationsValidationError is the validation error returned by
// Headers_HeaderOperations.Validate if the designated constraints aren't met.
type Headers_HeaderOperationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Headers_HeaderOperationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Headers_HeaderOperationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Headers_HeaderOperationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Headers_HeaderOperationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Headers_HeaderOperationsValidationError) ErrorName() string {
	return "Headers_HeaderOperationsValidationError"
}

// Error satisfies the builtin error interface
func (e Headers_HeaderOperationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHeaders_HeaderOperations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Headers_HeaderOperationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Headers_HeaderOperationsValidationError{}

// Validate checks the field values on Route_LocalDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Route_LocalDestination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Application

	// no validation rules for Service

	// no validation rules for Host

	// no validation rules for Subset

	return nil
}

// Route_LocalDestinationValidationError is the validation error returned by
// Route_LocalDestination.Validate if the designated constraints aren't met.
type Route_LocalDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Route_LocalDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Route_LocalDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Route_LocalDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Route_LocalDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Route_LocalDestinationValidationError) ErrorName() string {
	return "Route_LocalDestinationValidationError"
}

// Error satisfies the builtin error interface
func (e Route_LocalDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute_LocalDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Route_LocalDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Route_LocalDestinationValidationError{}

// Validate checks the field values on Route_RemoteDestination with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Route_RemoteDestination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Application

	if utf8.RuneCountInString(m.GetService()) < 1 {
		return Route_RemoteDestinationValidationError{
			field:  "Service",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// Route_RemoteDestinationValidationError is the validation error returned by
// Route_RemoteDestination.Validate if the designated constraints aren't met.
type Route_RemoteDestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Route_RemoteDestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Route_RemoteDestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Route_RemoteDestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Route_RemoteDestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Route_RemoteDestinationValidationError) ErrorName() string {
	return "Route_RemoteDestinationValidationError"
}

// Error satisfies the builtin error interface
func (e Route_RemoteDestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute_RemoteDestination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Route_RemoteDestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Route_RemoteDestinationValidationError{}

// Validate checks the field values on Route_Destination with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *Route_Destination) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Weight

	// no validation rules for Port

	switch m.Target.(type) {

	case *Route_Destination_Local:

		{
			tmp := m.GetLocal()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Route_DestinationValidationError{
						field:  "Local",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *Route_Destination_Remote:

		{
			tmp := m.GetRemote()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return Route_DestinationValidationError{
						field:  "Remote",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *Route_Destination_Address:
		// no validation rules for Address

	default:
		return Route_DestinationValidationError{
			field:  "Target",
			reason: "value is required",
		}

	}

	return nil
}

// Route_DestinationValidationError is the validation error returned by
// Route_Destination.Validate if the designated constraints aren't met.
type Route_DestinationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Route_DestinationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Route_DestinationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Route_DestinationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Route_DestinationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Route_DestinationValidationError) ErrorName() string {
	return "Route_DestinationValidationError"
}

// Error satisfies the builtin error interface
func (e Route_DestinationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoute_Destination.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Route_DestinationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Route_DestinationValidationError{}

// Validate checks the field values on BasicAuthSettings_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BasicAuthSettings_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// BasicAuthSettings_UserValidationError is the validation error returned by
// BasicAuthSettings_User.Validate if the designated constraints aren't met.
type BasicAuthSettings_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BasicAuthSettings_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BasicAuthSettings_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BasicAuthSettings_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BasicAuthSettings_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BasicAuthSettings_UserValidationError) ErrorName() string {
	return "BasicAuthSettings_UserValidationError"
}

// Error satisfies the builtin error interface
func (e BasicAuthSettings_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBasicAuthSettings_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BasicAuthSettings_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BasicAuthSettings_UserValidationError{}
