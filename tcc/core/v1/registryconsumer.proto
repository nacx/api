syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// One big giant bulk API. The k8s sync agent would call this API with
// JSON form of k8s services, endpoints. Same goes for f5 sync
// agent. They call this API periodically to update our internal data
// model. Upon receiving the data, we will convert this into our model
// and then push to the database.  Why is this a gRPC service? No
// clue.
service RegistryConsumer {
  rpc RegistryUpdate(RegistryUpdateRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/registryconsumer/{registrytype}"
      body: "*"
    };
  };
}

// Please do not over engineer this anything beyond a glorified
// file copy.
message RegistryUpdateRequest {
  // currently accepted values are kubernetes or vm
  string registrytype = 1;
  string environment = 2;
  // A unique identifier for the k8s/vm cluster
  string cluster = 3;
  string tenant = 4;
  // A huge json dump of all services, endpoints.
  // For k8s, its literally kubectl get services --all-namespaces -o json
  // and kubectl get po --all-namespaces -o json
  string payload = 5;
}
