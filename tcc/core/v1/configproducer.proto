// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "validate/validate.proto";

import "permissions.proto";

// API that returns all istio/f5 configs for a VM or k8s cluster.  The sync agent running next to VM
// galley or k8 galley or f5 BIGIP LTM would call this periodically. For Istio, we return all the
// Istio YAMLs pertaining to that cluster. It should store the response in the file system path that
// is watched by Galley for configs. For F5, it would get all the F5 configs. It should then call F5
// management IP, and update F5 configs using the iControl rest API.
service ConfigProducer {
  option (tetrate.api.q.rbac.v1.default_requires) = {
    raw_permissions: "ReadCluster"
  };

  rpc Download(ConfigDownloadRequest) returns (ConfigData) {
    // clang-format off
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/configproducer/{configtype}"
    };
    // clang-format on
  };
}

message ConfigDownloadRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  // Currently accepted values are istio or f5.
  string configtype = 5 [(validate.rules).string = {in: ["istio", "f5"]}];
}

message ConfigData {
  string configtype = 1;
  string cluster = 2;
  string environment = 3;
  string tenant = 4;
  // For istio, this is a huge YAML dump of all Istio artifacts like virtual services, destination
  // rules, service entries, gateways, etc. in YAML form. For F5, its all f5 config artifacts.
  string payload = 5;
}
