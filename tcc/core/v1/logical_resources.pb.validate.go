// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tcc/core/v1/logical_resources.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _logical_resources_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Environment with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Environment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return EnvironmentValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return EnvironmentValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Description

	{
		tmp := m.GetClientSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return EnvironmentValidationError{
					field:  "ClientSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return EnvironmentValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// EnvironmentValidationError is the validation error returned by
// Environment.Validate if the designated constraints aren't met.
type EnvironmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentValidationError) ErrorName() string { return "EnvironmentValidationError" }

// Error satisfies the builtin error interface
func (e EnvironmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentValidationError{}

// Validate checks the field values on CreateEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateEnvironmentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateEnvironmentRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateEnvironmentRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	// no validation rules for Description

	{
		tmp := m.GetClientSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateEnvironmentRequestValidationError{
					field:  "ClientSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateEnvironmentRequestValidationError is the validation error returned by
// CreateEnvironmentRequest.Validate if the designated constraints aren't met.
type CreateEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnvironmentRequestValidationError) ErrorName() string {
	return "CreateEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnvironmentRequestValidationError{}

var _CreateEnvironmentRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetEnvironmentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetEnvironmentRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetEnvironmentRequestValidationError is the validation error returned by
// GetEnvironmentRequest.Validate if the designated constraints aren't met.
type GetEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEnvironmentRequestValidationError) ErrorName() string {
	return "GetEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEnvironmentRequestValidationError{}

// Validate checks the field values on EnvironmentPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *EnvironmentPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return EnvironmentPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return EnvironmentPolicyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPolicy() == nil {
		return EnvironmentPolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return EnvironmentPolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// EnvironmentPolicyRequestValidationError is the validation error returned by
// EnvironmentPolicyRequest.Validate if the designated constraints aren't met.
type EnvironmentPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnvironmentPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnvironmentPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnvironmentPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnvironmentPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnvironmentPolicyRequestValidationError) ErrorName() string {
	return "EnvironmentPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnvironmentPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnvironmentPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnvironmentPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnvironmentPolicyRequestValidationError{}

// Validate checks the field values on ListEnvironmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEnvironmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListEnvironmentsRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListEnvironmentsRequestValidationError is the validation error returned by
// ListEnvironmentsRequest.Validate if the designated constraints aren't met.
type ListEnvironmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentsRequestValidationError) ErrorName() string {
	return "ListEnvironmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentsRequestValidationError{}

// Validate checks the field values on ListEnvironmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEnvironmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEnvironments() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListEnvironmentsResponseValidationError{
						field:  fmt.Sprintf("Environments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListEnvironmentsResponseValidationError is the validation error returned by
// ListEnvironmentsResponse.Validate if the designated constraints aren't met.
type ListEnvironmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEnvironmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEnvironmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEnvironmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEnvironmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEnvironmentsResponseValidationError) ErrorName() string {
	return "ListEnvironmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEnvironmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEnvironmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEnvironmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEnvironmentsResponseValidationError{}

// Validate checks the field values on DeleteEnvironmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEnvironmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteEnvironmentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteEnvironmentRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteEnvironmentRequestValidationError is the validation error returned by
// DeleteEnvironmentRequest.Validate if the designated constraints aren't met.
type DeleteEnvironmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEnvironmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEnvironmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEnvironmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEnvironmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEnvironmentRequestValidationError) ErrorName() string {
	return "DeleteEnvironmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEnvironmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEnvironmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEnvironmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEnvironmentRequestValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ApplicationValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ApplicationValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ApplicationValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Description

	{
		tmp := m.GetClientSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  "ClientSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetForceMtlsBetweenServices()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  "ForceMtlsBetweenServices",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAlertSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ApplicationValidationError{
					field:  "AlertSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return ApplicationValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateApplicationRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateApplicationRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateApplicationRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateApplicationRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	// no validation rules for Description

	{
		tmp := m.GetClientSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateApplicationRequestValidationError{
					field:  "ClientSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetForceMtlsBetweenServices()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateApplicationRequestValidationError{
					field:  "ForceMtlsBetweenServices",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAlertSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateApplicationRequestValidationError{
					field:  "AlertSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

var _CreateApplicationRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetApplicationRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetApplicationRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on ApplicationPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ApplicationPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ApplicationPolicyRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ApplicationPolicyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPolicy() == nil {
		return ApplicationPolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ApplicationPolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ApplicationPolicyRequestValidationError is the validation error returned by
// ApplicationPolicyRequest.Validate if the designated constraints aren't met.
type ApplicationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationPolicyRequestValidationError) ErrorName() string {
	return "ApplicationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationPolicyRequestValidationError{}

// Validate checks the field values on ApplicationAuthzPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ApplicationAuthzPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ApplicationAuthzPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ApplicationAuthzPolicyRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ApplicationAuthzPolicyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPolicy() == nil {
		return ApplicationAuthzPolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ApplicationAuthzPolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ApplicationAuthzPolicyRequestValidationError is the validation error
// returned by ApplicationAuthzPolicyRequest.Validate if the designated
// constraints aren't met.
type ApplicationAuthzPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationAuthzPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationAuthzPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationAuthzPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationAuthzPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationAuthzPolicyRequestValidationError) ErrorName() string {
	return "ApplicationAuthzPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplicationAuthzPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplicationAuthzPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationAuthzPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationAuthzPolicyRequestValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListApplicationsRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListApplicationsRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListApplicationsResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteApplicationRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteApplicationRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteApplicationRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on GetAllLogicalResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllLogicalResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetAllLogicalResourcesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetAllLogicalResourcesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetAllLogicalResourcesRequestValidationError is the validation error
// returned by GetAllLogicalResourcesRequest.Validate if the designated
// constraints aren't met.
type GetAllLogicalResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllLogicalResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllLogicalResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllLogicalResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllLogicalResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllLogicalResourcesRequestValidationError) ErrorName() string {
	return "GetAllLogicalResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllLogicalResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllLogicalResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllLogicalResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllLogicalResourcesRequestValidationError{}

// Validate checks the field values on GetAllLogicalResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllLogicalResourcesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllLogicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllLogicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetAllLogicalResourcesResponseValidationError is the validation error
// returned by GetAllLogicalResourcesResponse.Validate if the designated
// constraints aren't met.
type GetAllLogicalResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllLogicalResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllLogicalResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllLogicalResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllLogicalResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllLogicalResourcesResponseValidationError) ErrorName() string {
	return "GetAllLogicalResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllLogicalResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllLogicalResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllLogicalResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllLogicalResourcesResponseValidationError{}

// Validate checks the field values on GetAllEnvironmentResourcesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetAllEnvironmentResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetAllEnvironmentResourcesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetAllEnvironmentResourcesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetAllEnvironmentResourcesRequestValidationError is the validation error
// returned by GetAllEnvironmentResourcesRequest.Validate if the designated
// constraints aren't met.
type GetAllEnvironmentResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEnvironmentResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEnvironmentResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEnvironmentResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEnvironmentResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEnvironmentResourcesRequestValidationError) ErrorName() string {
	return "GetAllEnvironmentResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEnvironmentResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEnvironmentResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEnvironmentResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEnvironmentResourcesRequestValidationError{}

// Validate checks the field values on GetAllEnvironmentResourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetAllEnvironmentResourcesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Applications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetApps() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("Apps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for key, val := range m.GetAuthzPolicies() {
		_ = val

		// no validation rules for AuthzPolicies[key]

		{
			tmp := val

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllEnvironmentResourcesResponseValidationError{
						field:  fmt.Sprintf("AuthzPolicies[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetAllEnvironmentResourcesResponseValidationError is the validation error
// returned by GetAllEnvironmentResourcesResponse.Validate if the designated
// constraints aren't met.
type GetAllEnvironmentResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEnvironmentResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEnvironmentResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEnvironmentResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEnvironmentResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEnvironmentResourcesResponseValidationError) ErrorName() string {
	return "GetAllEnvironmentResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEnvironmentResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEnvironmentResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEnvironmentResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEnvironmentResourcesResponseValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ServiceValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ServiceValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return ServiceValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ServiceValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		return ServiceValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return ServiceValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Namespace

	for idx, item := range m.GetSubsets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceValidationError{
						field:  fmt.Sprintf("Subsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for ServiceType

	{
		tmp := m.GetAlertSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceValidationError{
					field:  "AlertSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	switch m.Routing.(type) {

	case *Service_LbSettings:

		{
			tmp := m.GetLbSettings()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceValidationError{
						field:  "LbSettings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *Service_InternalRoutes:

		{
			tmp := m.GetInternalRoutes()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceValidationError{
						field:  "InternalRoutes",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *Service_ExternalRoutes:

		{
			tmp := m.GetExternalRoutes()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceValidationError{
						field:  "ExternalRoutes",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateServiceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateServiceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return CreateServiceRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateServiceRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateServiceRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		return CreateServiceRequestValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Labels

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateServiceRequestValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for Namespace

	for idx, item := range m.GetSubsets() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateServiceRequestValidationError{
						field:  fmt.Sprintf("Subsets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for ServiceType

	{
		tmp := m.GetAlertSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return CreateServiceRequestValidationError{
					field:  "AlertSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	switch m.Routing.(type) {

	case *CreateServiceRequest_LbSettings:

		{
			tmp := m.GetLbSettings()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateServiceRequestValidationError{
						field:  "LbSettings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *CreateServiceRequest_InternalRoutes:

		{
			tmp := m.GetInternalRoutes()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateServiceRequestValidationError{
						field:  "InternalRoutes",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	case *CreateServiceRequest_ExternalRoutes:

		{
			tmp := m.GetExternalRoutes()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateServiceRequestValidationError{
						field:  "ExternalRoutes",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

var _CreateServiceRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetServiceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetServiceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return GetServiceRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetServiceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on ServicePolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServicePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ServicePolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ServicePolicyRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return ServicePolicyRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ServicePolicyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPolicy() == nil {
		return ServicePolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServicePolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ServicePolicyRequestValidationError is the validation error returned by
// ServicePolicyRequest.Validate if the designated constraints aren't met.
type ServicePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicePolicyRequestValidationError) ErrorName() string {
	return "ServicePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServicePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicePolicyRequestValidationError{}

// Validate checks the field values on ServiceAuthzPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceAuthzPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ServiceAuthzPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ServiceAuthzPolicyRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return ServiceAuthzPolicyRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ServiceAuthzPolicyRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPolicy() == nil {
		return ServiceAuthzPolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceAuthzPolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ServiceAuthzPolicyRequestValidationError is the validation error returned by
// ServiceAuthzPolicyRequest.Validate if the designated constraints aren't met.
type ServiceAuthzPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceAuthzPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceAuthzPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceAuthzPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceAuthzPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceAuthzPolicyRequestValidationError) ErrorName() string {
	return "ServiceAuthzPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceAuthzPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceAuthzPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceAuthzPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceAuthzPolicyRequestValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListServicesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListServicesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return ListServicesRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServicesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetApplication()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Application",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on
// GetAllEnvironmentResourcesResponse_ApplicationDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllEnvironmentResourcesResponse_ApplicationDetails) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetApplication()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError{
					field:  "Application",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError is the
// validation error returned by
// GetAllEnvironmentResourcesResponse_ApplicationDetails.Validate if the
// designated constraints aren't met.
type GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) ErrorName() string {
	return "GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEnvironmentResourcesResponse_ApplicationDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEnvironmentResourcesResponse_ApplicationDetailsValidationError{}
