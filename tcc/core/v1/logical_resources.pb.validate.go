// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: logical_resources.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Workspace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Workspace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Id

	// no validation rules for Description

	if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkspaceValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// WorkspaceValidationError is the validation error returned by
// Workspace.Validate if the designated constraints aren't met.
type WorkspaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkspaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkspaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkspaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkspaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkspaceValidationError) ErrorName() string { return "WorkspaceValidationError" }

// Error satisfies the builtin error interface
func (e WorkspaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkspace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkspaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkspaceValidationError{}

// Validate checks the field values on CreateWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateWorkspaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	if v, ok := interface{}(m.GetWorkspace()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkspaceRequestValidationError{
				field:  "Workspace",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateWorkspaceRequestValidationError is the validation error returned by
// CreateWorkspaceRequest.Validate if the designated constraints aren't met.
type CreateWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkspaceRequestValidationError) ErrorName() string {
	return "CreateWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkspaceRequestValidationError{}

// Validate checks the field values on GetWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetWorkspaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Id

	return nil
}

// GetWorkspaceRequestValidationError is the validation error returned by
// GetWorkspaceRequest.Validate if the designated constraints aren't met.
type GetWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkspaceRequestValidationError) ErrorName() string {
	return "GetWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkspaceRequestValidationError{}

// Validate checks the field values on ListWorkspacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWorkspacesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	return nil
}

// ListWorkspacesRequestValidationError is the validation error returned by
// ListWorkspacesRequest.Validate if the designated constraints aren't met.
type ListWorkspacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesRequestValidationError) ErrorName() string {
	return "ListWorkspacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesRequestValidationError{}

// Validate checks the field values on ListWorkspacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListWorkspacesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWorkspaces() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkspacesResponseValidationError{
					field:  fmt.Sprintf("Workspaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListWorkspacesResponseValidationError is the validation error returned by
// ListWorkspacesResponse.Validate if the designated constraints aren't met.
type ListWorkspacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkspacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkspacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkspacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkspacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkspacesResponseValidationError) ErrorName() string {
	return "ListWorkspacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkspacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkspacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkspacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkspacesResponseValidationError{}

// Validate checks the field values on DeleteWorkspaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteWorkspaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Id

	return nil
}

// DeleteWorkspaceRequestValidationError is the validation error returned by
// DeleteWorkspaceRequest.Validate if the designated constraints aren't met.
type DeleteWorkspaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkspaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkspaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkspaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkspaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkspaceRequestValidationError) ErrorName() string {
	return "DeleteWorkspaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkspaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkspaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkspaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkspaceRequestValidationError{}

// Validate checks the field values on Application with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Application) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	// no validation rules for Description

	if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ApplicationValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ApplicationValidationError is the validation error returned by
// Application.Validate if the designated constraints aren't met.
type ApplicationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplicationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplicationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplicationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplicationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplicationValidationError) ErrorName() string { return "ApplicationValidationError" }

// Error satisfies the builtin error interface
func (e ApplicationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplication.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplicationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplicationValidationError{}

// Validate checks the field values on CreateApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	if v, ok := interface{}(m.GetApplication()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateApplicationRequestValidationError{
				field:  "Application",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateApplicationRequestValidationError is the validation error returned by
// CreateApplicationRequest.Validate if the designated constraints aren't met.
type CreateApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateApplicationRequestValidationError) ErrorName() string {
	return "CreateApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateApplicationRequestValidationError{}

// Validate checks the field values on GetApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	return nil
}

// GetApplicationRequestValidationError is the validation error returned by
// GetApplicationRequest.Validate if the designated constraints aren't met.
type GetApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplicationRequestValidationError) ErrorName() string {
	return "GetApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplicationRequestValidationError{}

// Validate checks the field values on ListApplicationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	return nil
}

// ListApplicationsRequestValidationError is the validation error returned by
// ListApplicationsRequest.Validate if the designated constraints aren't met.
type ListApplicationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsRequestValidationError) ErrorName() string {
	return "ListApplicationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsRequestValidationError{}

// Validate checks the field values on ListApplicationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListApplicationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetApplications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListApplicationsResponseValidationError{
					field:  fmt.Sprintf("Applications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListApplicationsResponseValidationError is the validation error returned by
// ListApplicationsResponse.Validate if the designated constraints aren't met.
type ListApplicationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListApplicationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListApplicationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListApplicationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListApplicationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListApplicationsResponseValidationError) ErrorName() string {
	return "ListApplicationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListApplicationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListApplicationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListApplicationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListApplicationsResponseValidationError{}

// Validate checks the field values on DeleteApplicationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteApplicationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	return nil
}

// DeleteApplicationRequestValidationError is the validation error returned by
// DeleteApplicationRequest.Validate if the designated constraints aren't met.
type DeleteApplicationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteApplicationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteApplicationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteApplicationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteApplicationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteApplicationRequestValidationError) ErrorName() string {
	return "DeleteApplicationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteApplicationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteApplicationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteApplicationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteApplicationRequestValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Application

	// no validation rules for Id

	// no validation rules for Description

	if v, ok := interface{}(m.GetRoutingInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "RoutingInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on CreateServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Application

	if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateServiceRequestValidationError{
				field:  "Service",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateServiceRequestValidationError is the validation error returned by
// CreateServiceRequest.Validate if the designated constraints aren't met.
type CreateServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceRequestValidationError) ErrorName() string {
	return "CreateServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceRequestValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Application

	// no validation rules for Id

	return nil
}

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServicesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Application

	return nil
}

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServicesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListServicesResponseValidationError is the validation error returned by
// ListServicesResponse.Validate if the designated constraints aren't met.
type ListServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesResponseValidationError) ErrorName() string {
	return "ListServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesResponseValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Application

	// no validation rules for Id

	return nil
}

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on LoadBalancer with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LoadBalancer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	// no validation rules for Description

	// no validation rules for Services

	return nil
}

// LoadBalancerValidationError is the validation error returned by
// LoadBalancer.Validate if the designated constraints aren't met.
type LoadBalancerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadBalancerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadBalancerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadBalancerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadBalancerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadBalancerValidationError) ErrorName() string { return "LoadBalancerValidationError" }

// Error satisfies the builtin error interface
func (e LoadBalancerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadBalancer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadBalancerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadBalancerValidationError{}

// Validate checks the field values on CreateLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	if v, ok := interface{}(m.GetLoadbalancer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLoadBalancerRequestValidationError{
				field:  "Loadbalancer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLoadBalancerRequestValidationError is the validation error returned by
// CreateLoadBalancerRequest.Validate if the designated constraints aren't met.
type CreateLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLoadBalancerRequestValidationError) ErrorName() string {
	return "CreateLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLoadBalancerRequestValidationError{}

// Validate checks the field values on GetLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	return nil
}

// GetLoadBalancerRequestValidationError is the validation error returned by
// GetLoadBalancerRequest.Validate if the designated constraints aren't met.
type GetLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoadBalancerRequestValidationError) ErrorName() string {
	return "GetLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoadBalancerRequestValidationError{}

// Validate checks the field values on ListLoadBalancersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoadBalancersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	// no validation rules for Tenant

	// no validation rules for Workspace

	return nil
}

// ListLoadBalancersRequestValidationError is the validation error returned by
// ListLoadBalancersRequest.Validate if the designated constraints aren't met.
type ListLoadBalancersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoadBalancersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoadBalancersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoadBalancersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoadBalancersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoadBalancersRequestValidationError) ErrorName() string {
	return "ListLoadBalancersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoadBalancersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoadBalancersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoadBalancersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoadBalancersRequestValidationError{}

// Validate checks the field values on ListLoadBalancersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoadBalancersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLoadbalancers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoadBalancersResponseValidationError{
					field:  fmt.Sprintf("Loadbalancers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLoadBalancersResponseValidationError is the validation error returned by
// ListLoadBalancersResponse.Validate if the designated constraints aren't met.
type ListLoadBalancersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoadBalancersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoadBalancersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoadBalancersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoadBalancersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoadBalancersResponseValidationError) ErrorName() string {
	return "ListLoadBalancersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoadBalancersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoadBalancersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoadBalancersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoadBalancersResponseValidationError{}

// Validate checks the field values on DeleteLoadBalancerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteLoadBalancerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Id

	return nil
}

// DeleteLoadBalancerRequestValidationError is the validation error returned by
// DeleteLoadBalancerRequest.Validate if the designated constraints aren't met.
type DeleteLoadBalancerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLoadBalancerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLoadBalancerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLoadBalancerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLoadBalancerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLoadBalancerRequestValidationError) ErrorName() string {
	return "DeleteLoadBalancerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLoadBalancerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLoadBalancerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLoadBalancerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLoadBalancerRequestValidationError{}
