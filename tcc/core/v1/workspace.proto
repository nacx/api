syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// API for CRUD'ing namespaces. Workspaces are unique per tenant.
service Workspaces {
  // admin only: Typically, create namespace fails if the namespace already exists in a service
  // registry import from systems like kubernetes or consul.
  // Such namespaces cannot be created/deleted. Only updates can be made.
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      post: "/v1/workspaces/tenant/{tenant}/{name}"
      body: "*"
    };
  };

  // anyone: Get properties of a namespace. If namespace name is not provided,
  // lists properties of all namespaces in the system.
  rpc GetWorkspace(GetWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      get: "/v1/workspaces/tenant/{tenant}/{name}"
    };
  };

  // admin or worksapce owner: Update properties of a namespace
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      put: "/v1/workspaces/tenant/{tenant}/{name}"
      body: "*"
    };
  };

  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {
    option (google.api.http) = {
      get: "/v1/workspaces/tenant/{tenant}"
    };
  }

  // admin only: Typically, delete namespace fails if the namespace exists in a service
  // registry import from systems like kubernetes or consul.
  // Such namespaces cannot be created/deleted. Only updates can be made.
  rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/workspaces/tenant/{tenant}/{name}"
    };
  };
}

message Workspace {
  string name = 1;
  string tenant = 2;
  // The services (or namespaces) that this endpoints in this
  // workspace depend upon for proper operation. Must be of the form
  // `tenant/123/workspace/456/service/foo.com`, or
  // `tenant/123/workspace/456` . If omitted, its assumed that
  // endpoints in this workspace depend only on other services in the
  // same workspace as the endpoint.
  repeated string dependencies = 3;

  // TODO (@rshriram) : add namespace level reliability settings that consumers in this namespace
  // will use.
}

message CreateWorkspaceRequest {
  string name = 1;
  string tenant = 2;
  // The services (or namespaces) that this endpoints in this
  // workspace depend upon for proper operation. Must be of the form
  // `tenant/123/workspace/456/service/foo.com`, or
  // `tenant/123/workspace/456` . If omitted, its assumed that
  // endpoints in this workspace depend only on other services in the
  // same workspace as the endpoint.
  repeated string dependencies = 3;
}

message UpdateWorkspaceRequest {
  string name = 1;
  string tenant = 2;
  // The services (or namespaces) that this endpoints in this
  // workspace depend upon for proper operation. Must be of the form
  // `tenant/123/workspace/456/service/foo.com`, or
  // `tenant/123/workspace/456` . If omitted, its assumed that
  // endpoints in this workspace depend only on other services in the
  // same workspace as the endpoint.
  repeated string dependencies = 3;
}

message GetWorkspaceRequest {
  string name = 1;
  string tenant = 2;
}

message ListWorkspacesRequest {
  string tenant = 1;

  // TODO: eventually we'll need to support other stuff in list requests:
  //
  // string filter = 2;
  // string page_token = 3;
  // int page_size = 4;
}

message ListWorkspacesResponse {
  repeated Workspace workspaces = 1;
}

message DeleteWorkspaceRequest {
  string name = 1;
  string tenant = 2;
}