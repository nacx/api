// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tcc/core/v1/physical_resources.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _physical_resources_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Cluster with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Cluster) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ClusterValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ClusterValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return ClusterValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Description

	if _, ok := Registry_name[int32(m.GetRegistry())]; !ok {
		return ClusterValidationError{
			field:  "Registry",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Country

	// no validation rules for Datacenter

	// no validation rules for AvailabilityZone

	// no validation rules for Labels

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return ClusterValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for KubernetesClusterDomain

	return nil
}

// ClusterValidationError is the validation error returned by Cluster.Validate
// if the designated constraints aren't met.
type ClusterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterValidationError) ErrorName() string { return "ClusterValidationError" }

// Error satisfies the builtin error interface
func (e ClusterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCluster.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterValidationError{}

// Validate checks the field values on CreateClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateClusterRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateClusterRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateClusterRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateClusterRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	// no validation rules for Description

	if _, ok := Registry_name[int32(m.GetRegistry())]; !ok {
		return CreateClusterRequestValidationError{
			field:  "Registry",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Country

	// no validation rules for Datacenter

	// no validation rules for AvailabilityZone

	// no validation rules for Labels

	// no validation rules for KubernetesClusterDomain

	return nil
}

// CreateClusterRequestValidationError is the validation error returned by
// CreateClusterRequest.Validate if the designated constraints aren't met.
type CreateClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClusterRequestValidationError) ErrorName() string {
	return "CreateClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClusterRequestValidationError{}

var _CreateClusterRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on AgentTokens with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AgentTokens) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tokens

	return nil
}

// AgentTokensValidationError is the validation error returned by
// AgentTokens.Validate if the designated constraints aren't met.
type AgentTokensValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AgentTokensValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AgentTokensValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AgentTokensValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AgentTokensValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AgentTokensValidationError) ErrorName() string { return "AgentTokensValidationError" }

// Error satisfies the builtin error interface
func (e AgentTokensValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAgentTokens.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AgentTokensValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AgentTokensValidationError{}

// Validate checks the field values on GetClusterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetClusterRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetClusterRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetClusterRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetClusterRequestValidationError is the validation error returned by
// GetClusterRequest.Validate if the designated constraints aren't met.
type GetClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClusterRequestValidationError) ErrorName() string {
	return "GetClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClusterRequestValidationError{}

// Validate checks the field values on GenerateClusterTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateClusterTokensRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GenerateClusterTokensRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GenerateClusterTokensRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GenerateClusterTokensRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	{
		tmp := m.GetLifetime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return GenerateClusterTokensRequestValidationError{
					field:  "Lifetime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// GenerateClusterTokensRequestValidationError is the validation error returned
// by GenerateClusterTokensRequest.Validate if the designated constraints
// aren't met.
type GenerateClusterTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateClusterTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateClusterTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateClusterTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateClusterTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateClusterTokensRequestValidationError) ErrorName() string {
	return "GenerateClusterTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateClusterTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateClusterTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateClusterTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateClusterTokensRequestValidationError{}

// Validate checks the field values on ListClustersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClustersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListClustersRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListClustersRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListClustersRequestValidationError is the validation error returned by
// ListClustersRequest.Validate if the designated constraints aren't met.
type ListClustersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersRequestValidationError) ErrorName() string {
	return "ListClustersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersRequestValidationError{}

// Validate checks the field values on ListClustersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListClustersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListClustersResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListClustersResponseValidationError is the validation error returned by
// ListClustersResponse.Validate if the designated constraints aren't met.
type ListClustersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClustersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClustersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClustersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClustersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClustersResponseValidationError) ErrorName() string {
	return "ListClustersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClustersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClustersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClustersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClustersResponseValidationError{}

// Validate checks the field values on DeleteClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteClusterRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteClusterRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteClusterRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteClusterRequestValidationError is the validation error returned by
// DeleteClusterRequest.Validate if the designated constraints aren't met.
type DeleteClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClusterRequestValidationError) ErrorName() string {
	return "DeleteClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClusterRequestValidationError{}

// Validate checks the field values on Namespace with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Namespace) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return NamespaceValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return NamespaceValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return NamespaceValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return NamespaceValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Description

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return NamespaceValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Labels

	return nil
}

// NamespaceValidationError is the validation error returned by
// Namespace.Validate if the designated constraints aren't met.
type NamespaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceValidationError) ErrorName() string { return "NamespaceValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespace.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceValidationError{}

// Validate checks the field values on CreateNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateNamespaceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateNamespaceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return CreateNamespaceRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateNamespaceRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateNamespaceRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	// no validation rules for Description

	// no validation rules for Labels

	return nil
}

// CreateNamespaceRequestValidationError is the validation error returned by
// CreateNamespaceRequest.Validate if the designated constraints aren't met.
type CreateNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNamespaceRequestValidationError) ErrorName() string {
	return "CreateNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNamespaceRequestValidationError{}

var _CreateNamespaceRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetNamespaceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetNamespaceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return GetNamespaceRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetNamespaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetNamespaceRequestValidationError is the validation error returned by
// GetNamespaceRequest.Validate if the designated constraints aren't met.
type GetNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNamespaceRequestValidationError) ErrorName() string {
	return "GetNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNamespaceRequestValidationError{}

// Validate checks the field values on ListNamespacesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespacesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListNamespacesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListNamespacesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return ListNamespacesRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListNamespacesRequestValidationError is the validation error returned by
// ListNamespacesRequest.Validate if the designated constraints aren't met.
type ListNamespacesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesRequestValidationError) ErrorName() string {
	return "ListNamespacesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesRequestValidationError{}

// Validate checks the field values on ListNamespacesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListNamespacesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListNamespacesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListNamespacesResponseValidationError is the validation error returned by
// ListNamespacesResponse.Validate if the designated constraints aren't met.
type ListNamespacesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNamespacesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNamespacesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNamespacesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNamespacesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNamespacesResponseValidationError) ErrorName() string {
	return "ListNamespacesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListNamespacesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNamespacesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNamespacesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNamespacesResponseValidationError{}

// Validate checks the field values on DeleteNamespaceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteNamespaceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteNamespaceRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteNamespaceRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return DeleteNamespaceRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteNamespaceRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteNamespaceRequestValidationError is the validation error returned by
// DeleteNamespaceRequest.Validate if the designated constraints aren't met.
type DeleteNamespaceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNamespaceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNamespaceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNamespaceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNamespaceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNamespaceRequestValidationError) ErrorName() string {
	return "DeleteNamespaceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNamespaceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNamespaceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNamespaceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNamespaceRequestValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Deployment) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeploymentValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeploymentValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return DeploymentValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return DeploymentValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeploymentValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		return DeploymentValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Labels

	if len(m.GetPorts()) < 1 {
		return DeploymentValidationError{
			field:  "Ports",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DeploymentValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return DeploymentValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for KubernetesServiceIp

	return nil
}

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on CreateDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateDeploymentRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateDeploymentRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	if utf8.RuneCountInString(m.GetHostname()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Hostname",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Labels

	if len(m.GetPorts()) < 1 {
		return CreateDeploymentRequestValidationError{
			field:  "Ports",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CreateDeploymentRequestValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for KubernetesServiceIp

	return nil
}

// CreateDeploymentRequestValidationError is the validation error returned by
// CreateDeploymentRequest.Validate if the designated constraints aren't met.
type CreateDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDeploymentRequestValidationError) ErrorName() string {
	return "CreateDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDeploymentRequestValidationError{}

var _CreateDeploymentRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetDeploymentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetDeploymentRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return GetDeploymentRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return GetDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetDeploymentRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetDeploymentRequestValidationError is the validation error returned by
// GetDeploymentRequest.Validate if the designated constraints aren't met.
type GetDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeploymentRequestValidationError) ErrorName() string {
	return "GetDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeploymentRequestValidationError{}

// Validate checks the field values on ListDeploymentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeploymentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListDeploymentsRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListDeploymentsRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return ListDeploymentsRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return ListDeploymentsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListDeploymentsRequestValidationError is the validation error returned by
// ListDeploymentsRequest.Validate if the designated constraints aren't met.
type ListDeploymentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsRequestValidationError) ErrorName() string {
	return "ListDeploymentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsRequestValidationError{}

// Validate checks the field values on ListDeploymentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDeploymentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListDeploymentsResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListDeploymentsResponseValidationError is the validation error returned by
// ListDeploymentsResponse.Validate if the designated constraints aren't met.
type ListDeploymentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDeploymentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDeploymentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDeploymentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDeploymentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDeploymentsResponseValidationError) ErrorName() string {
	return "ListDeploymentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDeploymentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDeploymentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDeploymentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDeploymentsResponseValidationError{}

// Validate checks the field values on DeleteDeploymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDeploymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteDeploymentRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteDeploymentRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return DeleteDeploymentRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return DeleteDeploymentRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteDeploymentRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteDeploymentRequestValidationError is the validation error returned by
// DeleteDeploymentRequest.Validate if the designated constraints aren't met.
type DeleteDeploymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDeploymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDeploymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDeploymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDeploymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDeploymentRequestValidationError) ErrorName() string {
	return "DeleteDeploymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDeploymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDeploymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDeploymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDeploymentRequestValidationError{}

// Validate checks the field values on Endpoint with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Endpoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return EndpointValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return EndpointValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return EndpointValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return EndpointValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		return EndpointValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return EndpointValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		return EndpointValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetPorts()) < 1 {
		return EndpointValidationError{
			field:  "Ports",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	// no validation rules for Labels

	// no validation rules for Locality

	// no validation rules for Weight

	if utf8.RuneCountInString(m.GetEtag()) < 1 {
		return EndpointValidationError{
			field:  "Etag",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// EndpointValidationError is the validation error returned by
// Endpoint.Validate if the designated constraints aren't met.
type EndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndpointValidationError) ErrorName() string { return "EndpointValidationError" }

// Error satisfies the builtin error interface
func (e EndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndpointValidationError{}

// Validate checks the field values on CreateEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEndpointRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
	}

	if !_CreateEndpointRequest_Id_Pattern.MatchString(m.GetId()) {
		return CreateEndpointRequestValidationError{
			field:  "Id",
			reason: "value does not match regex pattern \"(?i)^[0-9a-z.~\\\\-_]*$\"",
		}
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetPorts()) < 1 {
		return CreateEndpointRequestValidationError{
			field:  "Ports",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	// no validation rules for Labels

	// no validation rules for Locality

	// no validation rules for Weight

	return nil
}

// CreateEndpointRequestValidationError is the validation error returned by
// CreateEndpointRequest.Validate if the designated constraints aren't met.
type CreateEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEndpointRequestValidationError) ErrorName() string {
	return "CreateEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEndpointRequestValidationError{}

var _CreateEndpointRequest_Id_Pattern = regexp.MustCompile("(?i)^[0-9a-z.~\\-_]*$")

// Validate checks the field values on GetEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEndpointRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return GetEndpointRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetEndpointRequestValidationError is the validation error returned by
// GetEndpointRequest.Validate if the designated constraints aren't met.
type GetEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEndpointRequestValidationError) ErrorName() string {
	return "GetEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEndpointRequestValidationError{}

// Validate checks the field values on ListEndpointsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEndpointsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return ListEndpointsRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return ListEndpointsRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return ListEndpointsRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return ListEndpointsRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		return ListEndpointsRequestValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListEndpointsRequestValidationError is the validation error returned by
// ListEndpointsRequest.Validate if the designated constraints aren't met.
type ListEndpointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndpointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndpointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndpointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndpointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndpointsRequestValidationError) ErrorName() string {
	return "ListEndpointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndpointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndpointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndpointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndpointsRequestValidationError{}

// Validate checks the field values on ListEndpointsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEndpointsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ListEndpointsResponseValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ListEndpointsResponseValidationError is the validation error returned by
// ListEndpointsResponse.Validate if the designated constraints aren't met.
type ListEndpointsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEndpointsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEndpointsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEndpointsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEndpointsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEndpointsResponseValidationError) ErrorName() string {
	return "ListEndpointsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEndpointsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEndpointsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEndpointsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEndpointsResponseValidationError{}

// Validate checks the field values on DeleteEndpointRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEndpointRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDeployment()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Deployment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DeleteEndpointRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteEndpointRequestValidationError is the validation error returned by
// DeleteEndpointRequest.Validate if the designated constraints aren't met.
type DeleteEndpointRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEndpointRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEndpointRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEndpointRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEndpointRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEndpointRequestValidationError) ErrorName() string {
	return "DeleteEndpointRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEndpointRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEndpointRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEndpointRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEndpointRequestValidationError{}

// Validate checks the field values on BulkLoadClusterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkLoadClusterRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return BulkLoadClusterRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return BulkLoadClusterRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return BulkLoadClusterRequestValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	if m.GetClusterWithNamespaces() == nil {
		return BulkLoadClusterRequestValidationError{
			field:  "ClusterWithNamespaces",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetClusterWithNamespaces()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BulkLoadClusterRequestValidationError{
					field:  "ClusterWithNamespaces",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return BulkLoadClusterRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Name

	return nil
}

// BulkLoadClusterRequestValidationError is the validation error returned by
// BulkLoadClusterRequest.Validate if the designated constraints aren't met.
type BulkLoadClusterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkLoadClusterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkLoadClusterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkLoadClusterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkLoadClusterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkLoadClusterRequestValidationError) ErrorName() string {
	return "BulkLoadClusterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkLoadClusterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkLoadClusterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkLoadClusterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkLoadClusterRequestValidationError{}

// Validate checks the field values on GetAllPhysicalResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllPhysicalResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Parent

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetAllPhysicalResourcesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return GetAllPhysicalResourcesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GetAllPhysicalResourcesRequestValidationError is the validation error
// returned by GetAllPhysicalResourcesRequest.Validate if the designated
// constraints aren't met.
type GetAllPhysicalResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPhysicalResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPhysicalResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPhysicalResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPhysicalResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPhysicalResourcesRequestValidationError) ErrorName() string {
	return "GetAllPhysicalResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPhysicalResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPhysicalResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPhysicalResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPhysicalResourcesRequestValidationError{}

// Validate checks the field values on GetAllPhysicalResourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllPhysicalResourcesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetClusters() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllPhysicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Clusters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllPhysicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllPhysicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return GetAllPhysicalResourcesResponseValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// GetAllPhysicalResourcesResponseValidationError is the validation error
// returned by GetAllPhysicalResourcesResponse.Validate if the designated
// constraints aren't met.
type GetAllPhysicalResourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPhysicalResourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPhysicalResourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPhysicalResourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPhysicalResourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPhysicalResourcesResponseValidationError) ErrorName() string {
	return "GetAllPhysicalResourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPhysicalResourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPhysicalResourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPhysicalResourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPhysicalResourcesResponseValidationError{}

// Validate checks the field values on
// BulkLoadClusterRequest_ClusterWithNamespaces with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BulkLoadClusterRequest_ClusterWithNamespaces) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetCluster() == nil {
		return BulkLoadClusterRequest_ClusterWithNamespacesValidationError{
			field:  "Cluster",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetCluster()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BulkLoadClusterRequest_ClusterWithNamespacesValidationError{
					field:  "Cluster",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetNamespaces() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return BulkLoadClusterRequest_ClusterWithNamespacesValidationError{
						field:  fmt.Sprintf("Namespaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// BulkLoadClusterRequest_ClusterWithNamespacesValidationError is the
// validation error returned by
// BulkLoadClusterRequest_ClusterWithNamespaces.Validate if the designated
// constraints aren't met.
type BulkLoadClusterRequest_ClusterWithNamespacesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) ErrorName() string {
	return "BulkLoadClusterRequest_ClusterWithNamespacesValidationError"
}

// Error satisfies the builtin error interface
func (e BulkLoadClusterRequest_ClusterWithNamespacesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkLoadClusterRequest_ClusterWithNamespaces.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkLoadClusterRequest_ClusterWithNamespacesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkLoadClusterRequest_ClusterWithNamespacesValidationError{}

// Validate checks the field values on
// BulkLoadClusterRequest_NamespaceWithDeployments with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BulkLoadClusterRequest_NamespaceWithDeployments) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetNamespace() == nil {
		return BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError{
			field:  "Namespace",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetNamespace()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError{
					field:  "Namespace",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetDeployments() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError{
						field:  fmt.Sprintf("Deployments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError is the
// validation error returned by
// BulkLoadClusterRequest_NamespaceWithDeployments.Validate if the designated
// constraints aren't met.
type BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) ErrorName() string {
	return "BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError"
}

// Error satisfies the builtin error interface
func (e BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkLoadClusterRequest_NamespaceWithDeployments.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkLoadClusterRequest_NamespaceWithDeploymentsValidationError{}

// Validate checks the field values on
// BulkLoadClusterRequest_DeploymentWithEndpoints with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BulkLoadClusterRequest_DeploymentWithEndpoints) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetDeployment() == nil {
		return BulkLoadClusterRequest_DeploymentWithEndpointsValidationError{
			field:  "Deployment",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetDeployment()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return BulkLoadClusterRequest_DeploymentWithEndpointsValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	for idx, item := range m.GetEndpoints() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return BulkLoadClusterRequest_DeploymentWithEndpointsValidationError{
						field:  fmt.Sprintf("Endpoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// BulkLoadClusterRequest_DeploymentWithEndpointsValidationError is the
// validation error returned by
// BulkLoadClusterRequest_DeploymentWithEndpoints.Validate if the designated
// constraints aren't met.
type BulkLoadClusterRequest_DeploymentWithEndpointsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) ErrorName() string {
	return "BulkLoadClusterRequest_DeploymentWithEndpointsValidationError"
}

// Error satisfies the builtin error interface
func (e BulkLoadClusterRequest_DeploymentWithEndpointsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkLoadClusterRequest_DeploymentWithEndpoints.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkLoadClusterRequest_DeploymentWithEndpointsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkLoadClusterRequest_DeploymentWithEndpointsValidationError{}
