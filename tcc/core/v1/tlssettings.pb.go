// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tlssettings.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TLSSettings struct {
	ServerCertificate    string   `protobuf:"bytes,1,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	PrivateKey           string   `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	CaCertificates       string   `protobuf:"bytes,3,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	SecretName           string   `protobuf:"bytes,4,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_tlssettings_2d55fbe2fa45dbc6, []int{0}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSSettings.Unmarshal(m, b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
}
func (dst *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(dst, src)
}
func (m *TLSSettings) XXX_Size() int {
	return xxx_messageInfo_TLSSettings.Size(m)
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.core.v1.TLSSettings")
}

func init() { proto.RegisterFile("tlssettings.proto", fileDescriptor_tlssettings_2d55fbe2fa45dbc6) }

var fileDescriptor_tlssettings_2d55fbe2fa45dbc6 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xc1, 0x6a, 0x14, 0x4d,
	0x10, 0xc7, 0xd9, 0x6f, 0x3f, 0xbe, 0x0f, 0x27, 0xa0, 0x64, 0x2f, 0x2e, 0x9e, 0x0a, 0x2f, 0x7a,
	0xd8, 0x9d, 0x21, 0xeb, 0x13, 0x6c, 0x02, 0x82, 0x24, 0x7a, 0xd8, 0x2c, 0x01, 0xbd, 0xc4, 0x9a,
	0x9e, 0xda, 0x9d, 0x22, 0xbd, 0xdd, 0x43, 0x77, 0xcd, 0x26, 0xe3, 0x63, 0x2c, 0x3e, 0x89, 0xe0,
	0xc1, 0x67, 0x10, 0x3c, 0xf8, 0x0a, 0xbe, 0x82, 0x57, 0x41, 0xba, 0x67, 0x96, 0x4c, 0x0e, 0x01,
	0x0f, 0xde, 0x7a, 0x7a, 0xaa, 0xfe, 0xf5, 0xaf, 0xdf, 0x1f, 0x3a, 0x39, 0x14, 0xed, 0x3d, 0x89,
	0xb0, 0x59, 0xfb, 0xb4, 0x72, 0x56, 0xec, 0xe8, 0xb1, 0x90, 0x38, 0x14, 0x4a, 0xb1, 0xe2, 0x54,
	0x94, 0x4a, 0x95, 0x75, 0x94, 0x6e, 0x8f, 0x9e, 0x4c, 0xe2, 0x7f, 0x35, 0x5d, 0x93, 0x99, 0xfa,
	0x6b, 0x5c, 0xaf, 0xc9, 0x65, 0xb6, 0x12, 0xb6, 0xc6, 0x67, 0x68, 0x8c, 0x15, 0x8c, 0xe7, 0x56,
	0xe6, 0xe9, 0xaf, 0xff, 0x93, 0x83, 0xe5, 0xd9, 0xf9, 0x79, 0x27, 0x3e, 0xfa, 0x38, 0x48, 0x46,
	0x9e, 0xdc, 0x96, 0xdc, 0xa5, 0x22, 0x27, 0xbc, 0x62, 0x85, 0x42, 0xe3, 0x01, 0x0c, 0x9e, 0x3f,
	0x38, 0xa6, 0xdd, 0x3c, 0x9f, 0xbd, 0x7f, 0x69, 0x1d, 0x54, 0xce, 0xde, 0x30, 0x79, 0x70, 0xb5,
	0x31, 0x6c, 0xd6, 0x60, 0x0d, 0x5c, 0xbc, 0xf6, 0x13, 0x90, 0x92, 0xa0, 0x42, 0x29, 0x41, 0x6c,
	0x3c, 0xaf, 0x58, 0x13, 0x94, 0x56, 0x17, 0xa1, 0x28, 0x5c, 0xb4, 0xda, 0x53, 0xcf, 0x05, 0xc1,
	0xf2, 0xec, 0x1c, 0x7a, 0x43, 0x42, 0x4f, 0xed, 0x29, 0x5d, 0x1c, 0xb6, 0x45, 0x27, 0xb7, 0xbf,
	0x46, 0x1f, 0x92, 0x83, 0xca, 0xf1, 0x16, 0x85, 0x2e, 0xaf, 0xa8, 0x19, 0xff, 0x13, 0xed, 0xbc,
	0xdd, 0xcd, 0x2f, 0x66, 0x4b, 0x80, 0xbf, 0x60, 0xe8, 0x99, 0x87, 0x4e, 0x1f, 0xae, 0xa8, 0x49,
	0x17, 0x49, 0xf7, 0x75, 0x4a, 0xcd, 0xe8, 0xc7, 0x20, 0x79, 0xa4, 0xb0, 0x8f, 0xc3, 0x8f, 0x87,
	0xd1, 0xc0, 0x97, 0xc1, 0x6e, 0xfe, 0x79, 0x30, 0xfb, 0x34, 0xf8, 0x73, 0x0f, 0xd8, 0x3a, 0x50,
	0xd6, 0x08, 0x72, 0xac, 0xea, 0x13, 0xc0, 0x5a, 0x4a, 0xeb, 0x58, 0x9a, 0xfe, 0xad, 0xef, 0xc0,
	0x00, 0x1b, 0xd8, 0x92, 0xe3, 0x55, 0x13, 0xda, 0x10, 0x2a, 0x47, 0x9e, 0x8c, 0x50, 0x01, 0x4a,
	0x33, 0x19, 0x81, 0x08, 0xb5, 0x2f, 0xb7, 0xb2, 0x0e, 0x36, 0xb5, 0xd4, 0xa8, 0x5b, 0xd6, 0xd6,
	0x18, 0x52, 0x6d, 0xfa, 0x8b, 0x87, 0x0a, 0x7b, 0x80, 0xfd, 0xe8, 0xe7, 0x30, 0x39, 0xf0, 0xa4,
	0x1c, 0xc9, 0xa5, 0xc1, 0x0d, 0x8d, 0xff, 0x8d, 0x1b, 0x7e, 0x1f, 0xee, 0xe6, 0xdf, 0x86, 0xb3,
	0xaf, 0xc3, 0x7b, 0xf6, 0x3b, 0xad, 0x73, 0x72, 0x86, 0x84, 0xba, 0x35, 0x43, 0x2b, 0xd8, 0x55,
	0x47, 0x36, 0xa8, 0x81, 0x94, 0x28, 0x91, 0xb8, 0x8f, 0xb7, 0xfb, 0xd0, 0x7d, 0x0a, 0x27, 0xb5,
	0x73, 0x64, 0x44, 0x37, 0x80, 0x55, 0xa5, 0x59, 0x61, 0xae, 0x09, 0xac, 0xd1, 0xcd, 0x5d, 0xe5,
	0x14, 0x96, 0xb7, 0x6a, 0xbe, 0xb4, 0xb5, 0x2e, 0xf6, 0xfc, 0x7a, 0x09, 0xde, 0xe5, 0x68, 0x8a,
	0x96, 0x7a, 0x2f, 0x53, 0x78, 0xb5, 0xea, 0xc3, 0x60, 0x0f, 0x39, 0x85, 0x2d, 0x6a, 0x4f, 0xc5,
	0x04, 0xd0, 0x00, 0x16, 0x05, 0x07, 0x38, 0xa8, 0xf7, 0xc3, 0xae, 0x59, 0xca, 0x76, 0xa5, 0xf6,
	0xe2, 0x0d, 0x6e, 0x68, 0xaa, 0x30, 0x4c, 0xda, 0x1b, 0xc9, 0x09, 0x94, 0x23, 0x0c, 0x29, 0xc4,
	0xea, 0x30, 0xf5, 0xe4, 0x0e, 0xd9, 0x16, 0x40, 0xcf, 0xe8, 0x35, 0x6b, 0x1d, 0xf3, 0x14, 0xdb,
	0xe5, 0x79, 0x5f, 0x80, 0x3e, 0x9a, 0xde, 0xb7, 0xb2, 0xa2, 0xe0, 0x9a, 0x6e, 0x2a, 0xeb, 0xa9,
	0x80, 0x2d, 0x23, 0x20, 0x68, 0x8b, 0x05, 0xe4, 0xa8, 0xd1, 0x28, 0x72, 0x93, 0x3e, 0xf7, 0x4d,
	0xed, 0x25, 0xd8, 0x43, 0xa5, 0xc8, 0x7b, 0x0e, 0x6c, 0xc5, 0x02, 0x4b, 0xba, 0x48, 0x6e, 0xb7,
	0x39, 0x4e, 0xdf, 0x4d, 0xd6, 0x2c, 0x65, 0x9d, 0xa7, 0xca, 0x6e, 0xb2, 0xee, 0x4d, 0x61, 0xbb,
	0x3f, 0x65, 0x58, 0x71, 0x26, 0x4a, 0x65, 0xe1, 0x75, 0xc9, 0xb6, 0x47, 0xf9, 0x7f, 0xf1, 0xd9,
	0x78, 0xf1, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xd1, 0x1e, 0xb0, 0xc7, 0x92, 0x04, 0x00, 0x00,
}
