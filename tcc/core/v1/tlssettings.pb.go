// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tlssettings.proto

package v1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TLSMode int32

const (
	TLSMode_DISABLED        TLSMode = 0
	TLSMode_SIMPLE          TLSMode = 1
	TLSMode_MUTUAL          TLSMode = 2
	TLSMode_SNI_PASSTHROUGH TLSMode = 3
)

var TLSMode_name = map[int32]string{
	0: "DISABLED",
	1: "SIMPLE",
	2: "MUTUAL",
	3: "SNI_PASSTHROUGH",
}

var TLSMode_value = map[string]int32{
	"DISABLED":        0,
	"SIMPLE":          1,
	"MUTUAL":          2,
	"SNI_PASSTHROUGH": 3,
}

func (x TLSMode) String() string {
	return proto.EnumName(TLSMode_name, int32(x))
}

func (TLSMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2c083c4ca4b7a2e4, []int{0}
}

type TLSSettings struct {
	// Set this to SIMPLE, MUTUAL, or SNI_PASSTHROUGH for one-way TLS,
	// mutual TLS, or client sni-based TLS passthrough respectively.
	// The hostname in the load balancer will be used as the SNI in the
	// TLS passthrough mode.
	TlsMode TLSMode `protobuf:"varint,7,opt,name=tls_mode,json=tlsMode,proto3,enum=tetrate.api.tcc.core.v1.TLSMode" json:"tls_mode,omitempty"`
	// enable TLS settings for the application.
	TlsEnabled bool `protobuf:"varint,1,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"` // Deprecated: Do not use.
	// If set, the load balancer will redirect HTTP connections on port
	// 80 to HTTPS port 443.
	RedirectToHttps bool `protobuf:"varint,2,opt,name=redirect_to_https,json=redirectToHttps,proto3" json:"redirect_to_https,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,3,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server's private key.
	PrivateKey string `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// For proxies running on VMs, the path to a file containing
	// certificate authority certificates to use in verifying a
	// presented client side certificate for mutual TLS connections.
	CaCertificates string `protobuf:"bytes,5,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// For proxies running on Kubernetes, the name of the secret that
	// holds the TLS certs including the CA certificates. Currently
	// applicable only on Kubernetes. The secret (type generic) should
	// contain the following keys and values: key: <privateKey>, cert:
	// <serverCert>, cacert: <CACertificate>.  If the service is exposed
	// via a load balancer, the secret must be accessible to it.
	SecretName           string   `protobuf:"bytes,6,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c083c4ca4b7a2e4, []int{0}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(m, src)
}
func (m *TLSSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetTlsMode() TLSMode {
	if m != nil {
		return m.TlsMode
	}
	return TLSMode_DISABLED
}

// Deprecated: Do not use.
func (m *TLSSettings) GetTlsEnabled() bool {
	if m != nil {
		return m.TlsEnabled
	}
	return false
}

func (m *TLSSettings) GetRedirectToHttps() bool {
	if m != nil {
		return m.RedirectToHttps
	}
	return false
}

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterEnum("tetrate.api.tcc.core.v1.TLSMode", TLSMode_name, TLSMode_value)
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.core.v1.TLSSettings")
}

func init() { proto.RegisterFile("tlssettings.proto", fileDescriptor_2c083c4ca4b7a2e4) }

var fileDescriptor_2c083c4ca4b7a2e4 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x8e, 0xd3, 0x30,
	0x18, 0x84, 0x71, 0x17, 0xda, 0xe2, 0xa2, 0x6d, 0x6b, 0x0e, 0xf8, 0x54, 0x22, 0x38, 0x50, 0xad,
	0xc0, 0xd1, 0xc2, 0x0d, 0x4e, 0x2d, 0xad, 0x68, 0x45, 0xba, 0xac, 0xe2, 0xf4, 0xc2, 0x25, 0x72,
	0x9d, 0x9f, 0x5d, 0x8b, 0xa4, 0x8e, 0xec, 0x9f, 0x48, 0xfb, 0x60, 0xbc, 0x03, 0x47, 0x1e, 0x01,
	0xf5, 0x49, 0x50, 0x9a, 0xac, 0xe8, 0x85, 0xdb, 0x68, 0x66, 0xfe, 0x4f, 0xf2, 0x98, 0x8e, 0x31,
	0xf7, 0x1e, 0x10, 0xcd, 0xfe, 0xc6, 0x8b, 0xd2, 0x59, 0xb4, 0xec, 0x19, 0x02, 0x3a, 0x85, 0x20,
	0x54, 0x69, 0x04, 0x6a, 0x2d, 0xb4, 0x75, 0x20, 0xaa, 0xcb, 0x17, 0x3f, 0x3b, 0x74, 0x90, 0x44,
	0x52, 0xb6, 0x75, 0xf6, 0x81, 0xf6, 0x31, 0xf7, 0x69, 0x61, 0x33, 0xe0, 0xbd, 0x80, 0x4c, 0xcf,
	0xdf, 0x06, 0xe2, 0x3f, 0xb7, 0x22, 0x89, 0xe4, 0xc6, 0x66, 0x10, 0xf7, 0x30, 0xf7, 0xb5, 0x60,
	0x2f, 0xe9, 0xa0, 0x3e, 0x86, 0xbd, 0xda, 0xe5, 0x90, 0x71, 0x12, 0x90, 0x69, 0x7f, 0xde, 0xe1,
	0x24, 0xa6, 0x98, 0xfb, 0x65, 0xe3, 0xb2, 0x0b, 0x3a, 0x76, 0x90, 0x19, 0x07, 0x1a, 0x53, 0xb4,
	0xe9, 0x2d, 0x62, 0xe9, 0x79, 0xa7, 0xae, 0xc6, 0xc3, 0xfb, 0x20, 0xb1, 0xab, 0xda, 0x66, 0x6f,
	0x28, 0xf3, 0xe0, 0x2a, 0x70, 0xa9, 0x06, 0x87, 0xe6, 0x9b, 0xd1, 0x0a, 0x81, 0x9f, 0x05, 0x64,
	0xfa, 0x38, 0x1e, 0x37, 0xc9, 0xc7, 0x7f, 0x01, 0x7b, 0x4e, 0x07, 0xa5, 0x33, 0x95, 0x42, 0x48,
	0xbf, 0xc3, 0x1d, 0x7f, 0x78, 0xec, 0xd1, 0xd6, 0xfa, 0x0c, 0x77, 0xec, 0x15, 0x1d, 0x6a, 0x75,
	0xca, 0xf2, 0xfc, 0xd1, 0xb1, 0x74, 0xae, 0xd5, 0x09, 0xc8, 0xd7, 0x24, 0x0f, 0xda, 0x01, 0xa6,
	0x7b, 0x55, 0x00, 0xef, 0x36, 0xa4, 0xc6, 0xba, 0x52, 0x05, 0x5c, 0x2c, 0x68, 0xaf, 0x7d, 0x3e,
	0x7b, 0x42, 0xfb, 0x8b, 0xb5, 0x9c, 0xcd, 0xa3, 0xe5, 0x62, 0xf4, 0x80, 0x51, 0xda, 0x95, 0xeb,
	0xcd, 0x75, 0xb4, 0x1c, 0x91, 0x5a, 0x6f, 0xb6, 0xc9, 0x76, 0x16, 0x8d, 0x3a, 0xec, 0x29, 0x1d,
	0xca, 0xab, 0x75, 0x7a, 0x3d, 0x93, 0x32, 0x59, 0xc5, 0x5f, 0xb6, 0x9f, 0x56, 0xa3, 0xb3, 0xf9,
	0xfb, 0x5f, 0x87, 0x09, 0xf9, 0x7d, 0x98, 0x90, 0x3f, 0x87, 0x09, 0xf9, 0xfa, 0xfa, 0xc6, 0xe0,
	0xed, 0x8f, 0x9d, 0xd0, 0xb6, 0x08, 0xdb, 0xcd, 0x8d, 0xbd, 0x57, 0xa1, 0x2a, 0x4d, 0x88, 0x5a,
	0x87, 0xf5, 0xfa, 0x61, 0x75, 0xb9, 0xeb, 0x1e, 0x7f, 0xf6, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x37, 0xa7, 0xc4, 0x83, 0xee, 0x01, 0x00, 0x00,
}

func (m *TLSSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TlsMode != 0 {
		i = encodeVarintTlssettings(dAtA, i, uint64(m.TlsMode))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SecretName) > 0 {
		i -= len(m.SecretName)
		copy(dAtA[i:], m.SecretName)
		i = encodeVarintTlssettings(dAtA, i, uint64(len(m.SecretName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CaCertificates) > 0 {
		i -= len(m.CaCertificates)
		copy(dAtA[i:], m.CaCertificates)
		i = encodeVarintTlssettings(dAtA, i, uint64(len(m.CaCertificates)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrivateKey) > 0 {
		i -= len(m.PrivateKey)
		copy(dAtA[i:], m.PrivateKey)
		i = encodeVarintTlssettings(dAtA, i, uint64(len(m.PrivateKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServerCertificate) > 0 {
		i -= len(m.ServerCertificate)
		copy(dAtA[i:], m.ServerCertificate)
		i = encodeVarintTlssettings(dAtA, i, uint64(len(m.ServerCertificate)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RedirectToHttps {
		i--
		if m.RedirectToHttps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TlsEnabled {
		i--
		if m.TlsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTlssettings(dAtA []byte, offset int, v uint64) int {
	offset -= sovTlssettings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLSSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TlsEnabled {
		n += 2
	}
	if m.RedirectToHttps {
		n += 2
	}
	l = len(m.ServerCertificate)
	if l > 0 {
		n += 1 + l + sovTlssettings(uint64(l))
	}
	l = len(m.PrivateKey)
	if l > 0 {
		n += 1 + l + sovTlssettings(uint64(l))
	}
	l = len(m.CaCertificates)
	if l > 0 {
		n += 1 + l + sovTlssettings(uint64(l))
	}
	l = len(m.SecretName)
	if l > 0 {
		n += 1 + l + sovTlssettings(uint64(l))
	}
	if m.TlsMode != 0 {
		n += 1 + sovTlssettings(uint64(m.TlsMode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTlssettings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTlssettings(x uint64) (n int) {
	return sovTlssettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLSSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTlssettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TlsEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectToHttps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RedirectToHttps = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerCertificate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTlssettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTlssettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerCertificate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTlssettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTlssettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaCertificates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTlssettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTlssettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaCertificates = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTlssettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTlssettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TlsMode", wireType)
			}
			m.TlsMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TlsMode |= TLSMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTlssettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTlssettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTlssettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTlssettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTlssettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTlssettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTlssettings
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTlssettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTlssettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTlssettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTlssettings
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTlssettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTlssettings   = fmt.Errorf("proto: integer overflow")
)
