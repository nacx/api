// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tlssettings.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TLSMode int32

const (
	TLSMode_DISABLED        TLSMode = 0
	TLSMode_SIMPLE          TLSMode = 1
	TLSMode_MUTUAL          TLSMode = 2
	TLSMode_SNI_PASSTHROUGH TLSMode = 3
)

var TLSMode_name = map[int32]string{
	0: "DISABLED",
	1: "SIMPLE",
	2: "MUTUAL",
	3: "SNI_PASSTHROUGH",
}
var TLSMode_value = map[string]int32{
	"DISABLED":        0,
	"SIMPLE":          1,
	"MUTUAL":          2,
	"SNI_PASSTHROUGH": 3,
}

func (x TLSMode) String() string {
	return proto.EnumName(TLSMode_name, int32(x))
}
func (TLSMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_tlssettings_812f2709bc69046d, []int{0}
}

type TLSSettings struct {
	// Set this to SIMPLE, MUTUAL, or SNI_PASSTHROUGH for one-way TLS,
	// mutual TLS, or client sni-based TLS passthrough respectively.
	// The hostname in the load balancer will be used as the SNI in the
	// TLS passthrough mode.
	TlsMode TLSMode `protobuf:"varint,1,opt,name=tls_mode,json=tlsMode,proto3,enum=tetrate.api.tcc.core.v1.TLSMode" json:"tls_mode,omitempty"`
	// enable TLS settings for the application.
	TlsEnabled bool `protobuf:"varint,2,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"` // Deprecated: Do not use.
	// If set, the load balancer will redirect HTTP connections on port
	// 80 to HTTPS port 443.
	RedirectToHttps bool `protobuf:"varint,3,opt,name=redirect_to_https,json=redirectToHttps,proto3" json:"redirect_to_https,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,4,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// For proxies running on VMs, the path to the file holding the
	// server's private key.
	PrivateKey string `protobuf:"bytes,5,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// For proxies running on VMs, the path to a file containing
	// certificate authority certificates to use in verifying a
	// presented client side certificate for mutual TLS connections.
	CaCertificates string `protobuf:"bytes,6,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// For proxies running on Kubernetes, the name of the secret that
	// holds the TLS certs including the CA certificates. Currently
	// applicable only on Kubernetes. The secret (type generic) should
	// contain the following keys and values: key: <privateKey>, cert:
	// <serverCert>, cacert: <CACertificate>.  If the service is exposed
	// via a load balancer, the secret must be accessible to it.
	SecretName           string   `protobuf:"bytes,7,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_tlssettings_812f2709bc69046d, []int{0}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSSettings.Unmarshal(m, b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
}
func (dst *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(dst, src)
}
func (m *TLSSettings) XXX_Size() int {
	return xxx_messageInfo_TLSSettings.Size(m)
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetTlsMode() TLSMode {
	if m != nil {
		return m.TlsMode
	}
	return TLSMode_DISABLED
}

// Deprecated: Do not use.
func (m *TLSSettings) GetTlsEnabled() bool {
	if m != nil {
		return m.TlsEnabled
	}
	return false
}

func (m *TLSSettings) GetRedirectToHttps() bool {
	if m != nil {
		return m.RedirectToHttps
	}
	return false
}

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.core.v1.TLSSettings")
	proto.RegisterEnum("tetrate.api.tcc.core.v1.TLSMode", TLSMode_name, TLSMode_value)
}

func init() { proto.RegisterFile("tlssettings.proto", fileDescriptor_tlssettings_812f2709bc69046d) }

var fileDescriptor_tlssettings_812f2709bc69046d = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x41, 0xaf, 0xd2, 0x40,
	0x14, 0x85, 0x6d, 0x9f, 0x02, 0x0e, 0xe6, 0x51, 0xc6, 0x85, 0xb3, 0xb3, 0xd1, 0x85, 0xe4, 0x45,
	0xa7, 0x79, 0xba, 0x74, 0x05, 0x42, 0x84, 0x58, 0x90, 0x74, 0xca, 0xc6, 0x4d, 0x33, 0x4c, 0xaf,
	0x30, 0xb1, 0x65, 0x9a, 0x99, 0x6b, 0x13, 0x7e, 0x98, 0xff, 0xcf, 0x94, 0x96, 0xc8, 0xc6, 0xdd,
	0xc9, 0x39, 0xe7, 0x7e, 0xc9, 0x9c, 0x21, 0x63, 0x2c, 0x9c, 0x03, 0x44, 0x7d, 0x3a, 0x38, 0x5e,
	0x59, 0x83, 0x86, 0xbe, 0x42, 0x40, 0x2b, 0x11, 0xb8, 0xac, 0x34, 0x47, 0xa5, 0xb8, 0x32, 0x16,
	0x78, 0xfd, 0xf8, 0xe6, 0x8f, 0x4f, 0x86, 0x69, 0x2c, 0x44, 0x57, 0xa7, 0x9f, 0xc9, 0x00, 0x0b,
	0x97, 0x95, 0x26, 0x07, 0xe6, 0x85, 0xde, 0xe4, 0xfe, 0x63, 0xc8, 0xff, 0x73, 0xcb, 0xd3, 0x58,
	0xac, 0x4d, 0x0e, 0x49, 0x1f, 0x0b, 0xd7, 0x08, 0xfa, 0x96, 0x0c, 0x9b, 0x63, 0x38, 0xc9, 0x7d,
	0x01, 0x39, 0xf3, 0x43, 0x6f, 0x32, 0x98, 0xf9, 0xcc, 0x4b, 0x08, 0x16, 0x6e, 0xd1, 0xba, 0xf4,
	0x81, 0x8c, 0x2d, 0xe4, 0xda, 0x82, 0xc2, 0x0c, 0x4d, 0x76, 0x44, 0xac, 0x1c, 0xbb, 0x6b, 0xaa,
	0xc9, 0xe8, 0x1a, 0xa4, 0x66, 0xd9, 0xd8, 0xf4, 0x03, 0xa1, 0x0e, 0x6c, 0x0d, 0x36, 0x53, 0x60,
	0x51, 0xff, 0xd4, 0x4a, 0x22, 0xb0, 0xa7, 0xa1, 0x37, 0x79, 0x9e, 0x8c, 0xdb, 0xe4, 0xcb, 0xbf,
	0x80, 0xbe, 0x26, 0xc3, 0xca, 0xea, 0x5a, 0x22, 0x64, 0xbf, 0xe0, 0xcc, 0x9e, 0x5d, 0x7a, 0xa4,
	0xb3, 0xbe, 0xc1, 0x99, 0xbe, 0x23, 0x23, 0x25, 0x6f, 0x59, 0x8e, 0xf5, 0x2e, 0xa5, 0x7b, 0x25,
	0x6f, 0x40, 0xae, 0x21, 0x39, 0x50, 0x16, 0x30, 0x3b, 0xc9, 0x12, 0x58, 0xbf, 0x25, 0xb5, 0xd6,
	0x46, 0x96, 0xf0, 0x30, 0x27, 0xfd, 0xee, 0xf9, 0xf4, 0x05, 0x19, 0xcc, 0x57, 0x62, 0x3a, 0x8b,
	0x17, 0xf3, 0xe0, 0x09, 0x25, 0xa4, 0x27, 0x56, 0xeb, 0x6d, 0xbc, 0x08, 0xbc, 0x46, 0xaf, 0x77,
	0xe9, 0x6e, 0x1a, 0x07, 0x3e, 0x7d, 0x49, 0x46, 0x62, 0xb3, 0xca, 0xb6, 0x53, 0x21, 0xd2, 0x65,
	0xf2, 0x7d, 0xf7, 0x75, 0x19, 0xdc, 0xcd, 0xf8, 0x8f, 0xf7, 0x07, 0x8d, 0xc7, 0xdf, 0x7b, 0xae,
	0x4c, 0x19, 0x75, 0x3b, 0x6b, 0x73, 0x55, 0x91, 0xac, 0x74, 0x84, 0x4a, 0x45, 0xcd, 0xe2, 0x51,
	0xfd, 0xb8, 0xef, 0x5d, 0x7e, 0xf3, 0xd3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xa4, 0xdd,
	0x34, 0xe2, 0x01, 0x00, 0x00,
}
