// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tlssettings.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TLSSettings struct {
	// For proxies running on VMs, the path to the file holding the server-side TLS certificate to use.
	ServerCertificate string `protobuf:"bytes,1,opt,name=server_certificate,json=serverCertificate,proto3" json:"server_certificate,omitempty"`
	// For proxies running on VMs, the path to the file holding the server's private key.
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	// For proxies running on VMs, the path to a file containing certificate authority certificates to use in verifying a
	// presented client side certificate for mutual TLS connections.
	CaCertificates string `protobuf:"bytes,3,opt,name=ca_certificates,json=caCertificates,proto3" json:"ca_certificates,omitempty"`
	// For proxies running on Kubernetes, the name of the secret that holds the TLS certs. Currently applicable only on
	// Kubernetes. The secret should contain the server certificate and the private key. If mutual TLS is being used, an
	// additional secret with name secretName-cacert should be created with the CaCertificates that the server will use to
	// verify client side certificates. If the service is exposed via a load balancer, the secret must be accessible to it.
	SecretName           string   `protobuf:"bytes,4,opt,name=secret_name,json=secretName,proto3" json:"secret_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TLSSettings) Reset()         { *m = TLSSettings{} }
func (m *TLSSettings) String() string { return proto.CompactTextString(m) }
func (*TLSSettings) ProtoMessage()    {}
func (*TLSSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_tlssettings_e8d0a9846b9687dc, []int{0}
}
func (m *TLSSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TLSSettings.Unmarshal(m, b)
}
func (m *TLSSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TLSSettings.Marshal(b, m, deterministic)
}
func (dst *TLSSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSSettings.Merge(dst, src)
}
func (m *TLSSettings) XXX_Size() int {
	return xxx_messageInfo_TLSSettings.Size(m)
}
func (m *TLSSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLSSettings proto.InternalMessageInfo

func (m *TLSSettings) GetServerCertificate() string {
	if m != nil {
		return m.ServerCertificate
	}
	return ""
}

func (m *TLSSettings) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TLSSettings) GetCaCertificates() string {
	if m != nil {
		return m.CaCertificates
	}
	return ""
}

func (m *TLSSettings) GetSecretName() string {
	if m != nil {
		return m.SecretName
	}
	return ""
}

func init() {
	proto.RegisterType((*TLSSettings)(nil), "tetrate.api.tcc.core.v1.TLSSettings")
}

func init() { proto.RegisterFile("tlssettings.proto", fileDescriptor_tlssettings_e8d0a9846b9687dc) }

var fileDescriptor_tlssettings_e8d0a9846b9687dc = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xbf, 0x4a, 0x04, 0x31,
	0x10, 0x87, 0x59, 0x15, 0xc1, 0x1c, 0x28, 0x97, 0xc6, 0x74, 0x8a, 0x8d, 0x16, 0x9a, 0x70, 0xf8,
	0x06, 0x5a, 0x2a, 0x16, 0x9e, 0x95, 0xcd, 0x32, 0x37, 0x8c, 0xeb, 0xa0, 0xbb, 0x09, 0x93, 0x31,
	0xb0, 0x4f, 0xe4, 0x6b, 0xca, 0xfe, 0x91, 0xdb, 0x6e, 0x98, 0xdf, 0xc7, 0x07, 0x9f, 0x59, 0xeb,
	0x77, 0xce, 0xa4, 0xca, 0x5d, 0x93, 0x7d, 0x92, 0xa8, 0xd1, 0x9e, 0x2b, 0xa9, 0x80, 0x92, 0x87,
	0xc4, 0x5e, 0x11, 0x3d, 0x46, 0x21, 0x5f, 0x36, 0x57, 0xbf, 0x95, 0x59, 0xbd, 0x3d, 0x6f, 0xb7,
	0x33, 0x6e, 0xef, 0x8c, 0xcd, 0x24, 0x85, 0xa4, 0x46, 0x12, 0xe5, 0x0f, 0x46, 0x50, 0x72, 0xd5,
	0x65, 0x75, 0x73, 0xf2, 0xba, 0x9e, 0x96, 0xc7, 0xfd, 0x60, 0x2f, 0xcc, 0x2a, 0x09, 0x17, 0x50,
	0xaa, 0xbf, 0xa8, 0x77, 0x07, 0x23, 0x67, 0xe6, 0xd7, 0x13, 0xf5, 0xf6, 0xda, 0x9c, 0x21, 0x2c,
	0x5d, 0xd9, 0x1d, 0x8e, 0xd0, 0x29, 0xc2, 0x42, 0x94, 0x07, 0x53, 0x26, 0x14, 0xd2, 0xba, 0x83,
	0x96, 0xdc, 0xd1, 0x64, 0x9a, 0x5e, 0x2f, 0xd0, 0xd2, 0x83, 0x7f, 0xbf, 0x6d, 0x58, 0x3f, 0x7f,
	0x76, 0x1e, 0x63, 0x1b, 0xe6, 0x1e, 0x8e, 0xff, 0x57, 0x80, 0xc4, 0x41, 0x11, 0xc3, 0x50, 0x16,
	0xca, 0x66, 0x77, 0x3c, 0x96, 0xdf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x96, 0x81, 0xd4, 0xf4,
	0x0e, 0x01, 0x00, 0x00,
}
