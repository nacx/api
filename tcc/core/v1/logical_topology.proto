syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "service.proto";
import "permissions.proto";

// Logical resource hierarchy - workspaces, applications, and
// services. These are explicitly created by the user based on the
// automatically gathered inventory of services across VMs,
// kubernetes, etc.  Services (typically those exposed in the load
// balaner) are grouped into applications, and treated as one unit for
// purposes of policy enforcement, SLA monitoring, etc. One or more
// applications are grouped into a Workspace. For example,
// frontend.payment.com service on k8s ingress gateway,
// api.payment.com service on a F5 LTM backed by VMs together form the
// "payment" application. "payment", "orders", and "catalog"
// applications can be part of a workspace called "ecommerce". An
// application can be part of only one workspace.
service LogicalTopology {
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workspaces/{name}"
      body: "*"
    };
  };

  rpc GetWorkspace(GetWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workspaces/{name}"
    };
  };

  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (Workspace) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/workspaces/{name}"
      body: "*"
    };
  };

  rpc ListWorkspaces(ListWorkspacesRequest) returns (ListWorkspacesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workspaces"
    };
  }

  rpc DeleteWorkspace(DeleteWorkspaceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/workspaces/{name}"
    };
  };

  rpc CreateApplication(CreateApplicationRequest) returns (Application) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}"
      body: "*"
    };
  };

  rpc GetApplication(GetApplicationRequest) returns (Application) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}"
    };
  };

  rpc UpdateApplication(UpdateApplicationRequest) returns (Application) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}"
      body: "*"
    };
  };

  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workspaces/{workspace}/applications"
    };
  }

  rpc DeleteApplication(DeleteApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}"
    };
  };

  rpc AddServicesToApplication(ApplicationServicesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services/add"
      body: "*"
    };
  };

  rpc RemoveServicesFromApplication(ApplicationServicesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services/remove"
      body: "*"
    };
  };

  rpc ListApplicationServices(ListApplicationServicesRequest) returns (ListApplicationServicesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services"
    };
  };
}

message Workspace {
  string name = 1;
  string display_name = 2;
  string tenant = 3;
  Permissions permissions = 4;
}

message CreateWorkspaceRequest {
  string name = 1;
  string display_name = 2;
  string tenant = 3;
  Permissions permissions = 4;
}

message UpdateWorkspaceRequest {
  string name = 1;
  string display_name = 2;
  string tenant = 3;
  Permissions permissions = 4;
}

message GetWorkspaceRequest {
  string name = 1;
  string tenant = 2;
}

message ListWorkspacesRequest {
  string tenant = 1;
}

message ListWorkspacesResponse {
  repeated Workspace workspaces = 1;
}

message DeleteWorkspaceRequest {
  string name = 1;
  string tenant = 2;
}

message Application {
  string name = 1;
  string display_name = 2;
  string workspace = 3;
  string tenant = 4;
  Permissions permissions = 5;
}

message CreateApplicationRequest {
  string name = 1;
  string display_name = 2;
  string workspace = 3;
  string tenant = 4;
  Permissions permissions = 5;
}

message UpdateApplicationRequest {
  string name = 1;
  string display_name = 2;
  string workspace = 3;
  string tenant = 4;
  Permissions permissions = 5;
}

message GetApplicationRequest {
  string name = 1;
  string workspace = 2;
  string tenant = 3;
}

message ListApplicationsRequest {
  string workspace = 1;
  string tenant = 2;
}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message DeleteApplicationRequest {
  string name = 1;
  string workspace = 2;
  string tenant = 3;
}

message ApplicationServicesRequest {
  string tenant = 1;
  string workspace = 2;
  string application = 3;

  message ServiceId {
    string cluster = 1;
    string namespace = 2;
    string hostname = 3;
  }

  repeated ServiceId services = 4;
}

message ListApplicationServicesRequest {
  string workspace = 1;
  string application = 2;
  string tenant = 3;
}

message ListApplicationServicesResponse {
  repeated Service services = 1;
}
