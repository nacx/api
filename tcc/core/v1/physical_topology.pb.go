// Code generated by protoc-gen-go. DO NOT EDIT.
// source: physical_topology.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LBClass int32

const (
	LBClass_Envoy LBClass = 0
	LBClass_F5    LBClass = 1
)

var LBClass_name = map[int32]string{
	0: "Envoy",
	1: "F5",
}
var LBClass_value = map[string]int32{
	"Envoy": 0,
	"F5":    1,
}

func (x LBClass) String() string {
	return proto.EnumName(LBClass_name, int32(x))
}
func (LBClass) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{0}
}

type Cluster struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Tenant      string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// currently accepted values are kubernetes or f5
	Registrytype string `protobuf:"bytes,4,opt,name=registrytype,proto3" json:"registrytype,omitempty"`
	// Information like datacenter where the cluster is present
	Attributes           map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientSettings       *ClientSettings   `protobuf:"bytes,6,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions      `protobuf:"bytes,7,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{0}
}
func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (dst *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(dst, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Cluster) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Cluster) GetRegistrytype() string {
	if m != nil {
		return m.Registrytype
	}
	return ""
}

func (m *Cluster) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Cluster) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *Cluster) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type CreateClusterRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Tenant               string            `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Registrytype         string            `protobuf:"bytes,4,opt,name=registrytype,proto3" json:"registrytype,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientSettings       *ClientSettings   `protobuf:"bytes,6,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions      `protobuf:"bytes,7,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateClusterRequest) Reset()         { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()    {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{1}
}
func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateClusterRequest.Unmarshal(m, b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
}
func (dst *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(dst, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateClusterRequest.Size(m)
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateClusterRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *CreateClusterRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateClusterRequest) GetRegistrytype() string {
	if m != nil {
		return m.Registrytype
	}
	return ""
}

func (m *CreateClusterRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *CreateClusterRequest) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *CreateClusterRequest) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type UpdateClusterRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName          string            `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Tenant               string            `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Registrytype         string            `protobuf:"bytes,4,opt,name=registrytype,proto3" json:"registrytype,omitempty"`
	Attributes           map[string]string `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClientSettings       *ClientSettings   `protobuf:"bytes,6,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions      `protobuf:"bytes,7,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UpdateClusterRequest) Reset()         { *m = UpdateClusterRequest{} }
func (m *UpdateClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateClusterRequest) ProtoMessage()    {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{2}
}
func (m *UpdateClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateClusterRequest.Unmarshal(m, b)
}
func (m *UpdateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateClusterRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterRequest.Merge(dst, src)
}
func (m *UpdateClusterRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateClusterRequest.Size(m)
}
func (m *UpdateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterRequest proto.InternalMessageInfo

func (m *UpdateClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateClusterRequest) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *UpdateClusterRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateClusterRequest) GetRegistrytype() string {
	if m != nil {
		return m.Registrytype
	}
	return ""
}

func (m *UpdateClusterRequest) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *UpdateClusterRequest) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *UpdateClusterRequest) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type GetClusterRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterRequest) Reset()         { *m = GetClusterRequest{} }
func (m *GetClusterRequest) String() string { return proto.CompactTextString(m) }
func (*GetClusterRequest) ProtoMessage()    {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{3}
}
func (m *GetClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetClusterRequest.Unmarshal(m, b)
}
func (m *GetClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetClusterRequest.Marshal(b, m, deterministic)
}
func (dst *GetClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRequest.Merge(dst, src)
}
func (m *GetClusterRequest) XXX_Size() int {
	return xxx_messageInfo_GetClusterRequest.Size(m)
}
func (m *GetClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRequest proto.InternalMessageInfo

func (m *GetClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetClusterRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListClustersRequest struct {
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{4}
}
func (m *ListClustersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersRequest.Unmarshal(m, b)
}
func (m *ListClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersRequest.Marshal(b, m, deterministic)
}
func (dst *ListClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersRequest.Merge(dst, src)
}
func (m *ListClustersRequest) XXX_Size() int {
	return xxx_messageInfo_ListClustersRequest.Size(m)
}
func (m *ListClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersRequest proto.InternalMessageInfo

func (m *ListClustersRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListClustersResponse struct {
	Clusters             []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{5}
}
func (m *ListClustersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListClustersResponse.Unmarshal(m, b)
}
func (m *ListClustersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListClustersResponse.Marshal(b, m, deterministic)
}
func (dst *ListClustersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersResponse.Merge(dst, src)
}
func (m *ListClustersResponse) XXX_Size() int {
	return xxx_messageInfo_ListClustersResponse.Size(m)
}
func (m *ListClustersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersResponse proto.InternalMessageInfo

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type DeleteClusterRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteClusterRequest) Reset()         { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()    {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{6}
}
func (m *DeleteClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteClusterRequest.Unmarshal(m, b)
}
func (m *DeleteClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteClusterRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteClusterRequest.Merge(dst, src)
}
func (m *DeleteClusterRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteClusterRequest.Size(m)
}
func (m *DeleteClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteClusterRequest proto.InternalMessageInfo

func (m *DeleteClusterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteClusterRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type Namespace struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant  string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// The services (or namespaces) that endpoints in this namespace
	// depend upon for proper operation. Must be of the form
	// ns1/foo.com, or ns1/. If omitted, its assumed that endpoints in
	// this namespace depend only on other services in the same
	// namespace as the endpoint.
	Dependencies         []string        `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	ClientSettings       *ClientSettings `protobuf:"bytes,5,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions    `protobuf:"bytes,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Namespace) Reset()         { *m = Namespace{} }
func (m *Namespace) String() string { return proto.CompactTextString(m) }
func (*Namespace) ProtoMessage()    {}
func (*Namespace) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{7}
}
func (m *Namespace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Namespace.Unmarshal(m, b)
}
func (m *Namespace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Namespace.Marshal(b, m, deterministic)
}
func (dst *Namespace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namespace.Merge(dst, src)
}
func (m *Namespace) XXX_Size() int {
	return xxx_messageInfo_Namespace.Size(m)
}
func (m *Namespace) XXX_DiscardUnknown() {
	xxx_messageInfo_Namespace.DiscardUnknown(m)
}

var xxx_messageInfo_Namespace proto.InternalMessageInfo

func (m *Namespace) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Namespace) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *Namespace) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Namespace) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *Namespace) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *Namespace) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type CreateNamespaceRequest struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster              string          `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string          `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Dependencies         []string        `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	ClientSettings       *ClientSettings `protobuf:"bytes,5,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions    `protobuf:"bytes,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateNamespaceRequest) Reset()         { *m = CreateNamespaceRequest{} }
func (m *CreateNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNamespaceRequest) ProtoMessage()    {}
func (*CreateNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{8}
}
func (m *CreateNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateNamespaceRequest.Unmarshal(m, b)
}
func (m *CreateNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateNamespaceRequest.Marshal(b, m, deterministic)
}
func (dst *CreateNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNamespaceRequest.Merge(dst, src)
}
func (m *CreateNamespaceRequest) XXX_Size() int {
	return xxx_messageInfo_CreateNamespaceRequest.Size(m)
}
func (m *CreateNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNamespaceRequest proto.InternalMessageInfo

func (m *CreateNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateNamespaceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CreateNamespaceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateNamespaceRequest) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *CreateNamespaceRequest) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *CreateNamespaceRequest) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type UpdateNamespaceRequest struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster              string          `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string          `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Dependencies         []string        `protobuf:"bytes,4,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	ClientSettings       *ClientSettings `protobuf:"bytes,5,opt,name=client_settings,json=clientSettings,proto3" json:"client_settings,omitempty"`
	Permissions          *Permissions    `protobuf:"bytes,6,opt,name=permissions,proto3" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateNamespaceRequest) Reset()         { *m = UpdateNamespaceRequest{} }
func (m *UpdateNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateNamespaceRequest) ProtoMessage()    {}
func (*UpdateNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{9}
}
func (m *UpdateNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateNamespaceRequest.Unmarshal(m, b)
}
func (m *UpdateNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateNamespaceRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNamespaceRequest.Merge(dst, src)
}
func (m *UpdateNamespaceRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateNamespaceRequest.Size(m)
}
func (m *UpdateNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNamespaceRequest proto.InternalMessageInfo

func (m *UpdateNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateNamespaceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *UpdateNamespaceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateNamespaceRequest) GetDependencies() []string {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *UpdateNamespaceRequest) GetClientSettings() *ClientSettings {
	if m != nil {
		return m.ClientSettings
	}
	return nil
}

func (m *UpdateNamespaceRequest) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type GetNamespaceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNamespaceRequest) Reset()         { *m = GetNamespaceRequest{} }
func (m *GetNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*GetNamespaceRequest) ProtoMessage()    {}
func (*GetNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{10}
}
func (m *GetNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNamespaceRequest.Unmarshal(m, b)
}
func (m *GetNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNamespaceRequest.Marshal(b, m, deterministic)
}
func (dst *GetNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamespaceRequest.Merge(dst, src)
}
func (m *GetNamespaceRequest) XXX_Size() int {
	return xxx_messageInfo_GetNamespaceRequest.Size(m)
}
func (m *GetNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamespaceRequest proto.InternalMessageInfo

func (m *GetNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNamespaceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *GetNamespaceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListNamespacesRequest struct {
	Cluster              string   `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListNamespacesRequest) Reset()         { *m = ListNamespacesRequest{} }
func (m *ListNamespacesRequest) String() string { return proto.CompactTextString(m) }
func (*ListNamespacesRequest) ProtoMessage()    {}
func (*ListNamespacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{11}
}
func (m *ListNamespacesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNamespacesRequest.Unmarshal(m, b)
}
func (m *ListNamespacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNamespacesRequest.Marshal(b, m, deterministic)
}
func (dst *ListNamespacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesRequest.Merge(dst, src)
}
func (m *ListNamespacesRequest) XXX_Size() int {
	return xxx_messageInfo_ListNamespacesRequest.Size(m)
}
func (m *ListNamespacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesRequest proto.InternalMessageInfo

func (m *ListNamespacesRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListNamespacesRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListNamespacesResponse struct {
	Namespaces           []*Namespace `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListNamespacesResponse) Reset()         { *m = ListNamespacesResponse{} }
func (m *ListNamespacesResponse) String() string { return proto.CompactTextString(m) }
func (*ListNamespacesResponse) ProtoMessage()    {}
func (*ListNamespacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{12}
}
func (m *ListNamespacesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListNamespacesResponse.Unmarshal(m, b)
}
func (m *ListNamespacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListNamespacesResponse.Marshal(b, m, deterministic)
}
func (dst *ListNamespacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListNamespacesResponse.Merge(dst, src)
}
func (m *ListNamespacesResponse) XXX_Size() int {
	return xxx_messageInfo_ListNamespacesResponse.Size(m)
}
func (m *ListNamespacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListNamespacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListNamespacesResponse proto.InternalMessageInfo

func (m *ListNamespacesResponse) GetNamespaces() []*Namespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type DeleteNamespaceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteNamespaceRequest) Reset()         { *m = DeleteNamespaceRequest{} }
func (m *DeleteNamespaceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNamespaceRequest) ProtoMessage()    {}
func (*DeleteNamespaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{13}
}
func (m *DeleteNamespaceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteNamespaceRequest.Unmarshal(m, b)
}
func (m *DeleteNamespaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteNamespaceRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteNamespaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteNamespaceRequest.Merge(dst, src)
}
func (m *DeleteNamespaceRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteNamespaceRequest.Size(m)
}
func (m *DeleteNamespaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteNamespaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteNamespaceRequest proto.InternalMessageInfo

func (m *DeleteNamespaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteNamespaceRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteNamespaceRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type LoadBalancer struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster   string `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant    string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// f5 or envoy
	Class LBClass `protobuf:"varint,5,opt,name=class,proto3,enum=tetrate.api.tcc.core.v1.LBClass" json:"class,omitempty"`
	// Types that are valid to be assigned to ClassInfo:
	//	*LoadBalancer_ManagementIp
	//	*LoadBalancer_ServiceName
	ClassInfo isLoadBalancer_ClassInfo `protobuf_oneof:"class_info"`
	Labels    map[string]string        `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Map of services (in cluster) attached to this loadbalancer in the form
	// namespace/hostname, with their TLS credential information
	Services             map[string]*TLSSettings `protobuf:"bytes,9,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LoadBalancer) Reset()         { *m = LoadBalancer{} }
func (m *LoadBalancer) String() string { return proto.CompactTextString(m) }
func (*LoadBalancer) ProtoMessage()    {}
func (*LoadBalancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{14}
}
func (m *LoadBalancer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadBalancer.Unmarshal(m, b)
}
func (m *LoadBalancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadBalancer.Marshal(b, m, deterministic)
}
func (dst *LoadBalancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadBalancer.Merge(dst, src)
}
func (m *LoadBalancer) XXX_Size() int {
	return xxx_messageInfo_LoadBalancer.Size(m)
}
func (m *LoadBalancer) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadBalancer.DiscardUnknown(m)
}

var xxx_messageInfo_LoadBalancer proto.InternalMessageInfo

func (m *LoadBalancer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LoadBalancer) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LoadBalancer) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *LoadBalancer) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *LoadBalancer) GetClass() LBClass {
	if m != nil {
		return m.Class
	}
	return LBClass_Envoy
}

type isLoadBalancer_ClassInfo interface {
	isLoadBalancer_ClassInfo()
}

type LoadBalancer_ManagementIp struct {
	ManagementIp string `protobuf:"bytes,6,opt,name=management_ip,json=managementIp,proto3,oneof"`
}

type LoadBalancer_ServiceName struct {
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3,oneof"`
}

func (*LoadBalancer_ManagementIp) isLoadBalancer_ClassInfo() {}

func (*LoadBalancer_ServiceName) isLoadBalancer_ClassInfo() {}

func (m *LoadBalancer) GetClassInfo() isLoadBalancer_ClassInfo {
	if m != nil {
		return m.ClassInfo
	}
	return nil
}

func (m *LoadBalancer) GetManagementIp() string {
	if x, ok := m.GetClassInfo().(*LoadBalancer_ManagementIp); ok {
		return x.ManagementIp
	}
	return ""
}

func (m *LoadBalancer) GetServiceName() string {
	if x, ok := m.GetClassInfo().(*LoadBalancer_ServiceName); ok {
		return x.ServiceName
	}
	return ""
}

func (m *LoadBalancer) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *LoadBalancer) GetServices() map[string]*TLSSettings {
	if m != nil {
		return m.Services
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LoadBalancer) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LoadBalancer_OneofMarshaler, _LoadBalancer_OneofUnmarshaler, _LoadBalancer_OneofSizer, []interface{}{
		(*LoadBalancer_ManagementIp)(nil),
		(*LoadBalancer_ServiceName)(nil),
	}
}

func _LoadBalancer_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LoadBalancer)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *LoadBalancer_ManagementIp:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ManagementIp)
	case *LoadBalancer_ServiceName:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServiceName)
	case nil:
	default:
		return fmt.Errorf("LoadBalancer.ClassInfo has unexpected type %T", x)
	}
	return nil
}

func _LoadBalancer_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LoadBalancer)
	switch tag {
	case 6: // class_info.management_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &LoadBalancer_ManagementIp{x}
		return true, err
	case 7: // class_info.service_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &LoadBalancer_ServiceName{x}
		return true, err
	default:
		return false, nil
	}
}

func _LoadBalancer_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LoadBalancer)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *LoadBalancer_ManagementIp:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ManagementIp)))
		n += len(x.ManagementIp)
	case *LoadBalancer_ServiceName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ServiceName)))
		n += len(x.ServiceName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CreateLoadBalancerRequest struct {
	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster   string  `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant    string  `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Class     LBClass `protobuf:"varint,5,opt,name=class,proto3,enum=tetrate.api.tcc.core.v1.LBClass" json:"class,omitempty"`
	// Types that are valid to be assigned to ClassInfo:
	//	*CreateLoadBalancerRequest_ManagementIp
	//	*CreateLoadBalancerRequest_ServiceName
	ClassInfo            isCreateLoadBalancerRequest_ClassInfo `protobuf_oneof:"class_info"`
	Labels               map[string]string                     `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *CreateLoadBalancerRequest) Reset()         { *m = CreateLoadBalancerRequest{} }
func (m *CreateLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateLoadBalancerRequest) ProtoMessage()    {}
func (*CreateLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{15}
}
func (m *CreateLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateLoadBalancerRequest.Unmarshal(m, b)
}
func (m *CreateLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *CreateLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLoadBalancerRequest.Merge(dst, src)
}
func (m *CreateLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateLoadBalancerRequest.Size(m)
}
func (m *CreateLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLoadBalancerRequest proto.InternalMessageInfo

func (m *CreateLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetClass() LBClass {
	if m != nil {
		return m.Class
	}
	return LBClass_Envoy
}

type isCreateLoadBalancerRequest_ClassInfo interface {
	isCreateLoadBalancerRequest_ClassInfo()
}

type CreateLoadBalancerRequest_ManagementIp struct {
	ManagementIp string `protobuf:"bytes,6,opt,name=management_ip,json=managementIp,proto3,oneof"`
}

type CreateLoadBalancerRequest_ServiceName struct {
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3,oneof"`
}

func (*CreateLoadBalancerRequest_ManagementIp) isCreateLoadBalancerRequest_ClassInfo() {}

func (*CreateLoadBalancerRequest_ServiceName) isCreateLoadBalancerRequest_ClassInfo() {}

func (m *CreateLoadBalancerRequest) GetClassInfo() isCreateLoadBalancerRequest_ClassInfo {
	if m != nil {
		return m.ClassInfo
	}
	return nil
}

func (m *CreateLoadBalancerRequest) GetManagementIp() string {
	if x, ok := m.GetClassInfo().(*CreateLoadBalancerRequest_ManagementIp); ok {
		return x.ManagementIp
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetServiceName() string {
	if x, ok := m.GetClassInfo().(*CreateLoadBalancerRequest_ServiceName); ok {
		return x.ServiceName
	}
	return ""
}

func (m *CreateLoadBalancerRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CreateLoadBalancerRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CreateLoadBalancerRequest_OneofMarshaler, _CreateLoadBalancerRequest_OneofUnmarshaler, _CreateLoadBalancerRequest_OneofSizer, []interface{}{
		(*CreateLoadBalancerRequest_ManagementIp)(nil),
		(*CreateLoadBalancerRequest_ServiceName)(nil),
	}
}

func _CreateLoadBalancerRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CreateLoadBalancerRequest)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *CreateLoadBalancerRequest_ManagementIp:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ManagementIp)
	case *CreateLoadBalancerRequest_ServiceName:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServiceName)
	case nil:
	default:
		return fmt.Errorf("CreateLoadBalancerRequest.ClassInfo has unexpected type %T", x)
	}
	return nil
}

func _CreateLoadBalancerRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CreateLoadBalancerRequest)
	switch tag {
	case 6: // class_info.management_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &CreateLoadBalancerRequest_ManagementIp{x}
		return true, err
	case 7: // class_info.service_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &CreateLoadBalancerRequest_ServiceName{x}
		return true, err
	default:
		return false, nil
	}
}

func _CreateLoadBalancerRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CreateLoadBalancerRequest)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *CreateLoadBalancerRequest_ManagementIp:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ManagementIp)))
		n += len(x.ManagementIp)
	case *CreateLoadBalancerRequest_ServiceName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ServiceName)))
		n += len(x.ServiceName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetLoadBalancerRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster              string   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLoadBalancerRequest) Reset()         { *m = GetLoadBalancerRequest{} }
func (m *GetLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*GetLoadBalancerRequest) ProtoMessage()    {}
func (*GetLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{16}
}
func (m *GetLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLoadBalancerRequest.Unmarshal(m, b)
}
func (m *GetLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *GetLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLoadBalancerRequest.Merge(dst, src)
}
func (m *GetLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_GetLoadBalancerRequest.Size(m)
}
func (m *GetLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLoadBalancerRequest proto.InternalMessageInfo

func (m *GetLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetLoadBalancerRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *GetLoadBalancerRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListLoadBalancersRequest struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster              string   `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListLoadBalancersRequest) Reset()         { *m = ListLoadBalancersRequest{} }
func (m *ListLoadBalancersRequest) String() string { return proto.CompactTextString(m) }
func (*ListLoadBalancersRequest) ProtoMessage()    {}
func (*ListLoadBalancersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{17}
}
func (m *ListLoadBalancersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLoadBalancersRequest.Unmarshal(m, b)
}
func (m *ListLoadBalancersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLoadBalancersRequest.Marshal(b, m, deterministic)
}
func (dst *ListLoadBalancersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLoadBalancersRequest.Merge(dst, src)
}
func (m *ListLoadBalancersRequest) XXX_Size() int {
	return xxx_messageInfo_ListLoadBalancersRequest.Size(m)
}
func (m *ListLoadBalancersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLoadBalancersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListLoadBalancersRequest proto.InternalMessageInfo

func (m *ListLoadBalancersRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListLoadBalancersRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ListLoadBalancersRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

type ListLoadBalancersResponse struct {
	Loadbalancers        []*LoadBalancer `protobuf:"bytes,1,rep,name=loadbalancers,proto3" json:"loadbalancers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListLoadBalancersResponse) Reset()         { *m = ListLoadBalancersResponse{} }
func (m *ListLoadBalancersResponse) String() string { return proto.CompactTextString(m) }
func (*ListLoadBalancersResponse) ProtoMessage()    {}
func (*ListLoadBalancersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{18}
}
func (m *ListLoadBalancersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLoadBalancersResponse.Unmarshal(m, b)
}
func (m *ListLoadBalancersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLoadBalancersResponse.Marshal(b, m, deterministic)
}
func (dst *ListLoadBalancersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLoadBalancersResponse.Merge(dst, src)
}
func (m *ListLoadBalancersResponse) XXX_Size() int {
	return xxx_messageInfo_ListLoadBalancersResponse.Size(m)
}
func (m *ListLoadBalancersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLoadBalancersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListLoadBalancersResponse proto.InternalMessageInfo

func (m *ListLoadBalancersResponse) GetLoadbalancers() []*LoadBalancer {
	if m != nil {
		return m.Loadbalancers
	}
	return nil
}

type UpdateLoadBalancerRequest struct {
	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster   string  `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant    string  `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Class     LBClass `protobuf:"varint,5,opt,name=class,proto3,enum=tetrate.api.tcc.core.v1.LBClass" json:"class,omitempty"`
	// Types that are valid to be assigned to ClassInfo:
	//	*UpdateLoadBalancerRequest_ManagementIp
	//	*UpdateLoadBalancerRequest_ServiceName
	ClassInfo            isUpdateLoadBalancerRequest_ClassInfo `protobuf_oneof:"class_info"`
	Labels               map[string]string                     `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *UpdateLoadBalancerRequest) Reset()         { *m = UpdateLoadBalancerRequest{} }
func (m *UpdateLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateLoadBalancerRequest) ProtoMessage()    {}
func (*UpdateLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{19}
}
func (m *UpdateLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateLoadBalancerRequest.Unmarshal(m, b)
}
func (m *UpdateLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLoadBalancerRequest.Merge(dst, src)
}
func (m *UpdateLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateLoadBalancerRequest.Size(m)
}
func (m *UpdateLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLoadBalancerRequest proto.InternalMessageInfo

func (m *UpdateLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetClass() LBClass {
	if m != nil {
		return m.Class
	}
	return LBClass_Envoy
}

type isUpdateLoadBalancerRequest_ClassInfo interface {
	isUpdateLoadBalancerRequest_ClassInfo()
}

type UpdateLoadBalancerRequest_ManagementIp struct {
	ManagementIp string `protobuf:"bytes,6,opt,name=management_ip,json=managementIp,proto3,oneof"`
}

type UpdateLoadBalancerRequest_ServiceName struct {
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3,oneof"`
}

func (*UpdateLoadBalancerRequest_ManagementIp) isUpdateLoadBalancerRequest_ClassInfo() {}

func (*UpdateLoadBalancerRequest_ServiceName) isUpdateLoadBalancerRequest_ClassInfo() {}

func (m *UpdateLoadBalancerRequest) GetClassInfo() isUpdateLoadBalancerRequest_ClassInfo {
	if m != nil {
		return m.ClassInfo
	}
	return nil
}

func (m *UpdateLoadBalancerRequest) GetManagementIp() string {
	if x, ok := m.GetClassInfo().(*UpdateLoadBalancerRequest_ManagementIp); ok {
		return x.ManagementIp
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetServiceName() string {
	if x, ok := m.GetClassInfo().(*UpdateLoadBalancerRequest_ServiceName); ok {
		return x.ServiceName
	}
	return ""
}

func (m *UpdateLoadBalancerRequest) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UpdateLoadBalancerRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UpdateLoadBalancerRequest_OneofMarshaler, _UpdateLoadBalancerRequest_OneofUnmarshaler, _UpdateLoadBalancerRequest_OneofSizer, []interface{}{
		(*UpdateLoadBalancerRequest_ManagementIp)(nil),
		(*UpdateLoadBalancerRequest_ServiceName)(nil),
	}
}

func _UpdateLoadBalancerRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UpdateLoadBalancerRequest)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *UpdateLoadBalancerRequest_ManagementIp:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ManagementIp)
	case *UpdateLoadBalancerRequest_ServiceName:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.ServiceName)
	case nil:
	default:
		return fmt.Errorf("UpdateLoadBalancerRequest.ClassInfo has unexpected type %T", x)
	}
	return nil
}

func _UpdateLoadBalancerRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UpdateLoadBalancerRequest)
	switch tag {
	case 6: // class_info.management_ip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &UpdateLoadBalancerRequest_ManagementIp{x}
		return true, err
	case 7: // class_info.service_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.ClassInfo = &UpdateLoadBalancerRequest_ServiceName{x}
		return true, err
	default:
		return false, nil
	}
}

func _UpdateLoadBalancerRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UpdateLoadBalancerRequest)
	// class_info
	switch x := m.ClassInfo.(type) {
	case *UpdateLoadBalancerRequest_ManagementIp:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ManagementIp)))
		n += len(x.ManagementIp)
	case *UpdateLoadBalancerRequest_ServiceName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.ServiceName)))
		n += len(x.ServiceName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeleteLoadBalancerRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Cluster              string   `protobuf:"bytes,3,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Tenant               string   `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteLoadBalancerRequest) Reset()         { *m = DeleteLoadBalancerRequest{} }
func (m *DeleteLoadBalancerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteLoadBalancerRequest) ProtoMessage()    {}
func (*DeleteLoadBalancerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{20}
}
func (m *DeleteLoadBalancerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteLoadBalancerRequest.Unmarshal(m, b)
}
func (m *DeleteLoadBalancerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteLoadBalancerRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteLoadBalancerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLoadBalancerRequest.Merge(dst, src)
}
func (m *DeleteLoadBalancerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteLoadBalancerRequest.Size(m)
}
func (m *DeleteLoadBalancerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLoadBalancerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLoadBalancerRequest proto.InternalMessageInfo

func (m *DeleteLoadBalancerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteLoadBalancerRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteLoadBalancerRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *DeleteLoadBalancerRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

// Transactional. If any one operation fails, transaction will be rolled back.
type BatchOperationRequest struct {
	Tenant               string                       `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Cluster              string                       `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	CreateNamespaces     []*CreateNamespaceRequest    `protobuf:"bytes,3,rep,name=create_namespaces,json=createNamespaces,proto3" json:"create_namespaces,omitempty"`
	UpdateNamespaces     []*UpdateNamespaceRequest    `protobuf:"bytes,4,rep,name=update_namespaces,json=updateNamespaces,proto3" json:"update_namespaces,omitempty"`
	DeleteNamespaces     []*DeleteNamespaceRequest    `protobuf:"bytes,5,rep,name=delete_namespaces,json=deleteNamespaces,proto3" json:"delete_namespaces,omitempty"`
	CreateLoadbalancers  []*CreateLoadBalancerRequest `protobuf:"bytes,6,rep,name=create_loadbalancers,json=createLoadbalancers,proto3" json:"create_loadbalancers,omitempty"`
	UpdateLoadbalancers  []*UpdateLoadBalancerRequest `protobuf:"bytes,7,rep,name=update_loadbalancers,json=updateLoadbalancers,proto3" json:"update_loadbalancers,omitempty"`
	DeleteLoadbalancers  []*DeleteLoadBalancerRequest `protobuf:"bytes,8,rep,name=delete_loadbalancers,json=deleteLoadbalancers,proto3" json:"delete_loadbalancers,omitempty"`
	CreateServices       []*CreateServiceRequest      `protobuf:"bytes,9,rep,name=create_services,json=createServices,proto3" json:"create_services,omitempty"`
	UpdateServices       []*UpdateServiceRequest      `protobuf:"bytes,10,rep,name=update_services,json=updateServices,proto3" json:"update_services,omitempty"`
	DeleteServices       []*DeleteServiceRequest      `protobuf:"bytes,11,rep,name=delete_services,json=deleteServices,proto3" json:"delete_services,omitempty"`
	CreateEndpoints      []*CreateEndpointRequest     `protobuf:"bytes,12,rep,name=create_endpoints,json=createEndpoints,proto3" json:"create_endpoints,omitempty"`
	UpdateEndpoints      []*UpdateEndpointRequest     `protobuf:"bytes,13,rep,name=update_endpoints,json=updateEndpoints,proto3" json:"update_endpoints,omitempty"`
	DeleteEndpoints      []*DeleteEndpointRequest     `protobuf:"bytes,14,rep,name=delete_endpoints,json=deleteEndpoints,proto3" json:"delete_endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BatchOperationRequest) Reset()         { *m = BatchOperationRequest{} }
func (m *BatchOperationRequest) String() string { return proto.CompactTextString(m) }
func (*BatchOperationRequest) ProtoMessage()    {}
func (*BatchOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_physical_topology_c48899be8e152909, []int{21}
}
func (m *BatchOperationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchOperationRequest.Unmarshal(m, b)
}
func (m *BatchOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchOperationRequest.Marshal(b, m, deterministic)
}
func (dst *BatchOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchOperationRequest.Merge(dst, src)
}
func (m *BatchOperationRequest) XXX_Size() int {
	return xxx_messageInfo_BatchOperationRequest.Size(m)
}
func (m *BatchOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchOperationRequest proto.InternalMessageInfo

func (m *BatchOperationRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *BatchOperationRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *BatchOperationRequest) GetCreateNamespaces() []*CreateNamespaceRequest {
	if m != nil {
		return m.CreateNamespaces
	}
	return nil
}

func (m *BatchOperationRequest) GetUpdateNamespaces() []*UpdateNamespaceRequest {
	if m != nil {
		return m.UpdateNamespaces
	}
	return nil
}

func (m *BatchOperationRequest) GetDeleteNamespaces() []*DeleteNamespaceRequest {
	if m != nil {
		return m.DeleteNamespaces
	}
	return nil
}

func (m *BatchOperationRequest) GetCreateLoadbalancers() []*CreateLoadBalancerRequest {
	if m != nil {
		return m.CreateLoadbalancers
	}
	return nil
}

func (m *BatchOperationRequest) GetUpdateLoadbalancers() []*UpdateLoadBalancerRequest {
	if m != nil {
		return m.UpdateLoadbalancers
	}
	return nil
}

func (m *BatchOperationRequest) GetDeleteLoadbalancers() []*DeleteLoadBalancerRequest {
	if m != nil {
		return m.DeleteLoadbalancers
	}
	return nil
}

func (m *BatchOperationRequest) GetCreateServices() []*CreateServiceRequest {
	if m != nil {
		return m.CreateServices
	}
	return nil
}

func (m *BatchOperationRequest) GetUpdateServices() []*UpdateServiceRequest {
	if m != nil {
		return m.UpdateServices
	}
	return nil
}

func (m *BatchOperationRequest) GetDeleteServices() []*DeleteServiceRequest {
	if m != nil {
		return m.DeleteServices
	}
	return nil
}

func (m *BatchOperationRequest) GetCreateEndpoints() []*CreateEndpointRequest {
	if m != nil {
		return m.CreateEndpoints
	}
	return nil
}

func (m *BatchOperationRequest) GetUpdateEndpoints() []*UpdateEndpointRequest {
	if m != nil {
		return m.UpdateEndpoints
	}
	return nil
}

func (m *BatchOperationRequest) GetDeleteEndpoints() []*DeleteEndpointRequest {
	if m != nil {
		return m.DeleteEndpoints
	}
	return nil
}

func init() {
	proto.RegisterType((*Cluster)(nil), "tetrate.api.tcc.core.v1.Cluster")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.Cluster.AttributesEntry")
	proto.RegisterType((*CreateClusterRequest)(nil), "tetrate.api.tcc.core.v1.CreateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.CreateClusterRequest.AttributesEntry")
	proto.RegisterType((*UpdateClusterRequest)(nil), "tetrate.api.tcc.core.v1.UpdateClusterRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.UpdateClusterRequest.AttributesEntry")
	proto.RegisterType((*GetClusterRequest)(nil), "tetrate.api.tcc.core.v1.GetClusterRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "tetrate.api.tcc.core.v1.ListClustersRequest")
	proto.RegisterType((*ListClustersResponse)(nil), "tetrate.api.tcc.core.v1.ListClustersResponse")
	proto.RegisterType((*DeleteClusterRequest)(nil), "tetrate.api.tcc.core.v1.DeleteClusterRequest")
	proto.RegisterType((*Namespace)(nil), "tetrate.api.tcc.core.v1.Namespace")
	proto.RegisterType((*CreateNamespaceRequest)(nil), "tetrate.api.tcc.core.v1.CreateNamespaceRequest")
	proto.RegisterType((*UpdateNamespaceRequest)(nil), "tetrate.api.tcc.core.v1.UpdateNamespaceRequest")
	proto.RegisterType((*GetNamespaceRequest)(nil), "tetrate.api.tcc.core.v1.GetNamespaceRequest")
	proto.RegisterType((*ListNamespacesRequest)(nil), "tetrate.api.tcc.core.v1.ListNamespacesRequest")
	proto.RegisterType((*ListNamespacesResponse)(nil), "tetrate.api.tcc.core.v1.ListNamespacesResponse")
	proto.RegisterType((*DeleteNamespaceRequest)(nil), "tetrate.api.tcc.core.v1.DeleteNamespaceRequest")
	proto.RegisterType((*LoadBalancer)(nil), "tetrate.api.tcc.core.v1.LoadBalancer")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.LoadBalancer.LabelsEntry")
	proto.RegisterMapType((map[string]*TLSSettings)(nil), "tetrate.api.tcc.core.v1.LoadBalancer.ServicesEntry")
	proto.RegisterType((*CreateLoadBalancerRequest)(nil), "tetrate.api.tcc.core.v1.CreateLoadBalancerRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.CreateLoadBalancerRequest.LabelsEntry")
	proto.RegisterType((*GetLoadBalancerRequest)(nil), "tetrate.api.tcc.core.v1.GetLoadBalancerRequest")
	proto.RegisterType((*ListLoadBalancersRequest)(nil), "tetrate.api.tcc.core.v1.ListLoadBalancersRequest")
	proto.RegisterType((*ListLoadBalancersResponse)(nil), "tetrate.api.tcc.core.v1.ListLoadBalancersResponse")
	proto.RegisterType((*UpdateLoadBalancerRequest)(nil), "tetrate.api.tcc.core.v1.UpdateLoadBalancerRequest")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.UpdateLoadBalancerRequest.LabelsEntry")
	proto.RegisterType((*DeleteLoadBalancerRequest)(nil), "tetrate.api.tcc.core.v1.DeleteLoadBalancerRequest")
	proto.RegisterType((*BatchOperationRequest)(nil), "tetrate.api.tcc.core.v1.BatchOperationRequest")
	proto.RegisterEnum("tetrate.api.tcc.core.v1.LBClass", LBClass_name, LBClass_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PhysicalTopologyClient is the client API for PhysicalTopology service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PhysicalTopologyClient interface {
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error)
	GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error)
	UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error)
	GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error)
	ListLoadBalancers(ctx context.Context, in *ListLoadBalancersRequest, opts ...grpc.CallOption) (*ListLoadBalancersResponse, error)
	UpdateLoadBalancer(ctx context.Context, in *UpdateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error)
	DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Service, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error)
	ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error)
	GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error)
	ListNamespaceEndpoint(ctx context.Context, in *ListNamespaceEndpointRequest, opts ...grpc.CallOption) (*ListEndpointResponse, error)
	ListServiceEndpoint(ctx context.Context, in *ListServiceEndpointRequest, opts ...grpc.CallOption) (*ListEndpointResponse, error)
	UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error)
	DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type physicalTopologyClient struct {
	cc *grpc.ClientConn
}

func NewPhysicalTopologyClient(cc *grpc.ClientConn) PhysicalTopologyClient {
	return &physicalTopologyClient{cc}
}

func (c *physicalTopologyClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) GetNamespace(ctx context.Context, in *GetNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/GetNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) UpdateNamespace(ctx context.Context, in *UpdateNamespaceRequest, opts ...grpc.CallOption) (*Namespace, error) {
	out := new(Namespace)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequest, opts ...grpc.CallOption) (*ListNamespacesResponse, error) {
	out := new(ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) CreateLoadBalancer(ctx context.Context, in *CreateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error) {
	out := new(LoadBalancer)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) GetLoadBalancer(ctx context.Context, in *GetLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error) {
	out := new(LoadBalancer)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/GetLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListLoadBalancers(ctx context.Context, in *ListLoadBalancersRequest, opts ...grpc.CallOption) (*ListLoadBalancersResponse, error) {
	out := new(ListLoadBalancersResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListLoadBalancers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) UpdateLoadBalancer(ctx context.Context, in *UpdateLoadBalancerRequest, opts ...grpc.CallOption) (*LoadBalancer, error) {
	out := new(LoadBalancer)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) DeleteLoadBalancer(ctx context.Context, in *DeleteLoadBalancerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteLoadBalancer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListService(ctx context.Context, in *ListServiceRequest, opts ...grpc.CallOption) (*ListServiceResponse, error) {
	out := new(ListServiceResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) CreateEndpoint(ctx context.Context, in *CreateEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) GetEndpoint(ctx context.Context, in *GetEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/GetEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListNamespaceEndpoint(ctx context.Context, in *ListNamespaceEndpointRequest, opts ...grpc.CallOption) (*ListEndpointResponse, error) {
	out := new(ListEndpointResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListNamespaceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) ListServiceEndpoint(ctx context.Context, in *ListServiceEndpointRequest, opts ...grpc.CallOption) (*ListEndpointResponse, error) {
	out := new(ListEndpointResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/ListServiceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) UpdateEndpoint(ctx context.Context, in *UpdateEndpointRequest, opts ...grpc.CallOption) (*Endpoint, error) {
	out := new(Endpoint)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) DeleteEndpoint(ctx context.Context, in *DeleteEndpointRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *physicalTopologyClient) BatchOperation(ctx context.Context, in *BatchOperationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.PhysicalTopology/BatchOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhysicalTopologyServer is the server API for PhysicalTopology service.
type PhysicalTopologyServer interface {
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error)
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*empty.Empty, error)
	CreateNamespace(context.Context, *CreateNamespaceRequest) (*Namespace, error)
	GetNamespace(context.Context, *GetNamespaceRequest) (*Namespace, error)
	UpdateNamespace(context.Context, *UpdateNamespaceRequest) (*Namespace, error)
	ListNamespaces(context.Context, *ListNamespacesRequest) (*ListNamespacesResponse, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequest) (*empty.Empty, error)
	CreateLoadBalancer(context.Context, *CreateLoadBalancerRequest) (*LoadBalancer, error)
	GetLoadBalancer(context.Context, *GetLoadBalancerRequest) (*LoadBalancer, error)
	ListLoadBalancers(context.Context, *ListLoadBalancersRequest) (*ListLoadBalancersResponse, error)
	UpdateLoadBalancer(context.Context, *UpdateLoadBalancerRequest) (*LoadBalancer, error)
	DeleteLoadBalancer(context.Context, *DeleteLoadBalancerRequest) (*empty.Empty, error)
	CreateService(context.Context, *CreateServiceRequest) (*Service, error)
	GetService(context.Context, *GetServiceRequest) (*Service, error)
	ListService(context.Context, *ListServiceRequest) (*ListServiceResponse, error)
	UpdateService(context.Context, *UpdateServiceRequest) (*Service, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*empty.Empty, error)
	CreateEndpoint(context.Context, *CreateEndpointRequest) (*Endpoint, error)
	GetEndpoint(context.Context, *GetEndpointRequest) (*Endpoint, error)
	ListNamespaceEndpoint(context.Context, *ListNamespaceEndpointRequest) (*ListEndpointResponse, error)
	ListServiceEndpoint(context.Context, *ListServiceEndpointRequest) (*ListEndpointResponse, error)
	UpdateEndpoint(context.Context, *UpdateEndpointRequest) (*Endpoint, error)
	DeleteEndpoint(context.Context, *DeleteEndpointRequest) (*empty.Empty, error)
	BatchOperation(context.Context, *BatchOperationRequest) (*empty.Empty, error)
}

func RegisterPhysicalTopologyServer(s *grpc.Server, srv PhysicalTopologyServer) {
	s.RegisterService(&_PhysicalTopology_serviceDesc, srv)
}

func _PhysicalTopology_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).CreateNamespace(ctx, req.(*CreateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_GetNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).GetNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/GetNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).GetNamespace(ctx, req.(*GetNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_UpdateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).UpdateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).UpdateNamespace(ctx, req.(*UpdateNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListNamespaces(ctx, req.(*ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_CreateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).CreateLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).CreateLoadBalancer(ctx, req.(*CreateLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_GetLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).GetLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/GetLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).GetLoadBalancer(ctx, req.(*GetLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListLoadBalancers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoadBalancersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListLoadBalancers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListLoadBalancers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListLoadBalancers(ctx, req.(*ListLoadBalancersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_UpdateLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).UpdateLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).UpdateLoadBalancer(ctx, req.(*UpdateLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_DeleteLoadBalancer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoadBalancerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).DeleteLoadBalancer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteLoadBalancer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).DeleteLoadBalancer(ctx, req.(*DeleteLoadBalancerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListService(ctx, req.(*ListServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).UpdateService(ctx, req.(*UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_CreateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).CreateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/CreateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).CreateEndpoint(ctx, req.(*CreateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_GetEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).GetEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/GetEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).GetEndpoint(ctx, req.(*GetEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListNamespaceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespaceEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListNamespaceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListNamespaceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListNamespaceEndpoint(ctx, req.(*ListNamespaceEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_ListServiceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).ListServiceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/ListServiceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).ListServiceEndpoint(ctx, req.(*ListServiceEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_UpdateEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).UpdateEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/UpdateEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).UpdateEndpoint(ctx, req.(*UpdateEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_DeleteEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).DeleteEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/DeleteEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).DeleteEndpoint(ctx, req.(*DeleteEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhysicalTopology_BatchOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhysicalTopologyServer).BatchOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.PhysicalTopology/BatchOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhysicalTopologyServer).BatchOperation(ctx, req.(*BatchOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PhysicalTopology_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.core.v1.PhysicalTopology",
	HandlerType: (*PhysicalTopologyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _PhysicalTopology_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _PhysicalTopology_UpdateCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _PhysicalTopology_GetCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _PhysicalTopology_ListClusters_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _PhysicalTopology_DeleteCluster_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _PhysicalTopology_CreateNamespace_Handler,
		},
		{
			MethodName: "GetNamespace",
			Handler:    _PhysicalTopology_GetNamespace_Handler,
		},
		{
			MethodName: "UpdateNamespace",
			Handler:    _PhysicalTopology_UpdateNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _PhysicalTopology_ListNamespaces_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _PhysicalTopology_DeleteNamespace_Handler,
		},
		{
			MethodName: "CreateLoadBalancer",
			Handler:    _PhysicalTopology_CreateLoadBalancer_Handler,
		},
		{
			MethodName: "GetLoadBalancer",
			Handler:    _PhysicalTopology_GetLoadBalancer_Handler,
		},
		{
			MethodName: "ListLoadBalancers",
			Handler:    _PhysicalTopology_ListLoadBalancers_Handler,
		},
		{
			MethodName: "UpdateLoadBalancer",
			Handler:    _PhysicalTopology_UpdateLoadBalancer_Handler,
		},
		{
			MethodName: "DeleteLoadBalancer",
			Handler:    _PhysicalTopology_DeleteLoadBalancer_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _PhysicalTopology_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _PhysicalTopology_GetService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _PhysicalTopology_ListService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _PhysicalTopology_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _PhysicalTopology_DeleteService_Handler,
		},
		{
			MethodName: "CreateEndpoint",
			Handler:    _PhysicalTopology_CreateEndpoint_Handler,
		},
		{
			MethodName: "GetEndpoint",
			Handler:    _PhysicalTopology_GetEndpoint_Handler,
		},
		{
			MethodName: "ListNamespaceEndpoint",
			Handler:    _PhysicalTopology_ListNamespaceEndpoint_Handler,
		},
		{
			MethodName: "ListServiceEndpoint",
			Handler:    _PhysicalTopology_ListServiceEndpoint_Handler,
		},
		{
			MethodName: "UpdateEndpoint",
			Handler:    _PhysicalTopology_UpdateEndpoint_Handler,
		},
		{
			MethodName: "DeleteEndpoint",
			Handler:    _PhysicalTopology_DeleteEndpoint_Handler,
		},
		{
			MethodName: "BatchOperation",
			Handler:    _PhysicalTopology_BatchOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "physical_topology.proto",
}

func init() {
	proto.RegisterFile("physical_topology.proto", fileDescriptor_physical_topology_c48899be8e152909)
}

var fileDescriptor_physical_topology_c48899be8e152909 = []byte{
	// 1884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x6f, 0xdc, 0xc6,
	0x15, 0x37, 0xb5, 0xfa, 0x7c, 0xbb, 0x5a, 0x49, 0x23, 0x59, 0x5e, 0xb3, 0x2e, 0x2a, 0xb3, 0xb6,
	0xeb, 0xae, 0x25, 0xb2, 0x92, 0xeb, 0xc2, 0x56, 0x6b, 0x17, 0x96, 0x2d, 0xcb, 0x6a, 0x05, 0x4b,
	0xa5, 0x64, 0xbb, 0xf5, 0x97, 0x40, 0x71, 0xc7, 0x12, 0xdb, 0x15, 0xc9, 0x2e, 0x67, 0x05, 0x2c,
	0x5c, 0xa1, 0x40, 0xd1, 0x43, 0x6f, 0x45, 0xdd, 0xab, 0x73, 0x4a, 0x80, 0x5c, 0x92, 0x83, 0x73,
	0x30, 0x90, 0x43, 0x62, 0xe4, 0x92, 0x6b, 0x02, 0xe4, 0x9e, 0x53, 0xfe, 0x90, 0x80, 0xc3, 0x21,
	0x97, 0xe4, 0xf2, 0x53, 0xd2, 0xc2, 0x48, 0xec, 0xdb, 0x72, 0x38, 0xf3, 0x9b, 0xdf, 0xfb, 0xcd,
	0x7b, 0x8f, 0x6f, 0x9e, 0x04, 0x27, 0xcc, 0x9d, 0x96, 0xa5, 0xa9, 0x4a, 0x7d, 0x93, 0x18, 0xa6,
	0x51, 0x37, 0xb6, 0x5b, 0xa2, 0xd9, 0x30, 0x88, 0x81, 0x4e, 0x10, 0x4c, 0x1a, 0x0a, 0xc1, 0xa2,
	0x62, 0x6a, 0x22, 0x51, 0x55, 0x51, 0x35, 0x1a, 0x58, 0xdc, 0x9b, 0xe5, 0x4f, 0x6d, 0x1b, 0xc6,
	0x76, 0x1d, 0x4b, 0x8a, 0xa9, 0x49, 0x8a, 0xae, 0x1b, 0x44, 0x21, 0x9a, 0xa1, 0x5b, 0xce, 0x32,
	0xfe, 0x27, 0xec, 0x2d, 0x7d, 0xda, 0x6a, 0x3e, 0x95, 0xf0, 0xae, 0x49, 0x18, 0x26, 0x5f, 0xc6,
	0x7a, 0xcd, 0x34, 0x34, 0x9d, 0xb0, 0xe7, 0x61, 0x0b, 0x37, 0xf6, 0x34, 0x15, 0xb3, 0xc7, 0xe3,
	0x6a, 0x5d, 0xc3, 0x3a, 0xd9, 0xb4, 0x30, 0x21, 0x9a, 0xbe, 0xed, 0x42, 0x8e, 0x99, 0xb8, 0xb1,
	0xab, 0x59, 0x96, 0x6f, 0x97, 0x31, 0x52, 0xb7, 0x82, 0xb3, 0x84, 0x0f, 0x0b, 0x30, 0x70, 0xa3,
	0xde, 0xb4, 0x08, 0x6e, 0x20, 0x04, 0xbd, 0xba, 0xb2, 0x8b, 0x2b, 0xdc, 0x14, 0x77, 0x7e, 0x48,
	0xa6, 0xbf, 0xd1, 0x69, 0x28, 0xd5, 0x34, 0xcb, 0xac, 0x2b, 0xad, 0x4d, 0xfa, 0xae, 0x87, 0xbe,
	0x2b, 0xb2, 0xb1, 0x3b, 0xf6, 0x94, 0x49, 0xe8, 0x27, 0x58, 0x57, 0x74, 0x52, 0x29, 0xd0, 0x97,
	0xec, 0x09, 0x09, 0x50, 0x6a, 0xe0, 0x6d, 0xcd, 0x22, 0x8d, 0x16, 0x69, 0x99, 0xb8, 0xd2, 0x4b,
	0xdf, 0x06, 0xc6, 0xd0, 0x1a, 0x80, 0x42, 0x48, 0x43, 0xdb, 0x6a, 0x12, 0x6c, 0x55, 0xfa, 0xa6,
	0x0a, 0xe7, 0x8b, 0x73, 0xbf, 0x12, 0x63, 0x34, 0x14, 0x19, 0x51, 0xf1, 0xba, 0xb7, 0x64, 0x51,
	0x27, 0x8d, 0x96, 0xec, 0xc3, 0x40, 0x6b, 0x30, 0x12, 0xd2, 0xa3, 0xd2, 0x3f, 0xc5, 0x9d, 0x2f,
	0xce, 0xfd, 0x22, 0x01, 0xd6, 0x9e, 0xbf, 0xce, 0xa6, 0xcb, 0x65, 0x35, 0xf0, 0x8c, 0x6e, 0x41,
	0xd1, 0x27, 0x65, 0x65, 0x80, 0xa2, 0x9d, 0x89, 0x45, 0x5b, 0x6b, 0xcf, 0x95, 0xfd, 0x0b, 0xf9,
	0xab, 0x30, 0x12, 0x22, 0x8e, 0x46, 0xa1, 0xf0, 0x37, 0xdc, 0x62, 0x82, 0xdb, 0x3f, 0xd1, 0x04,
	0xf4, 0xed, 0x29, 0xf5, 0xa6, 0x2b, 0xb4, 0xf3, 0x30, 0xdf, 0x73, 0x99, 0x13, 0xbe, 0x28, 0xc0,
	0xc4, 0x8d, 0x06, 0x56, 0x08, 0x66, 0x32, 0xc8, 0xf8, 0xef, 0x4d, 0x6c, 0x91, 0x37, 0x71, 0x6c,
	0x8f, 0x23, 0x8e, 0xed, 0x6a, 0xbc, 0xbe, 0x11, 0xac, 0xdf, 0xde, 0x33, 0xbc, 0x6b, 0xd6, 0x7e,
	0x80, 0x67, 0x18, 0xc5, 0xfa, 0xed, 0x3c, 0xc3, 0xdf, 0xc3, 0xd8, 0x12, 0x26, 0x19, 0xce, 0xaf,
	0x7d, 0x38, 0x3d, 0xfe, 0xc3, 0x11, 0x66, 0x60, 0x7c, 0x45, 0xb3, 0x5c, 0x04, 0xcb, 0x85, 0x68,
	0x4f, 0xe7, 0x02, 0xd3, 0x37, 0x60, 0x22, 0x38, 0xdd, 0x32, 0x0d, 0xdd, 0xc2, 0xe8, 0x77, 0x30,
	0xa8, 0xb2, 0xb1, 0x0a, 0x47, 0x4f, 0x6f, 0x2a, 0x2d, 0x71, 0xca, 0xde, 0x0a, 0x61, 0x01, 0x26,
	0x6e, 0xe2, 0x3a, 0xce, 0xe4, 0x88, 0x71, 0x86, 0xfc, 0xb7, 0x07, 0x86, 0x6c, 0x37, 0xb4, 0x4c,
	0x45, 0xc5, 0x91, 0x2b, 0x2b, 0x30, 0xc0, 0x76, 0x64, 0x4b, 0xdd, 0xc7, 0x24, 0xcf, 0xad, 0x61,
	0x13, 0xeb, 0x35, 0xac, 0xab, 0x1a, 0xb6, 0x2a, 0xbd, 0x53, 0x05, 0xdb, 0x73, 0xfd, 0x63, 0x51,
	0xae, 0xd5, 0x77, 0xa4, 0xae, 0xd5, 0x7f, 0x40, 0xd7, 0x12, 0x5e, 0xf4, 0xc0, 0xa4, 0x93, 0xed,
	0x3c, 0x5d, 0x92, 0x84, 0x7d, 0x1b, 0xe5, 0x71, 0x12, 0xc9, 0x3b, 0x79, 0x22, 0xe4, 0x79, 0x08,
	0xe3, 0x4b, 0x98, 0x74, 0x47, 0x1a, 0x61, 0x19, 0x8e, 0xdb, 0x69, 0xc4, 0x43, 0xf7, 0xf2, 0x8e,
	0x0f, 0x8a, 0x8b, 0x83, 0x0a, 0xc6, 0xfd, 0x23, 0x98, 0x0c, 0x43, 0xb1, 0x9c, 0xb4, 0x00, 0xa0,
	0x7b, 0xa3, 0x2c, 0x2b, 0x09, 0xb1, 0x42, 0xb4, 0x2d, 0xf5, 0xad, 0x12, 0x9e, 0xc0, 0xa4, 0x93,
	0x99, 0xba, 0x24, 0xc4, 0xe7, 0xbd, 0x50, 0x5a, 0x31, 0x94, 0xda, 0x82, 0x52, 0x57, 0x74, 0x35,
	0xa6, 0xec, 0x3d, 0x05, 0x43, 0x1e, 0x25, 0x06, 0xdc, 0x1e, 0xf0, 0x6f, 0x5a, 0x88, 0xdb, 0xb4,
	0x37, 0xe0, 0x98, 0xbf, 0x81, 0x3e, 0xb5, 0xae, 0x58, 0x8e, 0xab, 0x95, 0x13, 0x32, 0xf5, 0xca,
	0xc2, 0x0d, 0x7b, 0x9e, 0xec, 0x4c, 0x47, 0x67, 0x61, 0x78, 0x57, 0xd1, 0x95, 0x6d, 0xbc, 0x6b,
	0x3b, 0xac, 0x66, 0x52, 0xe7, 0x1a, 0xba, 0x7d, 0x4c, 0x2e, 0xb5, 0x87, 0x97, 0x4d, 0xf4, 0x73,
	0x28, 0xb1, 0x3b, 0x81, 0x53, 0x2a, 0x0c, 0xb0, 0x59, 0x45, 0x36, 0x4a, 0x8b, 0x85, 0x65, 0xe8,
	0xaf, 0x2b, 0x5b, 0xb8, 0x6e, 0x55, 0x06, 0xe9, 0xc1, 0xcc, 0xc6, 0x93, 0xf0, 0xc9, 0x23, 0xae,
	0xd0, 0x35, 0xce, 0x07, 0x9e, 0x01, 0xa0, 0x55, 0x18, 0x64, 0xc8, 0x56, 0x65, 0x88, 0x82, 0x5d,
	0xcc, 0x06, 0xb6, 0xce, 0x56, 0x39, 0x70, 0x1e, 0x08, 0x7f, 0x05, 0x8a, 0xbe, 0x7d, 0xf2, 0x7c,
	0x8f, 0x79, 0x05, 0x86, 0x03, 0xa8, 0x11, 0x8b, 0xe7, 0xfd, 0x8b, 0x93, 0x42, 0x73, 0x63, 0x65,
	0xdd, 0x8b, 0xf2, 0xf6, 0x16, 0x0b, 0x25, 0x00, 0x7a, 0x1c, 0x9b, 0x9a, 0xfe, 0xd4, 0x10, 0x3e,
	0x28, 0xc0, 0x49, 0x27, 0xc9, 0xfb, 0x4d, 0x4b, 0x72, 0xd2, 0x1f, 0xa3, 0x37, 0xdd, 0x0b, 0x79,
	0xd3, 0xb5, 0x94, 0xf2, 0x3f, 0x42, 0xab, 0x28, 0xd7, 0x3a, 0x84, 0x27, 0x84, 0x8e, 0xe9, 0x1f,
	0x30, 0xb9, 0x84, 0xc9, 0x1b, 0x3a, 0x22, 0xe1, 0xaf, 0x50, 0xb1, 0x73, 0xa4, 0x7f, 0x7b, 0x2f,
	0xe3, 0x06, 0xf6, 0xe2, 0x12, 0xf6, 0xca, 0x98, 0xd1, 0x76, 0xe0, 0x64, 0xc4, 0x5e, 0x2c, 0x25,
	0xff, 0x11, 0x86, 0xeb, 0x86, 0x52, 0xdb, 0x72, 0x5f, 0xb0, 0xac, 0x7c, 0x36, 0x53, 0xbc, 0xca,
	0xc1, 0xb5, 0xd4, 0xf5, 0x9d, 0x0f, 0xf8, 0x3b, 0xd7, 0xcf, 0xe2, 0xfa, 0xb1, 0x5a, 0x75, 0xd7,
	0xf5, 0xff, 0x09, 0x27, 0x9d, 0x4f, 0xe8, 0x9b, 0xf2, 0xfe, 0x97, 0x43, 0x70, 0x7c, 0x41, 0x21,
	0xea, 0xce, 0xaa, 0x89, 0x1b, 0xb4, 0xd1, 0x95, 0x72, 0xcb, 0x49, 0xf0, 0xfa, 0x47, 0x30, 0xa6,
	0xd2, 0x0c, 0xb2, 0xe9, 0x2b, 0x2d, 0x0a, 0x54, 0x78, 0x29, 0x25, 0xe7, 0x84, 0x2b, 0x08, 0x79,
	0x54, 0x0d, 0x8e, 0x5b, 0x36, 0x7a, 0x93, 0x1e, 0x92, 0x1f, 0xbd, 0x37, 0x05, 0x3d, 0xba, 0x86,
	0x95, 0x47, 0x9b, 0xc1, 0x71, 0x8a, 0x5e, 0xa3, 0x07, 0xe1, 0x47, 0xef, 0x4b, 0x41, 0x8f, 0xae,
	0x7e, 0xe4, 0xd1, 0x5a, 0x70, 0xdc, 0x42, 0x18, 0x26, 0x98, 0x32, 0xc1, 0x08, 0xef, 0xa7, 0x1b,
	0xcc, 0xe5, 0x4f, 0xc8, 0xf2, 0xb8, 0xea, 0xbd, 0xf2, 0xe0, 0xec, 0x6d, 0x98, 0x44, 0xc1, 0x6d,
	0x06, 0x52, 0xb6, 0x89, 0x75, 0x7e, 0x79, 0xbc, 0xe9, 0xbd, 0x0a, 0x6c, 0xc3, 0xb4, 0x0a, 0x6e,
	0x33, 0x98, 0xb2, 0x4d, 0xac, 0xa7, 0xcb, 0xe3, 0x35, 0xef, 0x55, 0x7b, 0x9b, 0x7b, 0x30, 0xc2,
	0x44, 0x0b, 0x55, 0x30, 0x33, 0x29, 0x7a, 0xb1, 0x22, 0xc3, 0x05, 0x2f, 0xab, 0xfe, 0x51, 0x8a,
	0xcb, 0x54, 0xf2, 0x70, 0x21, 0x05, 0xd7, 0x11, 0x28, 0x8c, 0xdb, 0xf4, 0x8f, 0x52, 0x5c, 0x26,
	0x8b, 0x87, 0x5b, 0x4c, 0xc1, 0x75, 0x14, 0x09, 0xe3, 0xd6, 0xfc, 0xa3, 0x16, 0xfa, 0x0b, 0xb0,
	0x60, 0xd8, 0x74, 0xbb, 0xcb, 0x56, 0xa5, 0x44, 0x81, 0xc5, 0x14, 0x21, 0x16, 0xd9, 0x7c, 0x17,
	0x99, 0xe9, 0xe9, 0x0e, 0x53, 0x68, 0x26, 0x45, 0x1b, 0x7a, 0x38, 0x05, 0xda, 0xd1, 0xa2, 0x03,
	0xba, 0x19, 0x18, 0xa6, 0xd0, 0x4c, 0x8d, 0x36, 0x74, 0x39, 0x05, 0xda, 0x91, 0xa3, 0x03, 0xba,
	0x16, 0x18, 0xb6, 0xaa, 0xa7, 0x60, 0x80, 0x7d, 0x33, 0xd0, 0x10, 0xf4, 0x2d, 0xea, 0x7b, 0x46,
	0x6b, 0xf4, 0x18, 0xea, 0x87, 0x9e, 0x5b, 0x97, 0x46, 0xb9, 0xb9, 0x17, 0xe7, 0x60, 0x74, 0x8d,
	0xf5, 0xfc, 0x37, 0x58, 0xcb, 0x1f, 0xfd, 0x8f, 0x83, 0xe1, 0x40, 0x73, 0x13, 0xcd, 0xe4, 0x6a,
	0x82, 0xf2, 0xa9, 0x1d, 0x1b, 0x41, 0xfa, 0xd7, 0x37, 0xdf, 0xfd, 0xbf, 0xe7, 0x97, 0xc2, 0x19,
	0x69, 0x6f, 0x56, 0x72, 0x72, 0xa5, 0x25, 0x3d, 0x73, 0x7e, 0xec, 0x4b, 0x6e, 0x3b, 0x47, 0x7a,
	0x66, 0xe7, 0x97, 0xfd, 0x79, 0xae, 0x4a, 0x39, 0x05, 0x9a, 0x75, 0x68, 0x26, 0x57, 0x53, 0x2f,
	0x3b, 0x27, 0x3e, 0x33, 0xa7, 0xff, 0x70, 0x00, 0xed, 0x9e, 0x19, 0xaa, 0xc6, 0xee, 0xd0, 0xd1,
	0x58, 0xcb, 0xc0, 0x66, 0x9a, 0xb2, 0x39, 0x87, 0x32, 0xb1, 0x41, 0xcf, 0x39, 0x28, 0xf9, 0xdb,
	0x69, 0x68, 0x3a, 0xbe, 0x82, 0xe8, 0x6c, 0xd2, 0xf1, 0x33, 0x19, 0x67, 0x3b, 0xc5, 0x97, 0x70,
	0x96, 0x72, 0xfb, 0x19, 0xfa, 0x69, 0x22, 0x37, 0xf4, 0x6f, 0x0e, 0x86, 0x03, 0xdd, 0x38, 0x94,
	0x16, 0xdc, 0x21, 0x95, 0x26, 0x45, 0xe7, 0xef, 0x47, 0xa2, 0xfb, 0xf7, 0x23, 0x71, 0x71, 0xd7,
	0x24, 0x2d, 0x57, 0x9b, 0x6a, 0x36, 0x6d, 0x3e, 0xe2, 0x60, 0x24, 0xf4, 0xe1, 0x44, 0x79, 0x3f,
	0xb1, 0x7c, 0x86, 0xeb, 0xbe, 0x70, 0x93, 0xd2, 0xba, 0x26, 0x5c, 0x49, 0xa1, 0xc5, 0x7e, 0xed,
	0x4b, 0xed, 0xaf, 0xa7, 0xcf, 0xab, 0xde, 0xe7, 0xa0, 0xe4, 0xef, 0x97, 0x24, 0x1c, 0x65, 0x44,
	0x5b, 0x25, 0x13, 0xd1, 0xeb, 0x94, 0xe8, 0x6f, 0xd1, 0xc1, 0x89, 0x52, 0x51, 0x43, 0xf5, 0x02,
	0xca, 0x5b, 0x59, 0xe4, 0x11, 0x95, 0x3f, 0x9c, 0xa8, 0x1f, 0x73, 0x50, 0x0e, 0x36, 0x77, 0x90,
	0x98, 0xe8, 0xf3, 0x1d, 0x0d, 0x25, 0x5e, 0xca, 0x3c, 0x9f, 0x45, 0xc9, 0x3c, 0x65, 0xfe, 0x6b,
	0x34, 0x97, 0x9f, 0x39, 0x7a, 0x8f, 0x83, 0x91, 0x50, 0xc1, 0x84, 0xf2, 0x96, 0x56, 0xb1, 0xe1,
	0xc3, 0x8e, 0xbf, 0x7a, 0x88, 0xe3, 0xff, 0x8a, 0x03, 0xd4, 0x59, 0x6f, 0xa1, 0x03, 0x14, 0x67,
	0x7c, 0xb6, 0x2b, 0x9b, 0xf0, 0x84, 0x92, 0xfe, 0xb3, 0xb0, 0x7e, 0x50, 0xd2, 0xf4, 0xf7, 0xbe,
	0x14, 0xa8, 0xc2, 0x7c, 0x1e, 0xf2, 0x25, 0x07, 0x23, 0xa1, 0x8b, 0x75, 0x82, 0xe2, 0xd1, 0x57,
	0xf0, 0xac, 0xb6, 0x3c, 0xa4, 0xb6, 0xdc, 0x45, 0xdd, 0xb0, 0x05, 0x7d, 0xcd, 0xc1, 0x58, 0xc7,
	0xbd, 0x19, 0xcd, 0x26, 0x7a, 0x6f, 0xd4, 0x7d, 0x9e, 0x9f, 0xcb, 0xb3, 0x84, 0xf9, 0xfc, 0x06,
	0xb5, 0xec, 0x0e, 0x5a, 0x39, 0x4a, 0xcb, 0xa8, 0xb7, 0x75, 0x96, 0xdd, 0xe8, 0x00, 0x35, 0x7a,
	0x4e, 0x6f, 0xe3, 0xbb, 0xe5, 0x6d, 0x9f, 0x71, 0x80, 0x3a, 0x2b, 0x7c, 0x74, 0x80, 0xeb, 0x40,
	0x6c, 0x94, 0x33, 0x27, 0xab, 0x76, 0xc5, 0xc9, 0x5e, 0x7b, 0x25, 0x22, 0xab, 0xbc, 0x51, 0xbe,
	0x7b, 0x46, 0x42, 0x01, 0xc4, 0x26, 0x0a, 0x8f, 0x29, 0xff, 0xfb, 0x82, 0x7c, 0x48, 0xfe, 0xee,
	0xfd, 0x42, 0x7a, 0xb6, 0x63, 0x58, 0xc4, 0x3b, 0x81, 0x57, 0x4e, 0xf1, 0xe6, 0xd2, 0x4f, 0x2c,
	0xde, 0x72, 0x73, 0x7f, 0x40, 0xb9, 0x6f, 0xa0, 0x2e, 0x70, 0x47, 0x9f, 0x72, 0x50, 0xb4, 0x03,
	0xd0, 0x65, 0x7e, 0x21, 0x31, 0x4c, 0x43, 0xd4, 0xa7, 0xb3, 0x4d, 0x66, 0xd1, 0xbc, 0x4a, 0xcd,
	0x58, 0x46, 0x4b, 0x47, 0x64, 0x06, 0x75, 0x9b, 0xc0, 0xf5, 0x10, 0xe5, 0xbb, 0x46, 0x66, 0x77,
	0x1b, 0xbe, 0x4b, 0x6e, 0xf3, 0x89, 0x57, 0xd3, 0xa6, 0x5b, 0x10, 0x75, 0x61, 0x8d, 0x0d, 0x57,
	0xe6, 0x32, 0xd5, 0x6e, 0xb8, 0xcc, 0x6b, 0x0e, 0xca, 0xc1, 0x4b, 0x2e, 0xca, 0x79, 0x1b, 0xe6,
	0x4f, 0xc7, 0xce, 0x77, 0x67, 0xba, 0x16, 0x08, 0xab, 0x87, 0xb4, 0xc0, 0xbb, 0x02, 0xfb, 0xf2,
	0xe5, 0x2b, 0x0e, 0x8a, 0x4b, 0x98, 0x78, 0xf4, 0x2f, 0x24, 0x85, 0xeb, 0x01, 0xb8, 0xdf, 0xa7,
	0xdc, 0xff, 0x84, 0x8e, 0x9a, 0xbb, 0xfd, 0xe9, 0x0a, 0xfe, 0x81, 0xd2, 0x33, 0xe1, 0x52, 0xb6,
	0x7a, 0x32, 0x6c, 0x4c, 0xf2, 0x55, 0xad, 0x3d, 0x9b, 0x85, 0xf0, 0x1a, 0x35, 0xec, 0x0f, 0xe8,
	0xf6, 0x51, 0x19, 0x86, 0xbe, 0xe5, 0x9c, 0x7f, 0xf4, 0x60, 0x7e, 0xed, 0xd9, 0x73, 0x31, 0x4b,
	0x6a, 0x39, 0xa4, 0x35, 0x2a, 0xb5, 0xe6, 0x31, 0x7a, 0x78, 0x64, 0x41, 0xc2, 0x7e, 0xf9, 0x0d,
	0xb4, 0xa3, 0x25, 0xd8, 0xb7, 0x41, 0x39, 0x1b, 0x3c, 0x39, 0xa2, 0x85, 0xef, 0x46, 0xb4, 0xbc,
	0xe4, 0xa0, 0x1c, 0x6c, 0x0f, 0xa1, 0x9c, 0x7d, 0xa4, 0xd8, 0x34, 0xc5, 0x02, 0xa5, 0x7a, 0xe4,
	0x81, 0xf2, 0x9c, 0x83, 0x72, 0xb0, 0xb7, 0x9e, 0xc0, 0x39, 0xb2, 0x09, 0x1f, 0xcb, 0xf9, 0x32,
	0xe5, 0x3c, 0x27, 0xcc, 0x64, 0xe5, 0xbc, 0x65, 0xc3, 0xcf, 0x73, 0xd5, 0x05, 0xf1, 0xc1, 0xf4,
	0xb6, 0x46, 0x76, 0x9a, 0x5b, 0xa2, 0x6a, 0xec, 0x4a, 0x8c, 0x8d, 0x66, 0xb8, 0xbf, 0xe8, 0x7f,
	0xbd, 0x12, 0x55, 0x95, 0x6c, 0x5e, 0xd2, 0xde, 0xec, 0x56, 0x3f, 0xdd, 0xf9, 0xe2, 0xf7, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x07, 0x50, 0x69, 0x28, 0x48, 0x2b, 0x00, 0x00,
}
