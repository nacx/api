// Code generated by protoc-gen-go. DO NOT EDIT.
// source: routing_info.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import duration "github.com/golang/protobuf/ptypes/duration"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Registry int32

const (
	Registry_UNKNOWN    Registry = 0
	Registry_KUBERNETES Registry = 1
	Registry_VM         Registry = 2
)

var Registry_name = map[int32]string{
	0: "UNKNOWN",
	1: "KUBERNETES",
	2: "VM",
}
var Registry_value = map[string]int32{
	"UNKNOWN":    0,
	"KUBERNETES": 1,
	"VM":         2,
}

func (x Registry) String() string {
	return proto.EnumName(Registry_name, int32(x))
}
func (Registry) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{0}
}

// RoutingInfo
//
// HTTP routing settings for application or service. Subsets of a service should be declared here as well.
type RoutingInfo struct {
	// One or more versions of the service. Each version has a distinct name and a set of labels that help uniquely
	// identify the pods/VMs of that version.
	Subsets []*Subset `protobuf:"bytes,1,rep,name=subsets,proto3" json:"subsets,omitempty"`
	// HTTP specific settings, transformations and routing rules associated with HTTP traffic to this service.
	HttpSettings *HttpSettings `protobuf:"bytes,2,opt,name=http_settings,json=httpSettings,proto3" json:"http_settings,omitempty"`
	// TCP specific settings, transformations and routing rules associated with non-HTTP traffic to this service.
	TcpSettings          *TcpSettings `protobuf:"bytes,3,opt,name=tcp_settings,json=tcpSettings,proto3" json:"tcp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RoutingInfo) Reset()         { *m = RoutingInfo{} }
func (m *RoutingInfo) String() string { return proto.CompactTextString(m) }
func (*RoutingInfo) ProtoMessage()    {}
func (*RoutingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{0}
}
func (m *RoutingInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInfo.Unmarshal(m, b)
}
func (m *RoutingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInfo.Marshal(b, m, deterministic)
}
func (dst *RoutingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInfo.Merge(dst, src)
}
func (m *RoutingInfo) XXX_Size() int {
	return xxx_messageInfo_RoutingInfo.Size(m)
}
func (m *RoutingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInfo proto.InternalMessageInfo

func (m *RoutingInfo) GetSubsets() []*Subset {
	if m != nil {
		return m.Subsets
	}
	return nil
}

func (m *RoutingInfo) GetHttpSettings() *HttpSettings {
	if m != nil {
		return m.HttpSettings
	}
	return nil
}

func (m *RoutingInfo) GetTcpSettings() *TcpSettings {
	if m != nil {
		return m.TcpSettings
	}
	return nil
}

type Port struct {
	// A valid non-negative integer port number.
	Number uint32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The protocol exposed on the port. MUST BE one of HTTP|GRPC|HTTP2|HTTPS|TCP|TLS. TLS implies the connection will be
	// routed based on the SNI header to the destination without terminating the TLS connection.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Name assigned to the port.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The endpoint port to which this service port maps to. For example, service port 80 exposed on the load balancer
	// could map to an endpoint port 9080 on a VM.
	EndpointPort         uint32   `protobuf:"varint,4,opt,name=endpoint_port,json=endpointPort,proto3" json:"endpoint_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Port) Reset()         { *m = Port{} }
func (m *Port) String() string { return proto.CompactTextString(m) }
func (*Port) ProtoMessage()    {}
func (*Port) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{1}
}
func (m *Port) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Port.Unmarshal(m, b)
}
func (m *Port) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Port.Marshal(b, m, deterministic)
}
func (dst *Port) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Port.Merge(dst, src)
}
func (m *Port) XXX_Size() int {
	return xxx_messageInfo_Port.Size(m)
}
func (m *Port) XXX_DiscardUnknown() {
	xxx_messageInfo_Port.DiscardUnknown(m)
}

var xxx_messageInfo_Port proto.InternalMessageInfo

func (m *Port) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Port) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Port) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Port) GetEndpointPort() uint32 {
	if m != nil {
		return m.EndpointPort
	}
	return 0
}

type Subset struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Labels apply a filter over the endpoints of a service in the service registry.
	Labels               map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Subset) Reset()         { *m = Subset{} }
func (m *Subset) String() string { return proto.CompactTextString(m) }
func (*Subset) ProtoMessage()    {}
func (*Subset) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{2}
}
func (m *Subset) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subset.Unmarshal(m, b)
}
func (m *Subset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subset.Marshal(b, m, deterministic)
}
func (dst *Subset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subset.Merge(dst, src)
}
func (m *Subset) XXX_Size() int {
	return xxx_messageInfo_Subset.Size(m)
}
func (m *Subset) XXX_DiscardUnknown() {
	xxx_messageInfo_Subset.DiscardUnknown(m)
}

var xxx_messageInfo_Subset proto.InternalMessageInfo

func (m *Subset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Subset) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// HttpSettings
//
// HTTP settings for a service. Applicable to ports receiving HTTP traffic.
type HttpSettings struct {
	StickySession        *HttpSettings_StickySession `protobuf:"bytes,1,opt,name=sticky_session,json=stickySession,proto3" json:"sticky_session,omitempty"`
	CorsPolicy           *CorsPolicy                 `protobuf:"bytes,2,opt,name=cors_policy,json=corsPolicy,proto3" json:"cors_policy,omitempty"`
	RouteRules           []*HttpRule                 `protobuf:"bytes,3,rep,name=route_rules,json=routeRules,proto3" json:"route_rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *HttpSettings) Reset()         { *m = HttpSettings{} }
func (m *HttpSettings) String() string { return proto.CompactTextString(m) }
func (*HttpSettings) ProtoMessage()    {}
func (*HttpSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{3}
}
func (m *HttpSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings.Unmarshal(m, b)
}
func (m *HttpSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings.Marshal(b, m, deterministic)
}
func (dst *HttpSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings.Merge(dst, src)
}
func (m *HttpSettings) XXX_Size() int {
	return xxx_messageInfo_HttpSettings.Size(m)
}
func (m *HttpSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings proto.InternalMessageInfo

func (m *HttpSettings) GetStickySession() *HttpSettings_StickySession {
	if m != nil {
		return m.StickySession
	}
	return nil
}

func (m *HttpSettings) GetCorsPolicy() *CorsPolicy {
	if m != nil {
		return m.CorsPolicy
	}
	return nil
}

func (m *HttpSettings) GetRouteRules() []*HttpRule {
	if m != nil {
		return m.RouteRules
	}
	return nil
}

// Describes a HTTP cookie that will be used for sticky sessions. If the cookie is not present, it will be generated.
type HttpSettings_HTTPCookie struct {
	// Name of the cookie.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Path to set for the cookie.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Lifetime of the cookie.
	Ttl                  *duration.Duration `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HttpSettings_HTTPCookie) Reset()         { *m = HttpSettings_HTTPCookie{} }
func (m *HttpSettings_HTTPCookie) String() string { return proto.CompactTextString(m) }
func (*HttpSettings_HTTPCookie) ProtoMessage()    {}
func (*HttpSettings_HTTPCookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{3, 0}
}
func (m *HttpSettings_HTTPCookie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Unmarshal(m, b)
}
func (m *HttpSettings_HTTPCookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Marshal(b, m, deterministic)
}
func (dst *HttpSettings_HTTPCookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings_HTTPCookie.Merge(dst, src)
}
func (m *HttpSettings_HTTPCookie) XXX_Size() int {
	return xxx_messageInfo_HttpSettings_HTTPCookie.Size(m)
}
func (m *HttpSettings_HTTPCookie) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings_HTTPCookie.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings_HTTPCookie proto.InternalMessageInfo

func (m *HttpSettings_HTTPCookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HttpSettings_HTTPCookie) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HttpSettings_HTTPCookie) GetTtl() *duration.Duration {
	if m != nil {
		return m.Ttl
	}
	return nil
}

// If set, the load balancer will route all requests from a particular client to the same backend of the service.
type HttpSettings_StickySession struct {
	// Types that are valid to be assigned to HashKey:
	//	*HttpSettings_StickySession_Header
	//	*HttpSettings_StickySession_Cookie
	//	*HttpSettings_StickySession_UseSourceIp
	HashKey              isHttpSettings_StickySession_HashKey `protobuf_oneof:"hash_key"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *HttpSettings_StickySession) Reset()         { *m = HttpSettings_StickySession{} }
func (m *HttpSettings_StickySession) String() string { return proto.CompactTextString(m) }
func (*HttpSettings_StickySession) ProtoMessage()    {}
func (*HttpSettings_StickySession) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{3, 1}
}
func (m *HttpSettings_StickySession) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpSettings_StickySession.Unmarshal(m, b)
}
func (m *HttpSettings_StickySession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpSettings_StickySession.Marshal(b, m, deterministic)
}
func (dst *HttpSettings_StickySession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpSettings_StickySession.Merge(dst, src)
}
func (m *HttpSettings_StickySession) XXX_Size() int {
	return xxx_messageInfo_HttpSettings_StickySession.Size(m)
}
func (m *HttpSettings_StickySession) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpSettings_StickySession.DiscardUnknown(m)
}

var xxx_messageInfo_HttpSettings_StickySession proto.InternalMessageInfo

type isHttpSettings_StickySession_HashKey interface {
	isHttpSettings_StickySession_HashKey()
}

type HttpSettings_StickySession_Header struct {
	Header string `protobuf:"bytes,1,opt,name=header,proto3,oneof"`
}

type HttpSettings_StickySession_Cookie struct {
	Cookie *HttpSettings_HTTPCookie `protobuf:"bytes,2,opt,name=cookie,proto3,oneof"`
}

type HttpSettings_StickySession_UseSourceIp struct {
	UseSourceIp bool `protobuf:"varint,3,opt,name=use_source_ip,json=useSourceIp,proto3,oneof"`
}

func (*HttpSettings_StickySession_Header) isHttpSettings_StickySession_HashKey() {}

func (*HttpSettings_StickySession_Cookie) isHttpSettings_StickySession_HashKey() {}

func (*HttpSettings_StickySession_UseSourceIp) isHttpSettings_StickySession_HashKey() {}

func (m *HttpSettings_StickySession) GetHashKey() isHttpSettings_StickySession_HashKey {
	if m != nil {
		return m.HashKey
	}
	return nil
}

func (m *HttpSettings_StickySession) GetHeader() string {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_Header); ok {
		return x.Header
	}
	return ""
}

func (m *HttpSettings_StickySession) GetCookie() *HttpSettings_HTTPCookie {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_Cookie); ok {
		return x.Cookie
	}
	return nil
}

func (m *HttpSettings_StickySession) GetUseSourceIp() bool {
	if x, ok := m.GetHashKey().(*HttpSettings_StickySession_UseSourceIp); ok {
		return x.UseSourceIp
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpSettings_StickySession) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpSettings_StickySession_OneofMarshaler, _HttpSettings_StickySession_OneofUnmarshaler, _HttpSettings_StickySession_OneofSizer, []interface{}{
		(*HttpSettings_StickySession_Header)(nil),
		(*HttpSettings_StickySession_Cookie)(nil),
		(*HttpSettings_StickySession_UseSourceIp)(nil),
	}
}

func _HttpSettings_StickySession_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpSettings_StickySession)
	// hash_key
	switch x := m.HashKey.(type) {
	case *HttpSettings_StickySession_Header:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Header)
	case *HttpSettings_StickySession_Cookie:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cookie); err != nil {
			return err
		}
	case *HttpSettings_StickySession_UseSourceIp:
		t := uint64(0)
		if x.UseSourceIp {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("HttpSettings_StickySession.HashKey has unexpected type %T", x)
	}
	return nil
}

func _HttpSettings_StickySession_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpSettings_StickySession)
	switch tag {
	case 1: // hash_key.header
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.HashKey = &HttpSettings_StickySession_Header{x}
		return true, err
	case 2: // hash_key.cookie
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(HttpSettings_HTTPCookie)
		err := b.DecodeMessage(msg)
		m.HashKey = &HttpSettings_StickySession_Cookie{msg}
		return true, err
	case 3: // hash_key.use_source_ip
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.HashKey = &HttpSettings_StickySession_UseSourceIp{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _HttpSettings_StickySession_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpSettings_StickySession)
	// hash_key
	switch x := m.HashKey.(type) {
	case *HttpSettings_StickySession_Header:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Header)))
		n += len(x.Header)
	case *HttpSettings_StickySession_Cookie:
		s := proto.Size(x.Cookie)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpSettings_StickySession_UseSourceIp:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TCP settings for a service. Applicable to ports receiving non-HTTP traffic.
type TcpSettings struct {
	// The destination to which the connection should be forwarded to.
	Route                *Route   `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TcpSettings) Reset()         { *m = TcpSettings{} }
func (m *TcpSettings) String() string { return proto.CompactTextString(m) }
func (*TcpSettings) ProtoMessage()    {}
func (*TcpSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{4}
}
func (m *TcpSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TcpSettings.Unmarshal(m, b)
}
func (m *TcpSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TcpSettings.Marshal(b, m, deterministic)
}
func (dst *TcpSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TcpSettings.Merge(dst, src)
}
func (m *TcpSettings) XXX_Size() int {
	return xxx_messageInfo_TcpSettings.Size(m)
}
func (m *TcpSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TcpSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TcpSettings proto.InternalMessageInfo

func (m *TcpSettings) GetRoute() *Route {
	if m != nil {
		return m.Route
	}
	return nil
}

// A single HTTP rule.
type HttpRule struct {
	// One or more match conditions (OR-ed).
	Match []*HttpMatchCondition `protobuf:"bytes,1,rep,name=match,proto3" json:"match,omitempty"`
	// One or more mutations to be performed before forwarding. Includes typical modifications to be done on a single
	// request like URL rewrite, host rewrite, headers to add/remove/append.
	Modify *HttpModifyAction `protobuf:"bytes,2,opt,name=modify,proto3" json:"modify,omitempty"`
	// Types that are valid to be assigned to RouteOrRedirect:
	//	*HttpRule_Route
	//	*HttpRule_Redirect
	RouteOrRedirect      isHttpRule_RouteOrRedirect `protobuf_oneof:"route_or_redirect"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *HttpRule) Reset()         { *m = HttpRule{} }
func (m *HttpRule) String() string { return proto.CompactTextString(m) }
func (*HttpRule) ProtoMessage()    {}
func (*HttpRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{5}
}
func (m *HttpRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpRule.Unmarshal(m, b)
}
func (m *HttpRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpRule.Marshal(b, m, deterministic)
}
func (dst *HttpRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpRule.Merge(dst, src)
}
func (m *HttpRule) XXX_Size() int {
	return xxx_messageInfo_HttpRule.Size(m)
}
func (m *HttpRule) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpRule.DiscardUnknown(m)
}

var xxx_messageInfo_HttpRule proto.InternalMessageInfo

func (m *HttpRule) GetMatch() []*HttpMatchCondition {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *HttpRule) GetModify() *HttpModifyAction {
	if m != nil {
		return m.Modify
	}
	return nil
}

type isHttpRule_RouteOrRedirect interface {
	isHttpRule_RouteOrRedirect()
}

type HttpRule_Route struct {
	Route *Route `protobuf:"bytes,4,opt,name=route,proto3,oneof"`
}

type HttpRule_Redirect struct {
	Redirect *Redirect `protobuf:"bytes,5,opt,name=redirect,proto3,oneof"`
}

func (*HttpRule_Route) isHttpRule_RouteOrRedirect() {}

func (*HttpRule_Redirect) isHttpRule_RouteOrRedirect() {}

func (m *HttpRule) GetRouteOrRedirect() isHttpRule_RouteOrRedirect {
	if m != nil {
		return m.RouteOrRedirect
	}
	return nil
}

func (m *HttpRule) GetRoute() *Route {
	if x, ok := m.GetRouteOrRedirect().(*HttpRule_Route); ok {
		return x.Route
	}
	return nil
}

func (m *HttpRule) GetRedirect() *Redirect {
	if x, ok := m.GetRouteOrRedirect().(*HttpRule_Redirect); ok {
		return x.Redirect
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HttpRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HttpRule_OneofMarshaler, _HttpRule_OneofUnmarshaler, _HttpRule_OneofSizer, []interface{}{
		(*HttpRule_Route)(nil),
		(*HttpRule_Redirect)(nil),
	}
}

func _HttpRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HttpRule)
	// route_or_redirect
	switch x := m.RouteOrRedirect.(type) {
	case *HttpRule_Route:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Route); err != nil {
			return err
		}
	case *HttpRule_Redirect:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Redirect); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HttpRule.RouteOrRedirect has unexpected type %T", x)
	}
	return nil
}

func _HttpRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HttpRule)
	switch tag {
	case 4: // route_or_redirect.route
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Route)
		err := b.DecodeMessage(msg)
		m.RouteOrRedirect = &HttpRule_Route{msg}
		return true, err
	case 5: // route_or_redirect.redirect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Redirect)
		err := b.DecodeMessage(msg)
		m.RouteOrRedirect = &HttpRule_Redirect{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HttpRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HttpRule)
	// route_or_redirect
	switch x := m.RouteOrRedirect.(type) {
	case *HttpRule_Route:
		s := proto.Size(x.Route)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HttpRule_Redirect:
		s := proto.Size(x.Redirect)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A single match clause to match all aspects of a request.
type HttpMatchCondition struct {
	// URI to match.
	Uri *StringMatch `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// URI Scheme
	Scheme *StringMatch `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// HTTP Method.
	Method *StringMatch `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// HTTP Authority.
	Authority *StringMatch `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
	// The header keys must be lowercase and use hyphen as the separator, e.g. x-request-id.
	Headers              map[string]*StringMatch `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *HttpMatchCondition) Reset()         { *m = HttpMatchCondition{} }
func (m *HttpMatchCondition) String() string { return proto.CompactTextString(m) }
func (*HttpMatchCondition) ProtoMessage()    {}
func (*HttpMatchCondition) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{6}
}
func (m *HttpMatchCondition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpMatchCondition.Unmarshal(m, b)
}
func (m *HttpMatchCondition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpMatchCondition.Marshal(b, m, deterministic)
}
func (dst *HttpMatchCondition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpMatchCondition.Merge(dst, src)
}
func (m *HttpMatchCondition) XXX_Size() int {
	return xxx_messageInfo_HttpMatchCondition.Size(m)
}
func (m *HttpMatchCondition) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpMatchCondition.DiscardUnknown(m)
}

var xxx_messageInfo_HttpMatchCondition proto.InternalMessageInfo

func (m *HttpMatchCondition) GetUri() *StringMatch {
	if m != nil {
		return m.Uri
	}
	return nil
}

func (m *HttpMatchCondition) GetScheme() *StringMatch {
	if m != nil {
		return m.Scheme
	}
	return nil
}

func (m *HttpMatchCondition) GetMethod() *StringMatch {
	if m != nil {
		return m.Method
	}
	return nil
}

func (m *HttpMatchCondition) GetAuthority() *StringMatch {
	if m != nil {
		return m.Authority
	}
	return nil
}

func (m *HttpMatchCondition) GetHeaders() map[string]*StringMatch {
	if m != nil {
		return m.Headers
	}
	return nil
}

// Describes how to match a given string in HTTP headers. Match is case-sensitive.
type StringMatch struct {
	// Types that are valid to be assigned to MatchType:
	//	*StringMatch_Exact
	//	*StringMatch_Prefix
	//	*StringMatch_Regex
	MatchType            isStringMatch_MatchType `protobuf_oneof:"match_type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *StringMatch) Reset()         { *m = StringMatch{} }
func (m *StringMatch) String() string { return proto.CompactTextString(m) }
func (*StringMatch) ProtoMessage()    {}
func (*StringMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{7}
}
func (m *StringMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringMatch.Unmarshal(m, b)
}
func (m *StringMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringMatch.Marshal(b, m, deterministic)
}
func (dst *StringMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringMatch.Merge(dst, src)
}
func (m *StringMatch) XXX_Size() int {
	return xxx_messageInfo_StringMatch.Size(m)
}
func (m *StringMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StringMatch.DiscardUnknown(m)
}

var xxx_messageInfo_StringMatch proto.InternalMessageInfo

type isStringMatch_MatchType interface {
	isStringMatch_MatchType()
}

type StringMatch_Exact struct {
	Exact string `protobuf:"bytes,1,opt,name=exact,proto3,oneof"`
}

type StringMatch_Prefix struct {
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3,oneof"`
}

type StringMatch_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*StringMatch_Exact) isStringMatch_MatchType() {}

func (*StringMatch_Prefix) isStringMatch_MatchType() {}

func (*StringMatch_Regex) isStringMatch_MatchType() {}

func (m *StringMatch) GetMatchType() isStringMatch_MatchType {
	if m != nil {
		return m.MatchType
	}
	return nil
}

func (m *StringMatch) GetExact() string {
	if x, ok := m.GetMatchType().(*StringMatch_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *StringMatch) GetPrefix() string {
	if x, ok := m.GetMatchType().(*StringMatch_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *StringMatch) GetRegex() string {
	if x, ok := m.GetMatchType().(*StringMatch_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StringMatch) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StringMatch_OneofMarshaler, _StringMatch_OneofUnmarshaler, _StringMatch_OneofSizer, []interface{}{
		(*StringMatch_Exact)(nil),
		(*StringMatch_Prefix)(nil),
		(*StringMatch_Regex)(nil),
	}
}

func _StringMatch_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Exact)
	case *StringMatch_Prefix:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Prefix)
	case *StringMatch_Regex:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("StringMatch.MatchType has unexpected type %T", x)
	}
	return nil
}

func _StringMatch_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StringMatch)
	switch tag {
	case 1: // match_type.exact
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Exact{x}
		return true, err
	case 2: // match_type.prefix
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Prefix{x}
		return true, err
	case 3: // match_type.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.MatchType = &StringMatch_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _StringMatch_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StringMatch)
	// match_type
	switch x := m.MatchType.(type) {
	case *StringMatch_Exact:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Exact)))
		n += len(x.Exact)
	case *StringMatch_Prefix:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Prefix)))
		n += len(x.Prefix)
	case *StringMatch_Regex:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type HTTPRewrite struct {
	// Rewrite the path (or the prefix) portion of the URI with this value. If the original URI was matched based on
	// prefix, the value provided in this field will replace the corresponding matched prefix.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Rewrite the Authority/Host header with this value.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPRewrite) Reset()         { *m = HTTPRewrite{} }
func (m *HTTPRewrite) String() string { return proto.CompactTextString(m) }
func (*HTTPRewrite) ProtoMessage()    {}
func (*HTTPRewrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{8}
}
func (m *HTTPRewrite) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRewrite.Unmarshal(m, b)
}
func (m *HTTPRewrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRewrite.Marshal(b, m, deterministic)
}
func (dst *HTTPRewrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRewrite.Merge(dst, src)
}
func (m *HTTPRewrite) XXX_Size() int {
	return xxx_messageInfo_HTTPRewrite.Size(m)
}
func (m *HTTPRewrite) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRewrite.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRewrite proto.InternalMessageInfo

func (m *HTTPRewrite) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *HTTPRewrite) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

// Header manipulation rules.
type Headers struct {
	// Header manipulation rules to apply before forwarding a request to the destination service.
	Request *Headers_HeaderOperations `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Header manipulation rules to apply before returning a response to the caller.
	Response             *Headers_HeaderOperations `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Headers) Reset()         { *m = Headers{} }
func (m *Headers) String() string { return proto.CompactTextString(m) }
func (*Headers) ProtoMessage()    {}
func (*Headers) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{9}
}
func (m *Headers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Headers.Unmarshal(m, b)
}
func (m *Headers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Headers.Marshal(b, m, deterministic)
}
func (dst *Headers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Headers.Merge(dst, src)
}
func (m *Headers) XXX_Size() int {
	return xxx_messageInfo_Headers.Size(m)
}
func (m *Headers) XXX_DiscardUnknown() {
	xxx_messageInfo_Headers.DiscardUnknown(m)
}

var xxx_messageInfo_Headers proto.InternalMessageInfo

func (m *Headers) GetRequest() *Headers_HeaderOperations {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Headers) GetResponse() *Headers_HeaderOperations {
	if m != nil {
		return m.Response
	}
	return nil
}

// HeaderOperations Describes the header manipulations to apply.
type Headers_HeaderOperations struct {
	// Overwrite the headers specified by key with the given values.
	Set map[string]string `protobuf:"bytes,1,rep,name=set,proto3" json:"set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Append the given values to the headers specified by keys (will create a comma-separated list of values).
	Add map[string]string `protobuf:"bytes,2,rep,name=add,proto3" json:"add,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Remove a the specified headers.
	Remove               []string `protobuf:"bytes,3,rep,name=remove,proto3" json:"remove,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Headers_HeaderOperations) Reset()         { *m = Headers_HeaderOperations{} }
func (m *Headers_HeaderOperations) String() string { return proto.CompactTextString(m) }
func (*Headers_HeaderOperations) ProtoMessage()    {}
func (*Headers_HeaderOperations) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{9, 0}
}
func (m *Headers_HeaderOperations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Headers_HeaderOperations.Unmarshal(m, b)
}
func (m *Headers_HeaderOperations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Headers_HeaderOperations.Marshal(b, m, deterministic)
}
func (dst *Headers_HeaderOperations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Headers_HeaderOperations.Merge(dst, src)
}
func (m *Headers_HeaderOperations) XXX_Size() int {
	return xxx_messageInfo_Headers_HeaderOperations.Size(m)
}
func (m *Headers_HeaderOperations) XXX_DiscardUnknown() {
	xxx_messageInfo_Headers_HeaderOperations.DiscardUnknown(m)
}

var xxx_messageInfo_Headers_HeaderOperations proto.InternalMessageInfo

func (m *Headers_HeaderOperations) GetSet() map[string]string {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *Headers_HeaderOperations) GetAdd() map[string]string {
	if m != nil {
		return m.Add
	}
	return nil
}

func (m *Headers_HeaderOperations) GetRemove() []string {
	if m != nil {
		return m.Remove
	}
	return nil
}

// HTTP path/url/header modification.
type HttpModifyAction struct {
	Rewrite              *HTTPRewrite `protobuf:"bytes,1,opt,name=rewrite,proto3" json:"rewrite,omitempty"`
	Headers              *Headers     `protobuf:"bytes,2,opt,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *HttpModifyAction) Reset()         { *m = HttpModifyAction{} }
func (m *HttpModifyAction) String() string { return proto.CompactTextString(m) }
func (*HttpModifyAction) ProtoMessage()    {}
func (*HttpModifyAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{10}
}
func (m *HttpModifyAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpModifyAction.Unmarshal(m, b)
}
func (m *HttpModifyAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpModifyAction.Marshal(b, m, deterministic)
}
func (dst *HttpModifyAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpModifyAction.Merge(dst, src)
}
func (m *HttpModifyAction) XXX_Size() int {
	return xxx_messageInfo_HttpModifyAction.Size(m)
}
func (m *HttpModifyAction) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpModifyAction.DiscardUnknown(m)
}

var xxx_messageInfo_HttpModifyAction proto.InternalMessageInfo

func (m *HttpModifyAction) GetRewrite() *HTTPRewrite {
	if m != nil {
		return m.Rewrite
	}
	return nil
}

func (m *HttpModifyAction) GetHeaders() *Headers {
	if m != nil {
		return m.Headers
	}
	return nil
}

// One or more destinations for the given request.
type Route struct {
	Destinations         []*Route_Destination `protobuf:"bytes,1,rep,name=destinations,proto3" json:"destinations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{11}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetDestinations() []*Route_Destination {
	if m != nil {
		return m.Destinations
	}
	return nil
}

type Route_Destination struct {
	// If omitted, will route to same host as the service.
	Host   string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Subset string `protobuf:"bytes,2,opt,name=subset,proto3" json:"subset,omitempty"`
	// 100 if omitted. sum of all weights should add up to 100.
	Weight uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	// Optional.
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route_Destination) Reset()         { *m = Route_Destination{} }
func (m *Route_Destination) String() string { return proto.CompactTextString(m) }
func (*Route_Destination) ProtoMessage()    {}
func (*Route_Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{11, 0}
}
func (m *Route_Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route_Destination.Unmarshal(m, b)
}
func (m *Route_Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route_Destination.Marshal(b, m, deterministic)
}
func (dst *Route_Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route_Destination.Merge(dst, src)
}
func (m *Route_Destination) XXX_Size() int {
	return xxx_messageInfo_Route_Destination.Size(m)
}
func (m *Route_Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Route_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Route_Destination proto.InternalMessageInfo

func (m *Route_Destination) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Route_Destination) GetSubset() string {
	if m != nil {
		return m.Subset
	}
	return ""
}

func (m *Route_Destination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Route_Destination) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Redirect struct {
	// On a redirect, overwrite the Path portion of the URL with this value.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// On a redirect, overwrite the Authority/Host portion of the URL with this value.
	Authority            string   `protobuf:"bytes,2,opt,name=authority,proto3" json:"authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Redirect) Reset()         { *m = Redirect{} }
func (m *Redirect) String() string { return proto.CompactTextString(m) }
func (*Redirect) ProtoMessage()    {}
func (*Redirect) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{12}
}
func (m *Redirect) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Redirect.Unmarshal(m, b)
}
func (m *Redirect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Redirect.Marshal(b, m, deterministic)
}
func (dst *Redirect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Redirect.Merge(dst, src)
}
func (m *Redirect) XXX_Size() int {
	return xxx_messageInfo_Redirect.Size(m)
}
func (m *Redirect) XXX_DiscardUnknown() {
	xxx_messageInfo_Redirect.DiscardUnknown(m)
}

var xxx_messageInfo_Redirect proto.InternalMessageInfo

func (m *Redirect) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *Redirect) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type CorsPolicy struct {
	// The list of origins that are allowed to perform CORS requests. The content will be serialized into the
	// Access-Control-Allow-Origin header. Wildcard * will allow all origins.
	AllowOrigin []string `protobuf:"bytes,1,rep,name=allow_origin,json=allowOrigin,proto3" json:"allow_origin,omitempty"`
	// List of HTTP methods allowed to access the resource. The content will be serialized into the
	// Access-Control-Allow-Methods header.
	AllowMethods []string `protobuf:"bytes,2,rep,name=allow_methods,json=allowMethods,proto3" json:"allow_methods,omitempty"`
	// List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers
	// header.
	AllowHeaders []string `protobuf:"bytes,3,rep,name=allow_headers,json=allowHeaders,proto3" json:"allow_headers,omitempty"`
	// A white list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers
	// header.
	ExposeHeaders []string `protobuf:"bytes,4,rep,name=expose_headers,json=exposeHeaders,proto3" json:"expose_headers,omitempty"`
	// Specifies how long the results of a preflight request can be cached. Translates to the Access-Control-Max-Age
	// header.
	MaxAge *duration.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials.
	// Translates to Access-Control-Allow-Credentials header.
	AllowCredentials     *wrappers.BoolValue `protobuf:"bytes,6,opt,name=allow_credentials,json=allowCredentials,proto3" json:"allow_credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CorsPolicy) Reset()         { *m = CorsPolicy{} }
func (m *CorsPolicy) String() string { return proto.CompactTextString(m) }
func (*CorsPolicy) ProtoMessage()    {}
func (*CorsPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_routing_info_55db2e3aa1120fa8, []int{13}
}
func (m *CorsPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CorsPolicy.Unmarshal(m, b)
}
func (m *CorsPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CorsPolicy.Marshal(b, m, deterministic)
}
func (dst *CorsPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CorsPolicy.Merge(dst, src)
}
func (m *CorsPolicy) XXX_Size() int {
	return xxx_messageInfo_CorsPolicy.Size(m)
}
func (m *CorsPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_CorsPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_CorsPolicy proto.InternalMessageInfo

func (m *CorsPolicy) GetAllowOrigin() []string {
	if m != nil {
		return m.AllowOrigin
	}
	return nil
}

func (m *CorsPolicy) GetAllowMethods() []string {
	if m != nil {
		return m.AllowMethods
	}
	return nil
}

func (m *CorsPolicy) GetAllowHeaders() []string {
	if m != nil {
		return m.AllowHeaders
	}
	return nil
}

func (m *CorsPolicy) GetExposeHeaders() []string {
	if m != nil {
		return m.ExposeHeaders
	}
	return nil
}

func (m *CorsPolicy) GetMaxAge() *duration.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *CorsPolicy) GetAllowCredentials() *wrappers.BoolValue {
	if m != nil {
		return m.AllowCredentials
	}
	return nil
}

func init() {
	proto.RegisterType((*RoutingInfo)(nil), "tetrate.api.tcc.core.v1.RoutingInfo")
	proto.RegisterType((*Port)(nil), "tetrate.api.tcc.core.v1.Port")
	proto.RegisterType((*Subset)(nil), "tetrate.api.tcc.core.v1.Subset")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.Subset.LabelsEntry")
	proto.RegisterType((*HttpSettings)(nil), "tetrate.api.tcc.core.v1.HttpSettings")
	proto.RegisterType((*HttpSettings_HTTPCookie)(nil), "tetrate.api.tcc.core.v1.HttpSettings.HTTPCookie")
	proto.RegisterType((*HttpSettings_StickySession)(nil), "tetrate.api.tcc.core.v1.HttpSettings.StickySession")
	proto.RegisterType((*TcpSettings)(nil), "tetrate.api.tcc.core.v1.TcpSettings")
	proto.RegisterType((*HttpRule)(nil), "tetrate.api.tcc.core.v1.HttpRule")
	proto.RegisterType((*HttpMatchCondition)(nil), "tetrate.api.tcc.core.v1.HttpMatchCondition")
	proto.RegisterMapType((map[string]*StringMatch)(nil), "tetrate.api.tcc.core.v1.HttpMatchCondition.HeadersEntry")
	proto.RegisterType((*StringMatch)(nil), "tetrate.api.tcc.core.v1.StringMatch")
	proto.RegisterType((*HTTPRewrite)(nil), "tetrate.api.tcc.core.v1.HTTPRewrite")
	proto.RegisterType((*Headers)(nil), "tetrate.api.tcc.core.v1.Headers")
	proto.RegisterType((*Headers_HeaderOperations)(nil), "tetrate.api.tcc.core.v1.Headers.HeaderOperations")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.Headers.HeaderOperations.AddEntry")
	proto.RegisterMapType((map[string]string)(nil), "tetrate.api.tcc.core.v1.Headers.HeaderOperations.SetEntry")
	proto.RegisterType((*HttpModifyAction)(nil), "tetrate.api.tcc.core.v1.HttpModifyAction")
	proto.RegisterType((*Route)(nil), "tetrate.api.tcc.core.v1.Route")
	proto.RegisterType((*Route_Destination)(nil), "tetrate.api.tcc.core.v1.Route.Destination")
	proto.RegisterType((*Redirect)(nil), "tetrate.api.tcc.core.v1.Redirect")
	proto.RegisterType((*CorsPolicy)(nil), "tetrate.api.tcc.core.v1.CorsPolicy")
	proto.RegisterEnum("tetrate.api.tcc.core.v1.Registry", Registry_name, Registry_value)
}

func init() { proto.RegisterFile("routing_info.proto", fileDescriptor_routing_info_55db2e3aa1120fa8) }

var fileDescriptor_routing_info_55db2e3aa1120fa8 = []byte{
	// 1378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xfa, 0x2b, 0xf6, 0x5b, 0xbb, 0x72, 0x07, 0xd4, 0x1a, 0x8b, 0x96, 0xd4, 0x6d, 0xa5,
	0xd0, 0xa2, 0x35, 0x4d, 0xa5, 0xd2, 0x46, 0x7c, 0xc5, 0x49, 0xd4, 0xb4, 0x69, 0x3e, 0x34, 0x4e,
	0x8b, 0xd4, 0x8b, 0xd9, 0xec, 0x4e, 0xec, 0x51, 0xec, 0x9d, 0x65, 0x66, 0x36, 0x89, 0xcf, 0xdc,
	0x38, 0x70, 0xe0, 0x88, 0x04, 0x27, 0xee, 0x48, 0x20, 0x71, 0xe0, 0x84, 0x38, 0xf2, 0x3f, 0xc0,
	0x9d, 0xff, 0x02, 0xcd, 0xc7, 0xc6, 0x9b, 0x16, 0xe7, 0xa3, 0xa7, 0x9d, 0x8f, 0xf7, 0xfb, 0xed,
	0x9b, 0xf7, 0x7e, 0xef, 0xcd, 0x00, 0xe2, 0x2c, 0x91, 0x34, 0xea, 0xf7, 0x68, 0xb4, 0xc7, 0xbc,
	0x98, 0x33, 0xc9, 0xd0, 0x55, 0x49, 0x24, 0xf7, 0x25, 0xf1, 0xfc, 0x98, 0x7a, 0x32, 0x08, 0xbc,
	0x80, 0x71, 0xe2, 0x1d, 0xdc, 0x6b, 0x5e, 0xef, 0x33, 0xd6, 0x1f, 0x92, 0xb6, 0x36, 0xdb, 0x4d,
	0xf6, 0xda, 0x61, 0xc2, 0x7d, 0x49, 0x59, 0x64, 0x80, 0xaf, 0xef, 0x1f, 0x72, 0x3f, 0x8e, 0x09,
	0x17, 0x76, 0xff, 0xea, 0x81, 0x3f, 0xa4, 0xa1, 0x2f, 0x49, 0x3b, 0x1d, 0x98, 0x8d, 0xd6, 0xdf,
	0x0e, 0xb8, 0xd8, 0x38, 0xf2, 0x24, 0xda, 0x63, 0xe8, 0x11, 0xcc, 0x8a, 0x64, 0x57, 0x10, 0x29,
	0x1a, 0xce, 0x5c, 0x7e, 0xde, 0x5d, 0x78, 0xcf, 0x9b, 0xe2, 0x93, 0xd7, 0xd5, 0x76, 0x38, 0xb5,
	0x47, 0x4f, 0xa1, 0x36, 0x90, 0x32, 0xee, 0x09, 0x22, 0x15, 0x9d, 0x68, 0xe4, 0xe6, 0x9c, 0x79,
	0x77, 0xe1, 0xf6, 0x54, 0x82, 0x35, 0x29, 0xe3, 0xae, 0x35, 0xc6, 0xd5, 0x41, 0x66, 0x86, 0x1e,
	0x43, 0x55, 0x06, 0x19, 0xaa, 0xbc, 0xa6, 0xba, 0x35, 0x95, 0x6a, 0x27, 0x98, 0x30, 0xb9, 0x72,
	0x32, 0x69, 0xfd, 0xe4, 0x40, 0x61, 0x9b, 0x71, 0x89, 0xae, 0x40, 0x29, 0x4a, 0x46, 0xbb, 0x84,
	0x37, 0x9c, 0x39, 0x67, 0xbe, 0x86, 0xed, 0x0c, 0xad, 0x43, 0x59, 0x47, 0x22, 0x60, 0x43, 0xed,
	0x70, 0xa5, 0xd3, 0xfe, 0xfd, 0xdf, 0x3f, 0xf2, 0x77, 0xf8, 0x3c, 0x2e, 0xac, 0xed, 0xec, 0x6c,
	0xe3, 0xc2, 0x63, 0xbc, 0xbd, 0x8c, 0x8b, 0x6a, 0xbc, 0x80, 0xf3, 0x3b, 0xcb, 0xdb, 0x38, 0xbf,
	0xf3, 0xac, 0x8b, 0xf3, 0xcf, 0x57, 0xb6, 0x71, 0xa1, 0xbb, 0xbc, 0xb3, 0x8d, 0x8f, 0x09, 0x10,
	0x82, 0x42, 0xe4, 0x8f, 0x88, 0x76, 0xb7, 0x82, 0xf5, 0x18, 0xdd, 0x84, 0x1a, 0x89, 0xc2, 0x98,
	0xd1, 0x48, 0xf6, 0x62, 0xc6, 0x65, 0xa3, 0xa0, 0xff, 0x5f, 0x4d, 0x17, 0x95, 0x77, 0xad, 0x5f,
	0x1d, 0x28, 0x99, 0x78, 0xa2, 0x6b, 0x96, 0xc3, 0xd1, 0xce, 0x54, 0x94, 0x33, 0x05, 0x9e, 0xab,
	0x3b, 0x96, 0x6e, 0x0b, 0x4a, 0x43, 0x7f, 0x97, 0x0c, 0x55, 0x78, 0x55, 0x7e, 0xee, 0x9e, 0x91,
	0x1f, 0xef, 0x99, 0xb6, 0x5e, 0x8d, 0x24, 0x1f, 0x77, 0x40, 0xb1, 0x15, 0xbf, 0x77, 0x72, 0x65,
	0x07, 0x5b, 0x9a, 0xe6, 0x23, 0x70, 0x33, 0x26, 0xa8, 0x0e, 0xf9, 0x7d, 0x32, 0x36, 0x7f, 0xc7,
	0x6a, 0x88, 0xde, 0x86, 0xe2, 0x81, 0x3f, 0x4c, 0x88, 0x09, 0x0f, 0x36, 0x93, 0xc5, 0xdc, 0x43,
	0xa7, 0xf5, 0x73, 0x01, 0xaa, 0xd9, 0x24, 0xa2, 0x97, 0x70, 0x49, 0x48, 0x1a, 0xec, 0x8f, 0x7b,
	0x82, 0x08, 0x41, 0x59, 0xa4, 0x79, 0xdc, 0x85, 0xfb, 0xe7, 0xd2, 0x80, 0xd7, 0xd5, 0xd8, 0xae,
	0x81, 0xe2, 0x9a, 0xc8, 0x4e, 0xd1, 0x0a, 0xb8, 0x01, 0xe3, 0xa2, 0x17, 0xb3, 0x21, 0x0d, 0xc6,
	0x56, 0x5c, 0x37, 0xa7, 0x12, 0x2f, 0x33, 0x2e, 0xb6, 0xb5, 0x29, 0x86, 0xe0, 0x78, 0x8c, 0x3a,
	0xe0, 0xaa, 0xba, 0x23, 0x3d, 0x9e, 0x0c, 0x89, 0xd2, 0x95, 0x8a, 0xe1, 0x8d, 0x53, 0xdd, 0xc3,
	0xc9, 0x90, 0x60, 0xd0, 0x28, 0x35, 0x14, 0xcd, 0xaf, 0x1d, 0x00, 0x25, 0x87, 0x65, 0xc6, 0xf6,
	0x29, 0x39, 0x2b, 0x61, 0xd7, 0xa0, 0x10, 0xfb, 0x72, 0x60, 0xc5, 0x95, 0xdd, 0x56, 0xcb, 0xe8,
	0x23, 0xc8, 0x4b, 0x39, 0xb4, 0x02, 0x7f, 0xc7, 0x33, 0x75, 0xec, 0xa5, 0x75, 0xec, 0xad, 0xd8,
	0x3a, 0xb7, 0xa9, 0xfb, 0xc6, 0x51, 0x48, 0x85, 0x68, 0xfe, 0xe2, 0x40, 0xed, 0x44, 0xc0, 0xd0,
	0x4d, 0x28, 0x0d, 0x88, 0x1f, 0x5a, 0x89, 0x67, 0xff, 0xb5, 0x36, 0x83, 0xed, 0x16, 0x7a, 0x0a,
	0xa5, 0x40, 0xfb, 0x6d, 0x23, 0xf8, 0xe1, 0xf9, 0x52, 0x33, 0x39, 0xaf, 0xe2, 0x32, 0x0c, 0xe8,
	0x16, 0xd4, 0x12, 0x41, 0x7a, 0x82, 0x25, 0x3c, 0x20, 0x3d, 0x1a, 0xeb, 0x53, 0x94, 0xd7, 0x66,
	0xb0, 0x9b, 0x08, 0xd2, 0xd5, 0xab, 0x4f, 0xe2, 0x0e, 0x40, 0x79, 0xe0, 0x8b, 0x41, 0x6f, 0x9f,
	0x8c, 0x5b, 0x5b, 0xe0, 0x66, 0x4a, 0x15, 0x7d, 0x0e, 0x45, 0x1d, 0x57, 0x2b, 0x93, 0xeb, 0x53,
	0x7d, 0x51, 0x2d, 0x8a, 0x9c, 0x88, 0x81, 0x01, 0xb6, 0x7e, 0xcc, 0x41, 0x39, 0x4d, 0x12, 0x5a,
	0x82, 0xe2, 0xc8, 0x97, 0xc1, 0xc0, 0xb6, 0xae, 0xbb, 0xa7, 0x1e, 0x6d, 0x43, 0x59, 0x2e, 0xb3,
	0x28, 0xa4, 0x2a, 0xbe, 0xd8, 0x20, 0xd1, 0x12, 0x94, 0x46, 0x2c, 0xa4, 0x7b, 0xa9, 0xc0, 0xde,
	0x3f, 0x9d, 0x43, 0x9b, 0x2e, 0x05, 0x9a, 0xc1, 0x02, 0xd1, 0x83, 0xf4, 0x50, 0x85, 0xf3, 0x1c,
	0x6a, 0x6d, 0xc6, 0x1e, 0x05, 0x7d, 0x06, 0x65, 0x4e, 0x42, 0xca, 0x49, 0x20, 0x1b, 0x45, 0x0d,
	0x9d, 0xae, 0x4b, 0x6c, 0x0d, 0xd7, 0x66, 0xf0, 0x31, 0xa8, 0xf3, 0x16, 0x5c, 0x36, 0xda, 0x66,
	0xbc, 0x97, 0x2e, 0xb6, 0xfe, 0xcc, 0x03, 0x7a, 0xfd, 0xb8, 0xe8, 0x01, 0xe4, 0x13, 0x4e, 0x6d,
	0xdc, 0xa7, 0xf7, 0xd5, 0xae, 0xe4, 0x34, 0xea, 0x6b, 0x2c, 0x56, 0x00, 0xf4, 0x31, 0x94, 0x44,
	0x30, 0x20, 0xa3, 0x54, 0x3e, 0xe7, 0x83, 0x5a, 0x8c, 0x42, 0x8f, 0x88, 0x1c, 0xb0, 0xf0, 0xcc,
	0x86, 0x7e, 0x02, 0x6d, 0x30, 0xa8, 0x03, 0x15, 0x3f, 0x91, 0x03, 0xc6, 0xa9, 0x1c, 0xdb, 0xe0,
	0x9e, 0x8f, 0x60, 0x02, 0x43, 0x18, 0x66, 0x4d, 0x21, 0x88, 0x46, 0x51, 0x8b, 0xe4, 0xe1, 0x05,
	0x44, 0xe2, 0xad, 0x19, 0xa8, 0xee, 0x94, 0x38, 0x25, 0x6a, 0x7e, 0x09, 0xd5, 0xec, 0xc6, 0xff,
	0xb4, 0xd0, 0xc5, 0x6c, 0x0b, 0x3d, 0xaf, 0xd7, 0x99, 0x46, 0x4b, 0xc0, 0xcd, 0xec, 0xa0, 0x2b,
	0x50, 0x24, 0x47, 0x7e, 0x20, 0xcd, 0x2f, 0x94, 0x82, 0xf4, 0x14, 0x35, 0xa0, 0x14, 0x73, 0xb2,
	0x47, 0x8f, 0x4c, 0xb3, 0x51, 0x95, 0x6a, 0xe6, 0x0a, 0xc1, 0x49, 0x9f, 0x1c, 0x99, 0x9b, 0x49,
	0x6b, 0x4e, 0x4d, 0x3b, 0x55, 0x00, 0xad, 0xfb, 0x9e, 0x1c, 0xc7, 0xa4, 0xf5, 0x09, 0xb8, 0xfa,
	0xca, 0x23, 0x87, 0x9c, 0x4a, 0xa2, 0xce, 0x91, 0x6a, 0xa4, 0x62, 0xb2, 0xff, 0x6e, 0x36, 0x03,
	0xe6, 0x3a, 0x98, 0x2c, 0xb4, 0xfe, 0xc9, 0xc3, 0xac, 0x0d, 0x04, 0x5a, 0x87, 0x59, 0x4e, 0xbe,
	0x4a, 0x88, 0x90, 0x56, 0x63, 0xf7, 0xa6, 0xc7, 0xd9, 0x40, 0xec, 0x77, 0x2b, 0x26, 0xa6, 0xe3,
	0x09, 0x9c, 0x32, 0xa0, 0x0d, 0x55, 0x19, 0x22, 0x66, 0x91, 0x48, 0x23, 0xf8, 0x06, 0x6c, 0xc7,
	0x14, 0xcd, 0xdf, 0x72, 0x50, 0x7f, 0x75, 0x1b, 0x3d, 0x83, 0xbc, 0x20, 0xd2, 0x76, 0x8e, 0xc5,
	0x0b, 0xd3, 0x7b, 0x5d, 0x22, 0x8d, 0x2c, 0x14, 0x8d, 0x62, 0xf3, 0xc3, 0xd0, 0x5e, 0xd1, 0x6f,
	0xc0, 0xb6, 0x14, 0x86, 0x96, 0xcd, 0x0f, 0x43, 0xf5, 0x76, 0xe1, 0x64, 0xc4, 0x0e, 0x88, 0xbe,
	0xaf, 0x2a, 0xd8, 0xce, 0x9a, 0x0f, 0xa0, 0x9c, 0xfe, 0xf6, 0x22, 0xf7, 0xb6, 0xc2, 0xa5, 0x3f,
	0xb8, 0xd0, 0x7d, 0xff, 0xad, 0x03, 0xf5, 0x57, 0xdb, 0x1e, 0xfa, 0x54, 0x65, 0x5a, 0x0b, 0xe6,
	0xcc, 0x6e, 0x92, 0x11, 0x17, 0x4e, 0x41, 0x68, 0x71, 0x52, 0x91, 0x26, 0xb7, 0x73, 0x67, 0x85,
	0xeb, 0xb8, 0xf2, 0x5a, 0x7f, 0x39, 0x50, 0xd4, 0x5d, 0x14, 0xbd, 0x84, 0x6a, 0x48, 0x84, 0xa4,
	0x91, 0x09, 0xa0, 0xcd, 0xe3, 0x9d, 0xd3, 0x7b, 0xaf, 0xb7, 0x32, 0x81, 0xd8, 0xcb, 0xe5, 0x3b,
	0xfd, 0x36, 0x3a, 0xc1, 0xd5, 0x24, 0xe0, 0x66, 0x0c, 0xd5, 0x23, 0x6f, 0xc0, 0xac, 0xae, 0x2b,
	0x58, 0x8f, 0x55, 0x86, 0xcc, 0x33, 0xd8, 0x06, 0xcd, 0xce, 0xd4, 0xfa, 0x21, 0xa1, 0xfd, 0x81,
	0xd4, 0x85, 0x57, 0xc3, 0x76, 0xa6, 0x38, 0x32, 0x6f, 0x41, 0x3d, 0x6e, 0x2d, 0x42, 0x39, 0x6d,
	0xeb, 0x17, 0x2e, 0xbd, 0x1f, 0x72, 0x00, 0x93, 0x17, 0x0f, 0xba, 0x01, 0x55, 0x7f, 0x38, 0x64,
	0x87, 0x3d, 0xc6, 0x69, 0x9f, 0x46, 0x3a, 0x1a, 0x15, 0xec, 0xea, 0xb5, 0x2d, 0xbd, 0xa4, 0x9e,
	0xa5, 0xc6, 0xc4, 0x34, 0x57, 0xf3, 0x9c, 0xac, 0x60, 0x83, 0xdb, 0x30, 0x6b, 0x13, 0xa3, 0x34,
	0x43, 0xf9, 0x8c, 0x51, 0x5a, 0xea, 0xb7, 0xe1, 0x12, 0x39, 0x8a, 0x99, 0x20, 0xc7, 0x56, 0x05,
	0x6d, 0x55, 0x33, 0xab, 0xa9, 0xd9, 0x02, 0xcc, 0x8e, 0xfc, 0xa3, 0x9e, 0xdf, 0x27, 0xf6, 0x76,
	0x9b, 0xfe, 0xd8, 0xc1, 0xa5, 0x91, 0x7f, 0xb4, 0xd4, 0x27, 0xe8, 0x31, 0x5c, 0x36, 0xff, 0x0f,
	0x38, 0x09, 0x49, 0x24, 0xa9, 0x3f, 0x14, 0x8d, 0x92, 0x46, 0x37, 0x5f, 0x43, 0x77, 0x18, 0x1b,
	0xbe, 0x50, 0x5a, 0xc5, 0x75, 0x0d, 0x5a, 0x9e, 0x60, 0xee, 0xb4, 0x55, 0x6c, 0xfb, 0x54, 0x28,
	0xc5, 0xbb, 0x30, 0xfb, 0x7c, 0x73, 0x7d, 0x73, 0xeb, 0x8b, 0xcd, 0xfa, 0x0c, 0xba, 0x04, 0xb0,
	0xfe, 0xbc, 0xb3, 0x8a, 0x37, 0x57, 0x77, 0x56, 0xbb, 0x75, 0x07, 0x95, 0x20, 0xf7, 0x62, 0xa3,
	0x9e, 0xeb, 0x78, 0x2f, 0x3f, 0xe8, 0x53, 0x39, 0x48, 0x76, 0xbd, 0x80, 0x8d, 0xda, 0x56, 0x45,
	0x94, 0xa5, 0xa3, 0xb6, 0x1f, 0xd3, 0xb6, 0x0c, 0x82, 0xb6, 0xd2, 0x53, 0xfb, 0xe0, 0xde, 0x6e,
	0x49, 0xbb, 0x71, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x6b, 0x13, 0x3b, 0xd6, 0x0d,
	0x00, 0x00,
}
