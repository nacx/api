syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service Organization {
  rpc CreateTenant(CreateTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
  };

  rpc GetTenant(GetTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      get: "/v1/tenants/{id}"
    };
  };

  rpc UpdateTenant(Tenant) returns (Tenant) {
    option (google.api.http) = {
      put: "/v1/tenants/{id}"
      body: "*"
    };
  };

  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants"
    };
  }

  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{id}"
    };
  };

  rpc CreateTeam(CreateTeamRequest) returns (Team) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/teams"
      body: "*"
    };
  };

  rpc UpdateTeam(Team) returns (Team) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/teams/{id}"
      body: "*"
    };
  };

  rpc GetTeam(GetTeamRequest) returns (Team) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/teams/{id}"
    };
  };

  rpc ListTeams(ListTeamsRequest) returns (ListTeamsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/teams"
    };
  }

  rpc DeleteTeam(DeleteTeamRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/teams/{id}"
    };
  };

  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/users"
      body: "*"
    };
  };

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/users/{id}"
    };
  };

  rpc UpdateUser(User) returns (User) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/users/{id}"
      body: "*"
    };
  };

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/users/{id}"
    };
  };

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/users"
    };
  };

  rpc ListTeamMembers(ListTeamMembersRequest) returns (ListTeamMembersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/teams/{id}/members"
    };
  };
}

message Tenant {
  string name = 1;
  string id = 2;
  string description = 3;
}

message CreateTenantRequest {
  // if present, this will be used as the id for the created object
  string id = 1;
  Tenant tenant = 2;
}

message GetTenantRequest {
  string name = 1;
  string id = 2;
}

message ListTenantsRequest {}

message ListTenantsResponse {
  repeated Tenant tenants = 1;
}

message DeleteTenantRequest {
  string name = 1;
  string id = 2;
}

message Team {
  string name = 1;
  string tenant = 2;
  string id = 3;
  string description = 4;
  repeated string members = 5;
}

message CreateTeamRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  Team team = 4;
}

message GetTeamRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message ListTeamsRequest {
  string parent = 1;
  string tenant = 2;
}

message ListTeamsResponse {
  repeated Team teams = 1;
}

message DeleteTeamRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message User {
  string name = 1;
  string tenant = 2;
  string id = 3;
  string description = 4;
}

message CreateUserRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  User user = 4;
}

message GetUserRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message ListUsersRequest {
  string parent = 1;
  string tenant = 2;
}

message ListUsersResponse {
  repeated User users = 1;
}

message DeleteUserRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message ListTeamMembersRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message ListTeamMembersResponse {
  repeated string members = 1;
}
