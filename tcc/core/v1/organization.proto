// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

// $title: Organizational Resources
// $description: Configuration for modeling organizational entities.
// $location: https://tetrate.io/docs/reference/config/organization/v1/resources.html

// This is how you model a team in TSB.
//
// ```yaml
// id: bookinfo
// environment: dev
// tenant: test
// members:
// - nacx
// - rshriram
//```
package tetrateio.api.tcc.core.v1;
option go_package = "github.com/tetrateio/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

import "q/rbac/v1/permissions.proto";
import "q/rbac/v1/rbac.proto";

service Organization {
  option (tetrateio.api.q.rbac.v1.default_requires) = {
    permissions: READ
  };

  rpc CreateTenant(CreateTenantRequest) returns (Tenant) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
  };

  rpc GetTenant(GetTenantRequest) returns (Tenant) {
    option (google.api.http) = {
      get: "/v1/tenants/{id}"
    };
  };

  rpc UpdateTenant(Tenant) returns (Tenant) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{id}"
      body: "*"
    };
  };

  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      defer_permission_check_to_application: true
    };
    option (google.api.http) = {
      get: "/v1/tenants"
    };
  }

  rpc DeleteTenant(DeleteTenantRequest) returns (google.protobuf.Empty) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{id}"
    };
  };

  rpc GetTenantPolicy(GetTenantRequest) returns (tetrateio.api.q.rbac.v1.Policy) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      get: "/v1/tenants/{id}/policy"
    };
  };

  rpc SetTenantPolicy(TenantPolicyRequest) returns (google.protobuf.Empty) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      put: "/v1/tenants/{id}/policy"
      body: "policy"
    };
  };

  // SyncTenant is used by processes that monitor the identity providers to synchronize
  // the users and teams with the ones in TCC
  rpc SyncTenant(SyncTenantRequest) returns (SyncTenantResponse) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      raw_permissions: ["CreateUser", "CreateTeam", "DeleteUser", "DeleteTeam", "WriteTeam"]
    };
    option (google.api.http) = {
      post: "/v1/tenants/{id}/sync"
      body: "*"
    };
  };

  rpc CreateTeam(CreateTeamRequest) returns (Team) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/teams"
      body: "*"
    };
  };

  rpc UpdateTeam(Team) returns (Team) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/teams/{id}"
      body: "*"
    };
  };

  rpc GetTeam(GetTeamRequest) returns (Team) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/teams/{id}"
    };
  };

  rpc ListTeams(ListTeamsRequest) returns (ListTeamsResponse) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      defer_permission_check_to_application: true
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/teams"
    };
  }

  rpc DeleteTeam(DeleteTeamRequest) returns (google.protobuf.Empty) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/teams/{id}"
    };
  };

  rpc CreateUser(CreateUserRequest) returns (User) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/users"
      body: "*"
    };
  };

  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/users/{id}"
    };
  };

  rpc UpdateUser(User) returns (User) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/users/{id}"
      body: "*"
    };
  };

  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/users/{id}"
    };
  };

  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      defer_permission_check_to_application: true
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/users"
    };
  };
}

message Tenant {
  // Internal use only. Auto populated field.
  string name = 1;
  string id = 2 [(validate.rules).string.min_len = 1];
  string description = 3;
  string etag = 4 [(validate.rules).string.min_len = 1];
}

message CreateTenantRequest {
  string id = 1 [(validate.rules).string = {
    // case-insensitive matches alphanumeric characters and: '.', '~', '-', '_'
    // as defined in https://tools.ietf.org/html/rfc3986#section-2.3
    pattern: "(?i)^[0-9a-z.~\\-_]*$"
  }];

  string description = 3;
}

message GetTenantRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string id = 2 [(validate.rules).string.min_len = 1];
}

message TenantPolicyRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string id = 2 [(validate.rules).string.min_len = 1];
  tetrateio.api.q.rbac.v1.Policy policy = 3 [(validate.rules).message.required = true];
}

message ListTenantsRequest {
}

message ListTenantsResponse {
  repeated Tenant tenants = 1;
}

message DeleteTenantRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string id = 2 [(validate.rules).string.min_len = 1];
}

// SourceType describes where users and teams come from
enum SourceType {
  INVALID = 0;
  // LDAP is used for users and teams that are automatically synchronized from LDAP
  LDAP = 1;
  // LOCAL is used for users and teams that are manually created using the TCC API and that
  // are local to TCC.
  // TODO(nacx): Users represent subjects that can be authenticated against an external identity
  // Provider
  // so it is unlikely that there will be local users. Instead of having local users, we should
  // introduce the
  // local service account concept as a proper entity in the model, and configure all TCC agents and
  // the superuser
  // as local service accounts.
  LOCAL = 2;
}

message SyncTenantRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string id = 2 [(validate.rules).string.min_len = 1];

  SourceType source_type = 3 [(validate.rules).enum.defined_only = true];

  // Information of a user as synchronized from the team source. This differs slightly from a TCC
  // user since the fields here are raw info that does not have the context of the TCC hierarchy.
  message SyncUser {
    string id = 1 [(validate.rules).string.min_len = 1];
    string description = 4;
    string email = 5;
  };
  repeated SyncUser users = 4;

  // Information of a team as synchronized from the team source. This differs slightly from a TCC
  // user since
  // the fields here are raw info that does not have the context of the TCC hierarchy.
  message SyncTeam {
    string id = 1 [(validate.rules).string.min_len = 1];
    string description = 2;
    repeated string member_user_ids = 3;
    repeated string member_group_ids = 4;
  };
  repeated SyncTeam teams = 5;
}

message SyncTenantResponse {
  message FailedIds {
    repeated string removal = 1;
    repeated string addition = 2;
    repeated string update = 3;
  }

  FailedIds failed_users = 1;
  FailedIds failed_teams = 2;
}

message Team {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
  string description = 4;
  repeated string members = 5;
  string etag = 6 [(validate.rules).string.min_len = 1];
  SourceType source_type = 7 [(validate.rules).enum.defined_only = true];
}

message CreateTeamRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // If present, this will be used as the id for the created object.
  string id = 3 [(validate.rules).string = {
    // case-insensitive matches alphanumeric characters and: '.', '~', '-', '_'
    // as defined in https://tools.ietf.org/html/rfc3986#section-2.3
    pattern: "(?i)^[0-9a-z.~\\-_]*$"
  }];

  string description = 4;
  repeated string members = 5;
  SourceType source_type = 6 [(validate.rules).enum.defined_only = true];
}

message GetTeamRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message ListTeamsRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message ListTeamsResponse {
  repeated Team teams = 1;
}

message DeleteTeamRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message User {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
  string description = 4;
  string etag = 5 [(validate.rules).string.min_len = 1];
  SourceType source_type = 7 [(validate.rules).enum.defined_only = true];
  string email = 8;
}

message CreateUserRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // If present, this will be used as the id for the created object.
  string id = 3 [(validate.rules).string = {
    // case-insensitive matches alphanumeric characters and: '.', '~', '-', '_'
    // as defined in https://tools.ietf.org/html/rfc3986#section-2.3
    pattern: "(?i)^[0-9a-z.~\\-_]*$"
  }];

  string description = 4;
  SourceType source_type = 5 [(validate.rules).enum.defined_only = true];
  string email = 6;
}

message GetUserRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message ListUsersRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message ListUsersResponse {
  repeated User users = 1;
}

message DeleteUserRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}
