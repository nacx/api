// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: client_settings.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on ClientSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ClientSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Service

	// no validation rules for Workspace

	// no validation rules for Tenant

	if v, ok := interface{}(m.GetHttpRequestTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientSettingsValidationError{
				field:  "HttpRequestTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHttpRetries()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientSettingsValidationError{
				field:  "HttpRetries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTcpConnectTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientSettingsValidationError{
				field:  "TcpConnectTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TcpKeepalive

	// no validation rules for CircuitBreakerSensitivity

	return nil
}

// ClientSettingsValidationError is the validation error returned by
// ClientSettings.Validate if the designated constraints aren't met.
type ClientSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientSettingsValidationError) ErrorName() string { return "ClientSettingsValidationError" }

// Error satisfies the builtin error interface
func (e ClientSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientSettingsValidationError{}

// Validate checks the field values on HTTPRetry with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *HTTPRetry) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Attempts

	if v, ok := interface{}(m.GetPerTryTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HTTPRetryValidationError{
				field:  "PerTryTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RetryOn

	return nil
}

// HTTPRetryValidationError is the validation error returned by
// HTTPRetry.Validate if the designated constraints aren't met.
type HTTPRetryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRetryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRetryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRetryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRetryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRetryValidationError) ErrorName() string { return "HTTPRetryValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRetryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRetry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRetryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRetryValidationError{}

// Validate checks the field values on GetClientSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetClientSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Service

	return nil
}

// GetClientSettingsRequestValidationError is the validation error returned by
// GetClientSettingsRequest.Validate if the designated constraints aren't met.
type GetClientSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientSettingsRequestValidationError) ErrorName() string {
	return "GetClientSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientSettingsRequestValidationError{}

// Validate checks the field values on UpdateClientSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateClientSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Service

	if v, ok := interface{}(m.GetHttpRequestTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientSettingsRequestValidationError{
				field:  "HttpRequestTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetHttpRetries()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientSettingsRequestValidationError{
				field:  "HttpRetries",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTcpConnectTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClientSettingsRequestValidationError{
				field:  "TcpConnectTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TcpKeepalive

	// no validation rules for CircuitBreakerSensitivity

	return nil
}

// UpdateClientSettingsRequestValidationError is the validation error returned
// by UpdateClientSettingsRequest.Validate if the designated constraints
// aren't met.
type UpdateClientSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClientSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClientSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClientSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClientSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClientSettingsRequestValidationError) ErrorName() string {
	return "UpdateClientSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClientSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClientSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClientSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClientSettingsRequestValidationError{}

// Validate checks the field values on DeleteClientSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteClientSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	// no validation rules for Workspace

	// no validation rules for Service

	return nil
}

// DeleteClientSettingsRequestValidationError is the validation error returned
// by DeleteClientSettingsRequest.Validate if the designated constraints
// aren't met.
type DeleteClientSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientSettingsRequestValidationError) ErrorName() string {
	return "DeleteClientSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientSettingsRequestValidationError{}
