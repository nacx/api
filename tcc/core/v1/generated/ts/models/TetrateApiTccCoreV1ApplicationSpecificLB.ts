// tslint:disable
/**
 * TCC Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TetrateApiTccCoreV1RoutingInfo,
    TetrateApiTccCoreV1RoutingInfoFromJSON,
    TetrateApiTccCoreV1RoutingInfoToJSON,
    TetrateApiTccCoreV1TLSSettings,
    TetrateApiTccCoreV1TLSSettingsFromJSON,
    TetrateApiTccCoreV1TLSSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TetrateApiTccCoreV1ApplicationSpecificLB
 */
export interface TetrateApiTccCoreV1ApplicationSpecificLB {
    /**
     * Load balancer deployment labels (Kubernetes only for now). If gateway was created using TCC helm charts, use app: {namespace}-tcclb for kubernetes. The gateway will expose the application on ports 80 and 443 (if tls is configured).
     * @type {{ [key: string]: string; }}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {TetrateApiTccCoreV1TLSSettings}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    tls?: TetrateApiTccCoreV1TLSSettings;
    /**
     * The namespace where this dedicated load balancer of the application is scoped. It should be one of application namespaces. This field cannot be omitted if the application has more than one namespace. If there is only one dedicated load balancer and application has only one  namespace and if this namespace field is omitted, then this field would default to the application namespace.
     * @type {string}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    namespace?: string;
    /**
     * Hostname with which the application is exposed on this load balancer.
     * @type {string}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    hostname?: string;
    /**
     * 
     * @type {TetrateApiTccCoreV1RoutingInfo}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    routingInfo?: TetrateApiTccCoreV1RoutingInfo;
    /**
     * Indicator whether to use this LB as primary. This is used for Metrics reporting at the App level. If there are multiple dedicated load balancers in an App, only one and mandatorily one has to be marked primary. If there is only one dedicated load balancer in an app, it will be marked as primary by default.
     * @type {boolean}
     * @memberof TetrateApiTccCoreV1ApplicationSpecificLB
     */
    isPrimary?: boolean;
}

export function TetrateApiTccCoreV1ApplicationSpecificLBFromJSON(json: any): TetrateApiTccCoreV1ApplicationSpecificLB {
    return {
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'tls': !exists(json, 'tls') ? undefined : TetrateApiTccCoreV1TLSSettingsFromJSON(json['tls']),
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'hostname': !exists(json, 'hostname') ? undefined : json['hostname'],
        'routingInfo': !exists(json, 'routingInfo') ? undefined : TetrateApiTccCoreV1RoutingInfoFromJSON(json['routingInfo']),
        'isPrimary': !exists(json, 'isPrimary') ? undefined : json['isPrimary'],
    };
}

export function TetrateApiTccCoreV1ApplicationSpecificLBToJSON(value?: TetrateApiTccCoreV1ApplicationSpecificLB): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'labels': value.labels,
        'tls': TetrateApiTccCoreV1TLSSettingsToJSON(value.tls),
        'namespace': value.namespace,
        'hostname': value.hostname,
        'routingInfo': TetrateApiTccCoreV1RoutingInfoToJSON(value.routingInfo),
        'isPrimary': value.isPrimary,
    };
}


