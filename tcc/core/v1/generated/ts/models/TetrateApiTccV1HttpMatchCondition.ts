// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  TetrateApiTccV1StringMatch,
  TetrateApiTccV1StringMatchFromJSON,
  TetrateApiTccV1StringMatchToJSON
} from './';

/**
 *
 * @export
 * @interface TetrateApiTccV1HttpMatchCondition
 */
export interface TetrateApiTccV1HttpMatchCondition {
  /**
   *
   * @type {TetrateApiTccV1StringMatch}
   * @memberof TetrateApiTccV1HttpMatchCondition
   */
  uri?: TetrateApiTccV1StringMatch;
  /**
   *
   * @type {TetrateApiTccV1StringMatch}
   * @memberof TetrateApiTccV1HttpMatchCondition
   */
  scheme?: TetrateApiTccV1StringMatch;
  /**
   *
   * @type {TetrateApiTccV1StringMatch}
   * @memberof TetrateApiTccV1HttpMatchCondition
   */
  method?: TetrateApiTccV1StringMatch;
  /**
   *
   * @type {TetrateApiTccV1StringMatch}
   * @memberof TetrateApiTccV1HttpMatchCondition
   */
  authority?: TetrateApiTccV1StringMatch;
  /**
   * The header keys must be lowercase and use hyphen as the separator, e.g. _x-request-id_.
   * @type {{ [key: string]: TetrateApiTccV1StringMatch; }}
   * @memberof TetrateApiTccV1HttpMatchCondition
   */
  headers?: { [key: string]: TetrateApiTccV1StringMatch };
}

export function TetrateApiTccV1HttpMatchConditionFromJSON(
  json: any
): TetrateApiTccV1HttpMatchCondition {
  return {
    uri: !exists(json, 'uri')
      ? undefined
      : TetrateApiTccV1StringMatchFromJSON(json['uri']),
    scheme: !exists(json, 'scheme')
      ? undefined
      : TetrateApiTccV1StringMatchFromJSON(json['scheme']),
    method: !exists(json, 'method')
      ? undefined
      : TetrateApiTccV1StringMatchFromJSON(json['method']),
    authority: !exists(json, 'authority')
      ? undefined
      : TetrateApiTccV1StringMatchFromJSON(json['authority']),
    headers: !exists(json, 'headers')
      ? undefined
      : mapValues(json['headers'], TetrateApiTccV1StringMatchFromJSON)
  };
}

export function TetrateApiTccV1HttpMatchConditionToJSON(
  value?: TetrateApiTccV1HttpMatchCondition
): any {
  if (value === undefined) {
    return undefined;
  }
  return {
    uri: TetrateApiTccV1StringMatchToJSON(value.uri),
    scheme: TetrateApiTccV1StringMatchToJSON(value.scheme),
    method: TetrateApiTccV1StringMatchToJSON(value.method),
    authority: TetrateApiTccV1StringMatchToJSON(value.authority),
    headers:
      value.headers === undefined
        ? undefined
        : mapValues(value.headers, TetrateApiTccV1StringMatchToJSON)
  };
}
