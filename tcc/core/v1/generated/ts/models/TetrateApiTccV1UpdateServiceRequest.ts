// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    TetrateApiTccV1HttpSettings,
    TetrateApiTccV1HttpSettingsFromJSON,
    TetrateApiTccV1HttpSettingsToJSON,
    TetrateApiTccV1Port,
    TetrateApiTccV1PortFromJSON,
    TetrateApiTccV1PortToJSON,
    TetrateApiTccV1Subset,
    TetrateApiTccV1SubsetFromJSON,
    TetrateApiTccV1SubsetToJSON,
    TetrateApiTccV1TcpSettings,
    TetrateApiTccV1TcpSettingsFromJSON,
    TetrateApiTccV1TcpSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TetrateApiTccV1UpdateServiceRequest
 */
export interface TetrateApiTccV1UpdateServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    workspace?: string;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    tenant?: string;
    /**
     * If provided, will overwrite existing labels.
     * @type {{ [key: string]: string; }}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {Array<TetrateApiTccV1Port>}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    ports?: Array<TetrateApiTccV1Port>;
    /**
     * 
     * @type {Array<TetrateApiTccV1Subset>}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    subsets?: Array<TetrateApiTccV1Subset>;
    /**
     * 
     * @type {TetrateApiTccV1HttpSettings}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    httpSettings?: TetrateApiTccV1HttpSettings;
    /**
     * 
     * @type {TetrateApiTccV1TcpSettings}
     * @memberof TetrateApiTccV1UpdateServiceRequest
     */
    tcpSettings?: TetrateApiTccV1TcpSettings;
}

export function TetrateApiTccV1UpdateServiceRequestFromJSON(json: any): TetrateApiTccV1UpdateServiceRequest {
    return {
        'name': !exists(json, 'name') ? undefined : json['name'],
        'workspace': !exists(json, 'workspace') ? undefined : json['workspace'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'ports': !exists(json, 'ports') ? undefined : (json['ports'] as Array<any>).map(TetrateApiTccV1PortFromJSON),
        'subsets': !exists(json, 'subsets') ? undefined : (json['subsets'] as Array<any>).map(TetrateApiTccV1SubsetFromJSON),
        'httpSettings': !exists(json, 'httpSettings') ? undefined : TetrateApiTccV1HttpSettingsFromJSON(json['httpSettings']),
        'tcpSettings': !exists(json, 'tcpSettings') ? undefined : TetrateApiTccV1TcpSettingsFromJSON(json['tcpSettings']),
    };
}

export function TetrateApiTccV1UpdateServiceRequestToJSON(value?: TetrateApiTccV1UpdateServiceRequest): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'workspace': value.workspace,
        'tenant': value.tenant,
        'labels': value.labels,
        'ports': value.ports === undefined ? undefined : (value.ports as Array<any>).map(TetrateApiTccV1PortToJSON),
        'subsets': value.subsets === undefined ? undefined : (value.subsets as Array<any>).map(TetrateApiTccV1SubsetToJSON),
        'httpSettings': TetrateApiTccV1HttpSettingsToJSON(value.httpSettings),
        'tcpSettings': TetrateApiTccV1TcpSettingsToJSON(value.tcpSettings),
    };
}


