// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
    TetrateApiTccV1ClientSettingsSensitivity,
    TetrateApiTccV1ClientSettingsSensitivityFromJSON,
    TetrateApiTccV1ClientSettingsSensitivityToJSON,
    TetrateApiTccV1HTTPRetry,
    TetrateApiTccV1HTTPRetryFromJSON,
    TetrateApiTccV1HTTPRetryToJSON,
} from './';

/**
 * 
 * @export
 * @interface TetrateApiTccV1ClientSettings
 */
export interface TetrateApiTccV1ClientSettings {
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1ClientSettings
     */
    service?: string;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1ClientSettings
     */
    workspace?: string;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccV1ClientSettings
     */
    tenant?: string;
    /**
     * Timeout for HTTP requests.
     * @type {string}
     * @memberof TetrateApiTccV1ClientSettings
     */
    httpRequestTimeout?: string;
    /**
     * 
     * @type {TetrateApiTccV1HTTPRetry}
     * @memberof TetrateApiTccV1ClientSettings
     */
    httpRetries?: TetrateApiTccV1HTTPRetry;
    /**
     * These two settings will go to dest rule TCP connection timeout.
     * @type {string}
     * @memberof TetrateApiTccV1ClientSettings
     */
    tcpConnectTimeout?: string;
    /**
     * If set then set SO_KEEPALIVE on the socket to enable TCP Keepalives.
     * @type {boolean}
     * @memberof TetrateApiTccV1ClientSettings
     */
    tcpKeepalive?: boolean;
    /**
     * 
     * @type {TetrateApiTccV1ClientSettingsSensitivity}
     * @memberof TetrateApiTccV1ClientSettings
     */
    circuitBreakerSensitivity?: TetrateApiTccV1ClientSettingsSensitivity;
}

export function TetrateApiTccV1ClientSettingsFromJSON(json: any): TetrateApiTccV1ClientSettings {
    return {
        'service': !exists(json, 'service') ? undefined : json['service'],
        'workspace': !exists(json, 'workspace') ? undefined : json['workspace'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'httpRequestTimeout': !exists(json, 'httpRequestTimeout') ? undefined : json['httpRequestTimeout'],
        'httpRetries': !exists(json, 'httpRetries') ? undefined : TetrateApiTccV1HTTPRetryFromJSON(json['httpRetries']),
        'tcpConnectTimeout': !exists(json, 'tcpConnectTimeout') ? undefined : json['tcpConnectTimeout'],
        'tcpKeepalive': !exists(json, 'tcpKeepalive') ? undefined : json['tcpKeepalive'],
        'circuitBreakerSensitivity': !exists(json, 'circuitBreakerSensitivity') ? undefined : TetrateApiTccV1ClientSettingsSensitivityFromJSON(json['circuitBreakerSensitivity']),
    };
}

export function TetrateApiTccV1ClientSettingsToJSON(value?: TetrateApiTccV1ClientSettings): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'service': value.service,
        'workspace': value.workspace,
        'tenant': value.tenant,
        'httpRequestTimeout': value.httpRequestTimeout,
        'httpRetries': TetrateApiTccV1HTTPRetryToJSON(value.httpRetries),
        'tcpConnectTimeout': value.tcpConnectTimeout,
        'tcpKeepalive': value.tcpKeepalive,
        'circuitBreakerSensitivity': TetrateApiTccV1ClientSettingsSensitivityToJSON(value.circuitBreakerSensitivity),
    };
}


