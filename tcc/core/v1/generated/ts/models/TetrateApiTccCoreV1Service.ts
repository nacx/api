// tslint:disable
/**
 * TCC Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TetrateApiTccCoreV1ExternalRouteSettings,
    TetrateApiTccCoreV1ExternalRouteSettingsFromJSON,
    TetrateApiTccCoreV1ExternalRouteSettingsToJSON,
    TetrateApiTccCoreV1InternalRouteSettings,
    TetrateApiTccCoreV1InternalRouteSettingsFromJSON,
    TetrateApiTccCoreV1InternalRouteSettingsToJSON,
    TetrateApiTccCoreV1LBRouteSettings,
    TetrateApiTccCoreV1LBRouteSettingsFromJSON,
    TetrateApiTccCoreV1LBRouteSettingsToJSON,
    TetrateApiTccCoreV1Port,
    TetrateApiTccCoreV1PortFromJSON,
    TetrateApiTccCoreV1PortToJSON,
    TetrateApiTccCoreV1RoutingInfo,
    TetrateApiTccCoreV1RoutingInfoFromJSON,
    TetrateApiTccCoreV1RoutingInfoToJSON,
    TetrateApiTccCoreV1ServiceType,
    TetrateApiTccCoreV1ServiceTypeFromJSON,
    TetrateApiTccCoreV1ServiceTypeToJSON,
    TetrateApiTccCoreV1Subset,
    TetrateApiTccCoreV1SubsetFromJSON,
    TetrateApiTccCoreV1SubsetToJSON,
} from './';

/**
 * 
 * @export
 * @interface TetrateApiTccCoreV1Service
 */
export interface TetrateApiTccCoreV1Service {
    /**
     * Internal use only. Auto populated field.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    name?: string;
    /**
     * Tenant.Id.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    tenant?: string;
    /**
     * Environment.Id.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    environment?: string;
    /**
     * Application.Id.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    application?: string;
    /**
     * Short name for the service. Clusters are expected to have namespaces that match the application, and services that match the Id, especially on Kubernetes.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    description?: string;
    /**
     * FQDN hostname of the service.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    hostname?: string;
    /**
     * User identifiable tags associated with this service.
     * @type {{ [key: string]: string; }}
     * @memberof TetrateApiTccCoreV1Service
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {Array<TetrateApiTccCoreV1Port>}
     * @memberof TetrateApiTccCoreV1Service
     */
    ports?: Array<TetrateApiTccCoreV1Port>;
    /**
     * 
     * @type {TetrateApiTccCoreV1RoutingInfo}
     * @memberof TetrateApiTccCoreV1Service
     */
    routingInfo?: TetrateApiTccCoreV1RoutingInfo;
    /**
     * 
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    etag?: string;
    /**
     * Namespace where the service is scoped and should be one of application namespaces. If the application has only one namespace and if this field is omitted, this filed would default to the application namespace. This field cannot be omitted if the application has more than one namespace.
     * @type {string}
     * @memberof TetrateApiTccCoreV1Service
     */
    namespace?: string;
    /**
     * One or more versions of the service. Each version has a distinct name and a set of labels that help uniquely identify the pods/VMs of that version.
     * @type {Array<TetrateApiTccCoreV1Subset>}
     * @memberof TetrateApiTccCoreV1Service
     */
    subsets?: Array<TetrateApiTccCoreV1Subset>;
    /**
     * 
     * @type {TetrateApiTccCoreV1ServiceType}
     * @memberof TetrateApiTccCoreV1Service
     */
    serviceType?: TetrateApiTccCoreV1ServiceType;
    /**
     * 
     * @type {TetrateApiTccCoreV1LBRouteSettings}
     * @memberof TetrateApiTccCoreV1Service
     */
    lbSettings?: TetrateApiTccCoreV1LBRouteSettings;
    /**
     * 
     * @type {TetrateApiTccCoreV1InternalRouteSettings}
     * @memberof TetrateApiTccCoreV1Service
     */
    internalRoutes?: TetrateApiTccCoreV1InternalRouteSettings;
    /**
     * 
     * @type {TetrateApiTccCoreV1ExternalRouteSettings}
     * @memberof TetrateApiTccCoreV1Service
     */
    externalRoutes?: TetrateApiTccCoreV1ExternalRouteSettings;
}

export function TetrateApiTccCoreV1ServiceFromJSON(json: any): TetrateApiTccCoreV1Service {
    return {
        'name': !exists(json, 'name') ? undefined : json['name'],
        'tenant': !exists(json, 'tenant') ? undefined : json['tenant'],
        'environment': !exists(json, 'environment') ? undefined : json['environment'],
        'application': !exists(json, 'application') ? undefined : json['application'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'hostname': !exists(json, 'hostname') ? undefined : json['hostname'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'ports': !exists(json, 'ports') ? undefined : (json['ports'] as Array<any>).map(TetrateApiTccCoreV1PortFromJSON),
        'routingInfo': !exists(json, 'routingInfo') ? undefined : TetrateApiTccCoreV1RoutingInfoFromJSON(json['routingInfo']),
        'etag': !exists(json, 'etag') ? undefined : json['etag'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'subsets': !exists(json, 'subsets') ? undefined : (json['subsets'] as Array<any>).map(TetrateApiTccCoreV1SubsetFromJSON),
        'serviceType': !exists(json, 'serviceType') ? undefined : TetrateApiTccCoreV1ServiceTypeFromJSON(json['serviceType']),
        'lbSettings': !exists(json, 'lbSettings') ? undefined : TetrateApiTccCoreV1LBRouteSettingsFromJSON(json['lbSettings']),
        'internalRoutes': !exists(json, 'internalRoutes') ? undefined : TetrateApiTccCoreV1InternalRouteSettingsFromJSON(json['internalRoutes']),
        'externalRoutes': !exists(json, 'externalRoutes') ? undefined : TetrateApiTccCoreV1ExternalRouteSettingsFromJSON(json['externalRoutes']),
    };
}

export function TetrateApiTccCoreV1ServiceToJSON(value?: TetrateApiTccCoreV1Service): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'name': value.name,
        'tenant': value.tenant,
        'environment': value.environment,
        'application': value.application,
        'id': value.id,
        'description': value.description,
        'hostname': value.hostname,
        'labels': value.labels,
        'ports': value.ports === undefined ? undefined : (value.ports as Array<any>).map(TetrateApiTccCoreV1PortToJSON),
        'routingInfo': TetrateApiTccCoreV1RoutingInfoToJSON(value.routingInfo),
        'etag': value.etag,
        'namespace': value.namespace,
        'subsets': value.subsets === undefined ? undefined : (value.subsets as Array<any>).map(TetrateApiTccCoreV1SubsetToJSON),
        'serviceType': TetrateApiTccCoreV1ServiceTypeToJSON(value.serviceType),
        'lbSettings': TetrateApiTccCoreV1LBRouteSettingsToJSON(value.lbSettings),
        'internalRoutes': TetrateApiTccCoreV1InternalRouteSettingsToJSON(value.internalRoutes),
        'externalRoutes': TetrateApiTccCoreV1ExternalRouteSettingsToJSON(value.externalRoutes),
    };
}


