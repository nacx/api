// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccV1ConfigData,
    TetrateApiTccV1ConfigDataFromJSON,
    TetrateApiTccV1ConfigDataToJSON,
} from '../models';

export interface DownloadRequest {
    configtype: string;
    cluster: string;
}

/**
 * no description
 */
export class ConfigProducerApi extends runtime.BaseAPI {

    /**
     */
    async downloadRaw(requestParameters: DownloadRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ConfigData>> {
        if (requestParameters.configtype === null || requestParameters.configtype === undefined) {
            throw new runtime.RequiredError('configtype','Required parameter requestParameters.configtype was null or undefined when calling download.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling download.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/configproducer/{configtype}/{cluster}`.replace(`{${"configtype"}}`, encodeURIComponent(String(requestParameters.configtype))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ConfigDataFromJSON(jsonValue));
    }

    /**
     */
    async download(requestParameters: DownloadRequest): Promise<TetrateApiTccV1ConfigData> {
        const response = await this.downloadRaw(requestParameters);
        return await response.value();
    }

}
