// tslint:disable
/**
 * TCC Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccCoreV1AddApplicationServiceRequest,
    TetrateApiTccCoreV1AddApplicationServiceRequestFromJSON,
    TetrateApiTccCoreV1AddApplicationServiceRequestToJSON,
    TetrateApiTccCoreV1Application,
    TetrateApiTccCoreV1ApplicationFromJSON,
    TetrateApiTccCoreV1ApplicationToJSON,
    TetrateApiTccCoreV1CreateApplicationRequest,
    TetrateApiTccCoreV1CreateApplicationRequestFromJSON,
    TetrateApiTccCoreV1CreateApplicationRequestToJSON,
    TetrateApiTccCoreV1CreateWorkspaceRequest,
    TetrateApiTccCoreV1CreateWorkspaceRequestFromJSON,
    TetrateApiTccCoreV1CreateWorkspaceRequestToJSON,
    TetrateApiTccCoreV1ListApplicationServicesResponse,
    TetrateApiTccCoreV1ListApplicationServicesResponseFromJSON,
    TetrateApiTccCoreV1ListApplicationServicesResponseToJSON,
    TetrateApiTccCoreV1ListApplicationsResponse,
    TetrateApiTccCoreV1ListApplicationsResponseFromJSON,
    TetrateApiTccCoreV1ListApplicationsResponseToJSON,
    TetrateApiTccCoreV1ListWorkspacesResponse,
    TetrateApiTccCoreV1ListWorkspacesResponseFromJSON,
    TetrateApiTccCoreV1ListWorkspacesResponseToJSON,
    TetrateApiTccCoreV1UpdateApplicationRequest,
    TetrateApiTccCoreV1UpdateApplicationRequestFromJSON,
    TetrateApiTccCoreV1UpdateApplicationRequestToJSON,
    TetrateApiTccCoreV1UpdateWorkspaceRequest,
    TetrateApiTccCoreV1UpdateWorkspaceRequestFromJSON,
    TetrateApiTccCoreV1UpdateWorkspaceRequestToJSON,
    TetrateApiTccCoreV1Workspace,
    TetrateApiTccCoreV1WorkspaceFromJSON,
    TetrateApiTccCoreV1WorkspaceToJSON,
} from '../models';

export interface AddServiceToApplicationRequest {
    tenant: string;
    workspace: string;
    application: string;
    servicename: string;
    body: TetrateApiTccCoreV1AddApplicationServiceRequest;
}

export interface CreateApplicationRequest {
    tenant: string;
    workspace: string;
    name: string;
    body: TetrateApiTccCoreV1CreateApplicationRequest;
}

export interface CreateWorkspaceRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccCoreV1CreateWorkspaceRequest;
}

export interface DeleteApplicationRequest {
    tenant: string;
    workspace: string;
    name: string;
}

export interface DeleteWorkspaceRequest {
    tenant: string;
    name: string;
}

export interface GetApplicationRequest {
    tenant: string;
    workspace: string;
    name: string;
}

export interface GetWorkspaceRequest {
    tenant: string;
    name: string;
}

export interface ListApplicationServicesRequest {
    tenant: string;
    workspace: string;
    application: string;
}

export interface ListApplicationsRequest {
    tenant: string;
    workspace: string;
}

export interface ListWorkspacesRequest {
    tenant: string;
}

export interface RemoveServiceFromApplicationRequest {
    tenant: string;
    workspace: string;
    application: string;
    servicename: string;
}

export interface UpdateApplicationRequest {
    tenant: string;
    workspace: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateApplicationRequest;
}

export interface UpdateWorkspaceRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateWorkspaceRequest;
}

/**
 * no description
 */
export class LogicalTopologyApi extends runtime.BaseAPI {

    /**
     */
    async addServiceToApplicationRaw(requestParameters: AddServiceToApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling addServiceToApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling addServiceToApplication.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling addServiceToApplication.');
        }

        if (requestParameters.servicename === null || requestParameters.servicename === undefined) {
            throw new runtime.RequiredError('servicename','Required parameter requestParameters.servicename was null or undefined when calling addServiceToApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addServiceToApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services/{servicename}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"servicename"}}`, encodeURIComponent(String(requestParameters.servicename))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1AddApplicationServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async addServiceToApplication(requestParameters: AddServiceToApplicationRequest): Promise<object> {
        const response = await this.addServiceToApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling createApplication.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateApplicationRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async createApplication(requestParameters: CreateApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.createApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateWorkspaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async createWorkspace(requestParameters: CreateWorkspaceRequest): Promise<TetrateApiTccCoreV1Workspace> {
        const response = await this.createWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest): Promise<object> {
        const response = await this.deleteApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteWorkspace(requestParameters: DeleteWorkspaceRequest): Promise<object> {
        const response = await this.deleteWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling getApplication.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async getApplication(requestParameters: GetApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.getApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async getWorkspace(requestParameters: GetWorkspaceRequest): Promise<TetrateApiTccCoreV1Workspace> {
        const response = await this.getWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listApplicationServicesRaw(requestParameters: ListApplicationServicesRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listApplicationServices.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling listApplicationServices.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling listApplicationServices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListApplicationServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listApplicationServices(requestParameters: ListApplicationServicesRequest): Promise<TetrateApiTccCoreV1ListApplicationServicesResponse> {
        const response = await this.listApplicationServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listApplicationsRaw(requestParameters: ListApplicationsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listApplications.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling listApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListApplicationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listApplications(requestParameters: ListApplicationsRequest): Promise<TetrateApiTccCoreV1ListApplicationsResponse> {
        const response = await this.listApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listWorkspacesRaw(requestParameters: ListWorkspacesRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listWorkspaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListWorkspacesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listWorkspaces(requestParameters: ListWorkspacesRequest): Promise<TetrateApiTccCoreV1ListWorkspacesResponse> {
        const response = await this.listWorkspacesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async removeServiceFromApplicationRaw(requestParameters: RemoveServiceFromApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling removeServiceFromApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling removeServiceFromApplication.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling removeServiceFromApplication.');
        }

        if (requestParameters.servicename === null || requestParameters.servicename === undefined) {
            throw new runtime.RequiredError('servicename','Required parameter requestParameters.servicename was null or undefined when calling removeServiceFromApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{application}/services/{servicename}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"servicename"}}`, encodeURIComponent(String(requestParameters.servicename))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async removeServiceFromApplication(requestParameters: RemoveServiceFromApplicationRequest): Promise<object> {
        const response = await this.removeServiceFromApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateApplication.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling updateApplication.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{workspace}/applications/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateApplicationRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async updateApplication(requestParameters: UpdateApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.updateApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/workspaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateWorkspaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceRequest): Promise<TetrateApiTccCoreV1Workspace> {
        const response = await this.updateWorkspaceRaw(requestParameters);
        return await response.value();
    }

}
