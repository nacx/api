// tslint:disable
/**
 * TCC Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccCoreV1RegistryData,
    TetrateApiTccCoreV1RegistryDataFromJSON,
    TetrateApiTccCoreV1RegistryDataToJSON,
} from '../models';

export interface UploadRequest {
    tenant: string;
    registrytype: string;
    cluster: string;
    body: TetrateApiTccCoreV1RegistryData;
}

/**
 * no description
 */
export class RegistryConsumerApi extends runtime.BaseAPI {

    /**
     */
    async uploadRaw(requestParameters: UploadRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling upload.');
        }

        if (requestParameters.registrytype === null || requestParameters.registrytype === undefined) {
            throw new runtime.RequiredError('registrytype','Required parameter requestParameters.registrytype was null or undefined when calling upload.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling upload.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling upload.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/registryconsumer/{registrytype}/{cluster}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"registrytype"}}`, encodeURIComponent(String(requestParameters.registrytype))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1RegistryDataToJSON(requestParameters.body),
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async upload(requestParameters: UploadRequest): Promise<object> {
        const response = await this.uploadRaw(requestParameters);
        return await response.value();
    }

}
