// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccV1ClientSettings,
    TetrateApiTccV1ClientSettingsFromJSON,
    TetrateApiTccV1ClientSettingsToJSON,
    TetrateApiTccV1UpdateClientSettingsRequest,
    TetrateApiTccV1UpdateClientSettingsRequestFromJSON,
    TetrateApiTccV1UpdateClientSettingsRequestToJSON,
} from '../models';

export interface DeleteClientSettingsForServiceRequest {
    tenant: string;
    workspace: string;
    service: string;
}

export interface DeleteClientSettingsForWorkspaceRequest {
    tenant: string;
    workspace: string;
    service?: string;
}

export interface GetClientSettingsForServiceRequest {
    tenant: string;
    workspace: string;
    service: string;
}

export interface GetClientSettingsForTenantRequest {
    tenant: string;
    workspace?: string;
    service?: string;
}

export interface GetClientSettingsForWorkspaceRequest {
    tenant: string;
    workspace: string;
    service?: string;
}

export interface UpdateClientSettingsForServiceRequest {
    tenant: string;
    workspace: string;
    service: string;
    body: TetrateApiTccV1UpdateClientSettingsRequest;
}

export interface UpdateClientSettingsForTenantRequest {
    tenant: string;
    body: TetrateApiTccV1UpdateClientSettingsRequest;
}

export interface UpdateClientSettingsForWorkspaceRequest {
    tenant: string;
    workspace: string;
    body: TetrateApiTccV1UpdateClientSettingsRequest;
}

/**
 * no description
 */
export class ClientSettingsServiceApi extends runtime.BaseAPI {

    /**
     */
    async deleteClientSettingsForServiceRaw(requestParameters: DeleteClientSettingsForServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteClientSettingsForService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling deleteClientSettingsForService.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling deleteClientSettingsForService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}/service/{service}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteClientSettingsForService(requestParameters: DeleteClientSettingsForServiceRequest): Promise<any> {
        const response = await this.deleteClientSettingsForServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteClientSettingsForWorkspaceRaw(requestParameters: DeleteClientSettingsForWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteClientSettingsForWorkspace.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling deleteClientSettingsForWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteClientSettingsForWorkspace(requestParameters: DeleteClientSettingsForWorkspaceRequest): Promise<any> {
        const response = await this.deleteClientSettingsForWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getClientSettingsForServiceRaw(requestParameters: GetClientSettingsForServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getClientSettingsForService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling getClientSettingsForService.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling getClientSettingsForService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}/service/{service}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async getClientSettingsForService(requestParameters: GetClientSettingsForServiceRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.getClientSettingsForServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getClientSettingsForTenantRaw(requestParameters: GetClientSettingsForTenantRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getClientSettingsForTenant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.workspace !== undefined) {
            queryParameters['workspace'] = requestParameters.workspace;
        }

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async getClientSettingsForTenant(requestParameters: GetClientSettingsForTenantRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.getClientSettingsForTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getClientSettingsForWorkspaceRaw(requestParameters: GetClientSettingsForWorkspaceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getClientSettingsForWorkspace.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling getClientSettingsForWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.service !== undefined) {
            queryParameters['service'] = requestParameters.service;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async getClientSettingsForWorkspace(requestParameters: GetClientSettingsForWorkspaceRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.getClientSettingsForWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateClientSettingsForServiceRaw(requestParameters: UpdateClientSettingsForServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateClientSettingsForService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling updateClientSettingsForService.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling updateClientSettingsForService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateClientSettingsForService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}/service/{service}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1UpdateClientSettingsRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async updateClientSettingsForService(requestParameters: UpdateClientSettingsForServiceRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.updateClientSettingsForServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateClientSettingsForTenantRaw(requestParameters: UpdateClientSettingsForTenantRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateClientSettingsForTenant.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateClientSettingsForTenant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1UpdateClientSettingsRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async updateClientSettingsForTenant(requestParameters: UpdateClientSettingsForTenantRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.updateClientSettingsForTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateClientSettingsForWorkspaceRaw(requestParameters: UpdateClientSettingsForWorkspaceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ClientSettings>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateClientSettingsForWorkspace.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling updateClientSettingsForWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateClientSettingsForWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/clientsettings/tenant/{tenant}/workspace/{workspace}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1UpdateClientSettingsRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ClientSettingsFromJSON(jsonValue));
    }

    /**
     */
    async updateClientSettingsForWorkspace(requestParameters: UpdateClientSettingsForWorkspaceRequest): Promise<TetrateApiTccV1ClientSettings> {
        const response = await this.updateClientSettingsForWorkspaceRaw(requestParameters);
        return await response.value();
    }

}
