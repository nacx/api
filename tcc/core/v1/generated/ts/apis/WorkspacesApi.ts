// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccV1CreateWorkspaceRequest,
    TetrateApiTccV1CreateWorkspaceRequestFromJSON,
    TetrateApiTccV1CreateWorkspaceRequestToJSON,
    TetrateApiTccV1ListWorkspacesResponse,
    TetrateApiTccV1ListWorkspacesResponseFromJSON,
    TetrateApiTccV1ListWorkspacesResponseToJSON,
    TetrateApiTccV1UpdateWorkspaceRequest,
    TetrateApiTccV1UpdateWorkspaceRequestFromJSON,
    TetrateApiTccV1UpdateWorkspaceRequestToJSON,
    TetrateApiTccV1Workspace,
    TetrateApiTccV1WorkspaceFromJSON,
    TetrateApiTccV1WorkspaceToJSON,
} from '../models';

export interface CreateWorkspaceRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccV1CreateWorkspaceRequest;
}

export interface DeleteWorkspaceRequest {
    tenant: string;
    name: string;
}

export interface GetWorkspaceRequest {
    tenant: string;
    name: string;
}

export interface ListWorkspacesRequest {
    tenant: string;
}

export interface UpdateWorkspaceRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccV1UpdateWorkspaceRequest;
}

/**
 * no description
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     */
    async createWorkspaceRaw(requestParameters: CreateWorkspaceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Workspace>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/tenant/{tenant}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1CreateWorkspaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async createWorkspace(requestParameters: CreateWorkspaceRequest): Promise<TetrateApiTccV1Workspace> {
        const response = await this.createWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/workspaces/tenant/{tenant}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteWorkspace(requestParameters: DeleteWorkspaceRequest): Promise<any> {
        const response = await this.deleteWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Workspace>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/workspaces/tenant/{tenant}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async getWorkspace(requestParameters: GetWorkspaceRequest): Promise<TetrateApiTccV1Workspace> {
        const response = await this.getWorkspaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listWorkspacesRaw(requestParameters: ListWorkspacesRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ListWorkspacesResponse>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listWorkspaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/workspaces/tenant/{tenant}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ListWorkspacesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listWorkspaces(requestParameters: ListWorkspacesRequest): Promise<TetrateApiTccV1ListWorkspacesResponse> {
        const response = await this.listWorkspacesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateWorkspaceRaw(requestParameters: UpdateWorkspaceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Workspace>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateWorkspace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateWorkspace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/workspaces/tenant/{tenant}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1UpdateWorkspaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1WorkspaceFromJSON(jsonValue));
    }

    /**
     */
    async updateWorkspace(requestParameters: UpdateWorkspaceRequest): Promise<TetrateApiTccV1Workspace> {
        const response = await this.updateWorkspaceRaw(requestParameters);
        return await response.value();
    }

}
