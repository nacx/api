// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccV1CreateTenantRequest,
    TetrateApiTccV1CreateTenantRequestFromJSON,
    TetrateApiTccV1CreateTenantRequestToJSON,
    TetrateApiTccV1ListTenantsResponse,
    TetrateApiTccV1ListTenantsResponseFromJSON,
    TetrateApiTccV1ListTenantsResponseToJSON,
    TetrateApiTccV1Tenant,
    TetrateApiTccV1TenantFromJSON,
    TetrateApiTccV1TenantToJSON,
} from '../models';

export interface CreateTenantRequest {
    name: string;
    body: TetrateApiTccV1CreateTenantRequest;
}

export interface DeleteTenantRequest {
    name: string;
}

export interface GetTenantRequest {
    name: string;
}

/**
 * no description
 */
export class TenantsApi extends runtime.BaseAPI {

    /**
     */
    async createTenantRaw(requestParameters: CreateTenantRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Tenant>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createTenant.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createTenant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1CreateTenantRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1TenantFromJSON(jsonValue));
    }

    /**
     */
    async createTenant(requestParameters: CreateTenantRequest): Promise<TetrateApiTccV1Tenant> {
        const response = await this.createTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteTenantRaw(requestParameters: DeleteTenantRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteTenant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteTenant(requestParameters: DeleteTenantRequest): Promise<any> {
        const response = await this.deleteTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTenantRaw(requestParameters: GetTenantRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Tenant>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getTenant.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1TenantFromJSON(jsonValue));
    }

    /**
     */
    async getTenant(requestParameters: GetTenantRequest): Promise<TetrateApiTccV1Tenant> {
        const response = await this.getTenantRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listTenantsRaw(): Promise<runtime.ApiResponse<TetrateApiTccV1ListTenantsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ListTenantsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listTenants(): Promise<TetrateApiTccV1ListTenantsResponse> {
        const response = await this.listTenantsRaw();
        return await response.value();
    }

}
