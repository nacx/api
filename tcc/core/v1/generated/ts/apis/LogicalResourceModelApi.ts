// tslint:disable
/**
 * TCC Configuration API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccCoreV1Application,
    TetrateApiTccCoreV1ApplicationFromJSON,
    TetrateApiTccCoreV1ApplicationToJSON,
    TetrateApiTccCoreV1CreateApplicationRequest,
    TetrateApiTccCoreV1CreateApplicationRequestFromJSON,
    TetrateApiTccCoreV1CreateApplicationRequestToJSON,
    TetrateApiTccCoreV1CreateEnvironmentRequest,
    TetrateApiTccCoreV1CreateEnvironmentRequestFromJSON,
    TetrateApiTccCoreV1CreateEnvironmentRequestToJSON,
    TetrateApiTccCoreV1CreateLoadBalancerRequest,
    TetrateApiTccCoreV1CreateLoadBalancerRequestFromJSON,
    TetrateApiTccCoreV1CreateLoadBalancerRequestToJSON,
    TetrateApiTccCoreV1CreateServiceRequest,
    TetrateApiTccCoreV1CreateServiceRequestFromJSON,
    TetrateApiTccCoreV1CreateServiceRequestToJSON,
    TetrateApiTccCoreV1Environment,
    TetrateApiTccCoreV1EnvironmentFromJSON,
    TetrateApiTccCoreV1EnvironmentToJSON,
    TetrateApiTccCoreV1ListApplicationsResponse,
    TetrateApiTccCoreV1ListApplicationsResponseFromJSON,
    TetrateApiTccCoreV1ListApplicationsResponseToJSON,
    TetrateApiTccCoreV1ListEnvironmentsResponse,
    TetrateApiTccCoreV1ListEnvironmentsResponseFromJSON,
    TetrateApiTccCoreV1ListEnvironmentsResponseToJSON,
    TetrateApiTccCoreV1ListLoadBalancersResponse,
    TetrateApiTccCoreV1ListLoadBalancersResponseFromJSON,
    TetrateApiTccCoreV1ListLoadBalancersResponseToJSON,
    TetrateApiTccCoreV1ListServicesResponse,
    TetrateApiTccCoreV1ListServicesResponseFromJSON,
    TetrateApiTccCoreV1ListServicesResponseToJSON,
    TetrateApiTccCoreV1LoadBalancer,
    TetrateApiTccCoreV1LoadBalancerFromJSON,
    TetrateApiTccCoreV1LoadBalancerToJSON,
    TetrateApiTccCoreV1Service,
    TetrateApiTccCoreV1ServiceFromJSON,
    TetrateApiTccCoreV1ServiceToJSON,
} from '../models';

export interface CreateApplicationRequest {
    tenant: string;
    environment: string;
    body: TetrateApiTccCoreV1CreateApplicationRequest;
}

export interface CreateEnvironmentRequest {
    tenant: string;
    body: TetrateApiTccCoreV1CreateEnvironmentRequest;
}

export interface CreateLoadBalancerRequest {
    tenant: string;
    environment: string;
    body: TetrateApiTccCoreV1CreateLoadBalancerRequest;
}

export interface CreateServiceRequest {
    tenant: string;
    environment: string;
    application: string;
    body: TetrateApiTccCoreV1CreateServiceRequest;
}

export interface DeleteApplicationRequest {
    tenant: string;
    environment: string;
    id: string;
    name?: string;
}

export interface DeleteEnvironmentRequest {
    tenant: string;
    id: string;
    name?: string;
}

export interface DeleteLoadBalancerRequest {
    tenant: string;
    environment: string;
    id: string;
    name?: string;
}

export interface DeleteServiceRequest {
    tenant: string;
    environment: string;
    application: string;
    id: string;
    name?: string;
}

export interface GetApplicationRequest {
    tenant: string;
    environment: string;
    id: string;
    name?: string;
}

export interface GetEnvironmentRequest {
    tenant: string;
    id: string;
    name?: string;
}

export interface GetLoadBalancerRequest {
    tenant: string;
    environment: string;
    id: string;
    name?: string;
}

export interface GetServiceRequest {
    tenant: string;
    environment: string;
    application: string;
    id: string;
    name?: string;
}

export interface ListApplicationsRequest {
    tenant: string;
    environment: string;
    parent?: string;
}

export interface ListEnvironmentsRequest {
    tenant: string;
    parent?: string;
}

export interface ListLoadBalancersRequest {
    tenant: string;
    environment: string;
    parent?: string;
}

export interface ListServicesRequest {
    tenant: string;
    environment: string;
    application: string;
    parent?: string;
}

export interface UpdateApplicationRequest {
    tenant: string;
    environment: string;
    id: string;
    body: TetrateApiTccCoreV1Application;
}

export interface UpdateEnvironmentRequest {
    tenant: string;
    id: string;
    body: TetrateApiTccCoreV1Environment;
}

export interface UpdateLoadBalancerRequest {
    tenant: string;
    environment: string;
    id: string;
    body: TetrateApiTccCoreV1LoadBalancer;
}

export interface UpdateServiceRequest {
    tenant: string;
    environment: string;
    application: string;
    id: string;
    body: TetrateApiTccCoreV1Service;
}

/**
 * no description
 */
export class LogicalResourceModelApi extends runtime.BaseAPI {

    /**
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createApplication.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling createApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateApplicationRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async createApplication(requestParameters: CreateApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.createApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createEnvironmentRaw(requestParameters: CreateEnvironmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createEnvironment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateEnvironmentRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EnvironmentFromJSON(jsonValue));
    }

    /**
     */
    async createEnvironment(requestParameters: CreateEnvironmentRequest): Promise<TetrateApiTccCoreV1Environment> {
        const response = await this.createEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createLoadBalancerRaw(requestParameters: CreateLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/loadbalancers`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateLoadBalancerRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async createLoadBalancer(requestParameters: CreateLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.createLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createServiceRaw(requestParameters: CreateServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createService.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling createService.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling createService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async createService(requestParameters: CreateServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.createServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling deleteApplication.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest): Promise<object> {
        const response = await this.deleteApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteEnvironmentRaw(requestParameters: DeleteEnvironmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteEnvironment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteEnvironment(requestParameters: DeleteEnvironmentRequest): Promise<object> {
        const response = await this.deleteEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteLoadBalancerRaw(requestParameters: DeleteLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteLoadBalancer.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling deleteLoadBalancer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteLoadBalancer(requestParameters: DeleteLoadBalancerRequest): Promise<object> {
        const response = await this.deleteLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteServiceRaw(requestParameters: DeleteServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteService.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling deleteService.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling deleteService.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteService(requestParameters: DeleteServiceRequest): Promise<object> {
        const response = await this.deleteServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getApplication.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getApplication.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async getApplication(requestParameters: GetApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.getApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getEnvironmentRaw(requestParameters: GetEnvironmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getEnvironment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EnvironmentFromJSON(jsonValue));
    }

    /**
     */
    async getEnvironment(requestParameters: GetEnvironmentRequest): Promise<TetrateApiTccCoreV1Environment> {
        const response = await this.getEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getLoadBalancerRaw(requestParameters: GetLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getLoadBalancer.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getLoadBalancer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async getLoadBalancer(requestParameters: GetLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.getLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getServiceRaw(requestParameters: GetServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getService.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getService.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling getService.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async getService(requestParameters: GetServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.getServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listApplicationsRaw(requestParameters: ListApplicationsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listApplications.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling listApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListApplicationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listApplications(requestParameters: ListApplicationsRequest): Promise<TetrateApiTccCoreV1ListApplicationsResponse> {
        const response = await this.listApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listEnvironmentsRaw(requestParameters: ListEnvironmentsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listEnvironments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListEnvironmentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listEnvironments(requestParameters: ListEnvironmentsRequest): Promise<TetrateApiTccCoreV1ListEnvironmentsResponse> {
        const response = await this.listEnvironmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listLoadBalancersRaw(requestParameters: ListLoadBalancersRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listLoadBalancers.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling listLoadBalancers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/loadbalancers`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListLoadBalancersResponseFromJSON(jsonValue));
    }

    /**
     */
    async listLoadBalancers(requestParameters: ListLoadBalancersRequest): Promise<TetrateApiTccCoreV1ListLoadBalancersResponse> {
        const response = await this.listLoadBalancersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listServicesRaw(requestParameters: ListServicesRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listServices.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling listServices.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling listServices.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListServicesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listServices(requestParameters: ListServicesRequest): Promise<TetrateApiTccCoreV1ListServicesResponse> {
        const response = await this.listServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateApplicationRaw(requestParameters: UpdateApplicationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateApplication.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling updateApplication.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApplication.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1ApplicationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ApplicationFromJSON(jsonValue));
    }

    /**
     */
    async updateApplication(requestParameters: UpdateApplicationRequest): Promise<TetrateApiTccCoreV1Application> {
        const response = await this.updateApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateEnvironmentRaw(requestParameters: UpdateEnvironmentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateEnvironment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEnvironment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateEnvironment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1EnvironmentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EnvironmentFromJSON(jsonValue));
    }

    /**
     */
    async updateEnvironment(requestParameters: UpdateEnvironmentRequest): Promise<TetrateApiTccCoreV1Environment> {
        const response = await this.updateEnvironmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateLoadBalancerRaw(requestParameters: UpdateLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1LoadBalancerToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async updateLoadBalancer(requestParameters: UpdateLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.updateLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateServiceRaw(requestParameters: UpdateServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateService.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling updateService.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling updateService.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1ServiceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async updateService(requestParameters: UpdateServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.updateServiceRaw(requestParameters);
        return await response.value();
    }

}
