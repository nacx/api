// tslint:disable
/**
 * TCC Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccCoreV1BatchOperationRequest,
    TetrateApiTccCoreV1BatchOperationRequestFromJSON,
    TetrateApiTccCoreV1BatchOperationRequestToJSON,
    TetrateApiTccCoreV1Cluster,
    TetrateApiTccCoreV1ClusterFromJSON,
    TetrateApiTccCoreV1ClusterToJSON,
    TetrateApiTccCoreV1CreateClusterRequest,
    TetrateApiTccCoreV1CreateClusterRequestFromJSON,
    TetrateApiTccCoreV1CreateClusterRequestToJSON,
    TetrateApiTccCoreV1CreateEndpointRequest,
    TetrateApiTccCoreV1CreateEndpointRequestFromJSON,
    TetrateApiTccCoreV1CreateEndpointRequestToJSON,
    TetrateApiTccCoreV1CreateLoadBalancerRequest,
    TetrateApiTccCoreV1CreateLoadBalancerRequestFromJSON,
    TetrateApiTccCoreV1CreateLoadBalancerRequestToJSON,
    TetrateApiTccCoreV1CreateNamespaceRequest,
    TetrateApiTccCoreV1CreateNamespaceRequestFromJSON,
    TetrateApiTccCoreV1CreateNamespaceRequestToJSON,
    TetrateApiTccCoreV1CreateServiceRequest,
    TetrateApiTccCoreV1CreateServiceRequestFromJSON,
    TetrateApiTccCoreV1CreateServiceRequestToJSON,
    TetrateApiTccCoreV1Endpoint,
    TetrateApiTccCoreV1EndpointFromJSON,
    TetrateApiTccCoreV1EndpointToJSON,
    TetrateApiTccCoreV1ListClustersResponse,
    TetrateApiTccCoreV1ListClustersResponseFromJSON,
    TetrateApiTccCoreV1ListClustersResponseToJSON,
    TetrateApiTccCoreV1ListEndpointResponse,
    TetrateApiTccCoreV1ListEndpointResponseFromJSON,
    TetrateApiTccCoreV1ListEndpointResponseToJSON,
    TetrateApiTccCoreV1ListLoadBalancersResponse,
    TetrateApiTccCoreV1ListLoadBalancersResponseFromJSON,
    TetrateApiTccCoreV1ListLoadBalancersResponseToJSON,
    TetrateApiTccCoreV1ListNamespacesResponse,
    TetrateApiTccCoreV1ListNamespacesResponseFromJSON,
    TetrateApiTccCoreV1ListNamespacesResponseToJSON,
    TetrateApiTccCoreV1ListServiceResponse,
    TetrateApiTccCoreV1ListServiceResponseFromJSON,
    TetrateApiTccCoreV1ListServiceResponseToJSON,
    TetrateApiTccCoreV1LoadBalancer,
    TetrateApiTccCoreV1LoadBalancerFromJSON,
    TetrateApiTccCoreV1LoadBalancerToJSON,
    TetrateApiTccCoreV1Namespace,
    TetrateApiTccCoreV1NamespaceFromJSON,
    TetrateApiTccCoreV1NamespaceToJSON,
    TetrateApiTccCoreV1Service,
    TetrateApiTccCoreV1ServiceFromJSON,
    TetrateApiTccCoreV1ServiceToJSON,
    TetrateApiTccCoreV1UpdateClusterRequest,
    TetrateApiTccCoreV1UpdateClusterRequestFromJSON,
    TetrateApiTccCoreV1UpdateClusterRequestToJSON,
    TetrateApiTccCoreV1UpdateEndpointRequest,
    TetrateApiTccCoreV1UpdateEndpointRequestFromJSON,
    TetrateApiTccCoreV1UpdateEndpointRequestToJSON,
    TetrateApiTccCoreV1UpdateLoadBalancerRequest,
    TetrateApiTccCoreV1UpdateLoadBalancerRequestFromJSON,
    TetrateApiTccCoreV1UpdateLoadBalancerRequestToJSON,
    TetrateApiTccCoreV1UpdateNamespaceRequest,
    TetrateApiTccCoreV1UpdateNamespaceRequestFromJSON,
    TetrateApiTccCoreV1UpdateNamespaceRequestToJSON,
    TetrateApiTccCoreV1UpdateServiceRequest,
    TetrateApiTccCoreV1UpdateServiceRequestFromJSON,
    TetrateApiTccCoreV1UpdateServiceRequestToJSON,
} from '../models';

export interface BatchOperationRequest {
    tenant: string;
    cluster: string;
    body: TetrateApiTccCoreV1BatchOperationRequest;
}

export interface CreateClusterRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccCoreV1CreateClusterRequest;
}

export interface CreateEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
    body: TetrateApiTccCoreV1CreateEndpointRequest;
}

export interface CreateLoadBalancerRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
    body: TetrateApiTccCoreV1CreateLoadBalancerRequest;
}

export interface CreateNamespaceRequest {
    tenant: string;
    cluster: string;
    name: string;
    body: TetrateApiTccCoreV1CreateNamespaceRequest;
}

export interface CreateServiceRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    hostname: string;
    body: TetrateApiTccCoreV1CreateServiceRequest;
}

export interface DeleteClusterRequest {
    tenant: string;
    name: string;
}

export interface DeleteEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
}

export interface DeleteLoadBalancerRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
}

export interface DeleteNamespaceRequest {
    tenant: string;
    cluster: string;
    name: string;
}

export interface DeleteServiceRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    hostname: string;
}

export interface GetClusterRequest {
    tenant: string;
    name: string;
}

export interface GetEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
}

export interface GetLoadBalancerRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
}

export interface GetNamespaceRequest {
    tenant: string;
    cluster: string;
    name: string;
}

export interface GetServiceRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    hostname: string;
}

export interface ListClustersRequest {
    tenant: string;
}

export interface ListLoadBalancersRequest {
    tenant: string;
    cluster: string;
    namespace: string;
}

export interface ListNamespaceEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
}

export interface ListNamespacesRequest {
    tenant: string;
    cluster: string;
}

export interface ListServiceRequest {
    tenant: string;
    cluster: string;
    namespace: string;
}

export interface ListServiceEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    service: string;
}

export interface UpdateClusterRequest {
    tenant: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateClusterRequest;
}

export interface UpdateEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateEndpointRequest;
}

export interface UpdateLoadBalancerRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateLoadBalancerRequest;
}

export interface UpdateNamespaceRequest {
    tenant: string;
    cluster: string;
    name: string;
    body: TetrateApiTccCoreV1UpdateNamespaceRequest;
}

export interface UpdateServiceRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    hostname: string;
    body: TetrateApiTccCoreV1UpdateServiceRequest;
}

/**
 * no description
 */
export class PhysicalTopologyApi extends runtime.BaseAPI {

    /**
     */
    async batchOperationRaw(requestParameters: BatchOperationRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling batchOperation.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling batchOperation.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling batchOperation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/batch`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1BatchOperationRequestToJSON(requestParameters.body),
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async batchOperation(requestParameters: BatchOperationRequest): Promise<object> {
        const response = await this.batchOperationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createClusterRaw(requestParameters: CreateClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createCluster.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateClusterRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async createCluster(requestParameters: CreateClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.createClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createEndpointRaw(requestParameters: CreateEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/endpoints/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateEndpointRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async createEndpoint(requestParameters: CreateEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.createEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createLoadBalancerRaw(requestParameters: CreateLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createLoadBalancer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/loadbalancers/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateLoadBalancerRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async createLoadBalancer(requestParameters: CreateLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.createLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createNamespaceRaw(requestParameters: CreateNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createNamespace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createNamespace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateNamespaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async createNamespace(requestParameters: CreateNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.createNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createServiceRaw(requestParameters: CreateServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createService.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createService.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createService.');
        }

        if (requestParameters.hostname === null || requestParameters.hostname === undefined) {
            throw new runtime.RequiredError('hostname','Required parameter requestParameters.hostname was null or undefined when calling createService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services/{hostname}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"hostname"}}`, encodeURIComponent(String(requestParameters.hostname))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async createService(requestParameters: CreateServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.createServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteClusterRaw(requestParameters: DeleteClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteCluster.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteCluster(requestParameters: DeleteClusterRequest): Promise<object> {
        const response = await this.deleteClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteEndpointRaw(requestParameters: DeleteEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/endpoints/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteEndpoint(requestParameters: DeleteEndpointRequest): Promise<object> {
        const response = await this.deleteEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteLoadBalancerRaw(requestParameters: DeleteLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteLoadBalancer.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteLoadBalancer.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteLoadBalancer.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/loadbalancers/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteLoadBalancer(requestParameters: DeleteLoadBalancerRequest): Promise<object> {
        const response = await this.deleteLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteNamespaceRaw(requestParameters: DeleteNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteNamespace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteNamespace(requestParameters: DeleteNamespaceRequest): Promise<object> {
        const response = await this.deleteNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteServiceRaw(requestParameters: DeleteServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteService.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteService.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteService.');
        }

        if (requestParameters.hostname === null || requestParameters.hostname === undefined) {
            throw new runtime.RequiredError('hostname','Required parameter requestParameters.hostname was null or undefined when calling deleteService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services/{hostname}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"hostname"}}`, encodeURIComponent(String(requestParameters.hostname))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteService(requestParameters: DeleteServiceRequest): Promise<object> {
        const response = await this.deleteServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getClusterRaw(requestParameters: GetClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getCluster.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async getCluster(requestParameters: GetClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.getClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getEndpointRaw(requestParameters: GetEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/endpoints/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async getEndpoint(requestParameters: GetEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.getEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getLoadBalancerRaw(requestParameters: GetLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getLoadBalancer.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getLoadBalancer.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getLoadBalancer.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/loadbalancers/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async getLoadBalancer(requestParameters: GetLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.getLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getNamespaceRaw(requestParameters: GetNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getNamespace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async getNamespace(requestParameters: GetNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.getNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getServiceRaw(requestParameters: GetServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getService.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getService.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getService.');
        }

        if (requestParameters.hostname === null || requestParameters.hostname === undefined) {
            throw new runtime.RequiredError('hostname','Required parameter requestParameters.hostname was null or undefined when calling getService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services/{hostname}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"hostname"}}`, encodeURIComponent(String(requestParameters.hostname))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async getService(requestParameters: GetServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.getServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listClustersRaw(requestParameters: ListClustersRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listClusters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListClustersResponseFromJSON(jsonValue));
    }

    /**
     */
    async listClusters(requestParameters: ListClustersRequest): Promise<TetrateApiTccCoreV1ListClustersResponse> {
        const response = await this.listClustersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listLoadBalancersRaw(requestParameters: ListLoadBalancersRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listLoadBalancers.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listLoadBalancers.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listLoadBalancers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/loadbalancers`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListLoadBalancersResponseFromJSON(jsonValue));
    }

    /**
     */
    async listLoadBalancers(requestParameters: ListLoadBalancersRequest): Promise<TetrateApiTccCoreV1ListLoadBalancersResponse> {
        const response = await this.listLoadBalancersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listNamespaceEndpointRaw(requestParameters: ListNamespaceEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listNamespaceEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listNamespaceEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listNamespaceEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/endpoints`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListEndpointResponseFromJSON(jsonValue));
    }

    /**
     */
    async listNamespaceEndpoint(requestParameters: ListNamespaceEndpointRequest): Promise<TetrateApiTccCoreV1ListEndpointResponse> {
        const response = await this.listNamespaceEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listNamespacesRaw(requestParameters: ListNamespacesRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listNamespaces.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listNamespaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListNamespacesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listNamespaces(requestParameters: ListNamespacesRequest): Promise<TetrateApiTccCoreV1ListNamespacesResponse> {
        const response = await this.listNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listServiceRaw(requestParameters: ListServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listService.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listService.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async listService(requestParameters: ListServiceRequest): Promise<TetrateApiTccCoreV1ListServiceResponse> {
        const response = await this.listServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listServiceEndpointRaw(requestParameters: ListServiceEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listServiceEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listServiceEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listServiceEndpoint.');
        }

        if (requestParameters.service === null || requestParameters.service === undefined) {
            throw new runtime.RequiredError('service','Required parameter requestParameters.service was null or undefined when calling listServiceEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services/{service}/endpoints`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"service"}}`, encodeURIComponent(String(requestParameters.service))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListEndpointResponseFromJSON(jsonValue));
    }

    /**
     */
    async listServiceEndpoint(requestParameters: ListServiceEndpointRequest): Promise<TetrateApiTccCoreV1ListEndpointResponse> {
        const response = await this.listServiceEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateClusterRaw(requestParameters: UpdateClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateCluster.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateClusterRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async updateCluster(requestParameters: UpdateClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.updateClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateEndpointRaw(requestParameters: UpdateEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/endpoints/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateEndpointRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async updateEndpoint(requestParameters: UpdateEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.updateEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateLoadBalancerRaw(requestParameters: UpdateLoadBalancerRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateLoadBalancer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateLoadBalancer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/loadbalancers/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateLoadBalancerRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1LoadBalancerFromJSON(jsonValue));
    }

    /**
     */
    async updateLoadBalancer(requestParameters: UpdateLoadBalancerRequest): Promise<TetrateApiTccCoreV1LoadBalancer> {
        const response = await this.updateLoadBalancerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateNamespaceRaw(requestParameters: UpdateNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateNamespaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async updateNamespace(requestParameters: UpdateNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.updateNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateServiceRaw(requestParameters: UpdateServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateService.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateService.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateService.');
        }

        if (requestParameters.hostname === null || requestParameters.hostname === undefined) {
            throw new runtime.RequiredError('hostname','Required parameter requestParameters.hostname was null or undefined when calling updateService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/services/{hostname}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"hostname"}}`, encodeURIComponent(String(requestParameters.hostname))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1UpdateServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async updateService(requestParameters: UpdateServiceRequest): Promise<TetrateApiTccCoreV1Service> {
        const response = await this.updateServiceRaw(requestParameters);
        return await response.value();
    }

}
