// tslint:disable
/**
 * configproducer.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccV1CreateServiceRequest,
    TetrateApiTccV1CreateServiceRequestFromJSON,
    TetrateApiTccV1CreateServiceRequestToJSON,
    TetrateApiTccV1ListServiceResponse,
    TetrateApiTccV1ListServiceResponseFromJSON,
    TetrateApiTccV1ListServiceResponseToJSON,
    TetrateApiTccV1Service,
    TetrateApiTccV1ServiceFromJSON,
    TetrateApiTccV1ServiceToJSON,
    TetrateApiTccV1UpdateServiceRequest,
    TetrateApiTccV1UpdateServiceRequestFromJSON,
    TetrateApiTccV1UpdateServiceRequestToJSON,
} from '../models';

export interface CreateServiceRequest {
    tenant: string;
    workspace: string;
    name: string;
    body: TetrateApiTccV1CreateServiceRequest;
}

export interface DeleteServiceRequest {
    tenant: string;
    workspace: string;
    name: string;
}

export interface GetServiceRequest {
    tenant: string;
    workspace: string;
    name: string;
}

export interface ListServiceRequest {
    tenant: string;
    workspace: string;
}

export interface UpdateServiceRequest {
    tenant: string;
    workspace: string;
    name: string;
    body: TetrateApiTccV1UpdateServiceRequest;
}

/**
 * no description
 */
export class ServicesApi extends runtime.BaseAPI {

    /**
     */
    async createServiceRaw(requestParameters: CreateServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Service>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling createService.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling createService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/services/tenant/{tenant}/workspace/{workspace}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1CreateServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async createService(requestParameters: CreateServiceRequest): Promise<TetrateApiTccV1Service> {
        const response = await this.createServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteServiceRaw(requestParameters: DeleteServiceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling deleteService.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/services/tenant/{tenant}/workspace/{workspace}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteService(requestParameters: DeleteServiceRequest): Promise<any> {
        const response = await this.deleteServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getServiceRaw(requestParameters: GetServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Service>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling getService.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/services/tenant/{tenant}/workspace/{workspace}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async getService(requestParameters: GetServiceRequest): Promise<TetrateApiTccV1Service> {
        const response = await this.getServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listServiceRaw(requestParameters: ListServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1ListServiceResponse>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling listService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/services/tenant/{tenant}/workspace/{workspace}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ListServiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async listService(requestParameters: ListServiceRequest): Promise<TetrateApiTccV1ListServiceResponse> {
        const response = await this.listServiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateServiceRaw(requestParameters: UpdateServiceRequest): Promise<runtime.ApiResponse<TetrateApiTccV1Service>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateService.');
        }

        if (requestParameters.workspace === null || requestParameters.workspace === undefined) {
            throw new runtime.RequiredError('workspace','Required parameter requestParameters.workspace was null or undefined when calling updateService.');
        }

        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling updateService.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateService.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/services/tenant/{tenant}/workspace/{workspace}/{name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"workspace"}}`, encodeURIComponent(String(requestParameters.workspace))).replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccV1UpdateServiceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccV1ServiceFromJSON(jsonValue));
    }

    /**
     */
    async updateService(requestParameters: UpdateServiceRequest): Promise<TetrateApiTccV1Service> {
        const response = await this.updateServiceRaw(requestParameters);
        return await response.value();
    }

}
