// tslint:disable
/**
 * TCC Core API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * Contact: info@tetrate.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TetrateApiTccCoreV1Cluster,
    TetrateApiTccCoreV1ClusterFromJSON,
    TetrateApiTccCoreV1ClusterToJSON,
    TetrateApiTccCoreV1CreateClusterRequest,
    TetrateApiTccCoreV1CreateClusterRequestFromJSON,
    TetrateApiTccCoreV1CreateClusterRequestToJSON,
    TetrateApiTccCoreV1CreateDeploymentRequest,
    TetrateApiTccCoreV1CreateDeploymentRequestFromJSON,
    TetrateApiTccCoreV1CreateDeploymentRequestToJSON,
    TetrateApiTccCoreV1CreateEndpointRequest,
    TetrateApiTccCoreV1CreateEndpointRequestFromJSON,
    TetrateApiTccCoreV1CreateEndpointRequestToJSON,
    TetrateApiTccCoreV1CreateNamespaceRequest,
    TetrateApiTccCoreV1CreateNamespaceRequestFromJSON,
    TetrateApiTccCoreV1CreateNamespaceRequestToJSON,
    TetrateApiTccCoreV1Deployment,
    TetrateApiTccCoreV1DeploymentFromJSON,
    TetrateApiTccCoreV1DeploymentToJSON,
    TetrateApiTccCoreV1Endpoint,
    TetrateApiTccCoreV1EndpointFromJSON,
    TetrateApiTccCoreV1EndpointToJSON,
    TetrateApiTccCoreV1ListClustersResponse,
    TetrateApiTccCoreV1ListClustersResponseFromJSON,
    TetrateApiTccCoreV1ListClustersResponseToJSON,
    TetrateApiTccCoreV1ListDeploymentsResponse,
    TetrateApiTccCoreV1ListDeploymentsResponseFromJSON,
    TetrateApiTccCoreV1ListDeploymentsResponseToJSON,
    TetrateApiTccCoreV1ListEndpointsResponse,
    TetrateApiTccCoreV1ListEndpointsResponseFromJSON,
    TetrateApiTccCoreV1ListEndpointsResponseToJSON,
    TetrateApiTccCoreV1ListNamespacesResponse,
    TetrateApiTccCoreV1ListNamespacesResponseFromJSON,
    TetrateApiTccCoreV1ListNamespacesResponseToJSON,
    TetrateApiTccCoreV1Namespace,
    TetrateApiTccCoreV1NamespaceFromJSON,
    TetrateApiTccCoreV1NamespaceToJSON,
} from '../models';

export interface CreateClusterRequest {
    tenant: string;
    body: TetrateApiTccCoreV1CreateClusterRequest;
}

export interface CreateDeploymentRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    body: TetrateApiTccCoreV1CreateDeploymentRequest;
}

export interface CreateEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    deployment: string;
    body: TetrateApiTccCoreV1CreateEndpointRequest;
}

export interface CreateNamespaceRequest {
    tenant: string;
    cluster: string;
    body: TetrateApiTccCoreV1CreateNamespaceRequest;
}

export interface DeleteClusterRequest {
    tenant: string;
    id: string;
    name?: string;
}

export interface DeleteDeploymentRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    id: string;
    name?: string;
}

export interface DeleteEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    deployment: string;
    id: string;
    name?: string;
}

export interface DeleteNamespaceRequest {
    tenant: string;
    cluster: string;
    id: string;
    name?: string;
}

export interface GetClusterRequest {
    tenant: string;
    id: string;
    name?: string;
}

export interface GetDeploymentRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    id: string;
    name?: string;
}

export interface GetEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    deployment: string;
    id: string;
    name?: string;
}

export interface GetNamespaceRequest {
    tenant: string;
    cluster: string;
    id: string;
    name?: string;
}

export interface ListClustersRequest {
    tenant: string;
    parent?: string;
}

export interface ListDeploymentsRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    parent?: string;
}

export interface ListEndpointsRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    deployment: string;
    parent?: string;
}

export interface ListNamespacesRequest {
    tenant: string;
    cluster: string;
    parent?: string;
}

export interface UpdateClusterRequest {
    tenant: string;
    id: string;
    body: TetrateApiTccCoreV1Cluster;
}

export interface UpdateDeploymentRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    id: string;
    body: TetrateApiTccCoreV1Deployment;
}

export interface UpdateEndpointRequest {
    tenant: string;
    cluster: string;
    namespace: string;
    deployment: string;
    id: string;
    body: TetrateApiTccCoreV1Endpoint;
}

export interface UpdateNamespaceRequest {
    tenant: string;
    cluster: string;
    id: string;
    body: TetrateApiTccCoreV1Namespace;
}

/**
 * no description
 */
export class PhysicalResourceModelApi extends runtime.BaseAPI {

    /**
     */
    async createClusterRaw(requestParameters: CreateClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateClusterRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async createCluster(requestParameters: CreateClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.createClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createDeploymentRaw(requestParameters: CreateDeploymentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createDeployment.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateDeploymentRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1DeploymentFromJSON(jsonValue));
    }

    /**
     */
    async createDeployment(requestParameters: CreateDeploymentRequest): Promise<TetrateApiTccCoreV1Deployment> {
        const response = await this.createDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createEndpointRaw(requestParameters: CreateEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.deployment === null || requestParameters.deployment === undefined) {
            throw new runtime.RequiredError('deployment','Required parameter requestParameters.deployment was null or undefined when calling createEndpoint.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"deployment"}}`, encodeURIComponent(String(requestParameters.deployment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateEndpointRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async createEndpoint(requestParameters: CreateEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.createEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createNamespaceRaw(requestParameters: CreateNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling createNamespace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1CreateNamespaceRequestToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async createNamespace(requestParameters: CreateNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.createNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteClusterRaw(requestParameters: DeleteClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteCluster.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteCluster(requestParameters: DeleteClusterRequest): Promise<object> {
        const response = await this.deleteClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteDeploymentRaw(requestParameters: DeleteDeploymentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteDeployment.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteDeployment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteDeployment(requestParameters: DeleteDeploymentRequest): Promise<object> {
        const response = await this.deleteDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteEndpointRaw(requestParameters: DeleteEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.deployment === null || requestParameters.deployment === undefined) {
            throw new runtime.RequiredError('deployment','Required parameter requestParameters.deployment was null or undefined when calling deleteEndpoint.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"deployment"}}`, encodeURIComponent(String(requestParameters.deployment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteEndpoint(requestParameters: DeleteEndpointRequest): Promise<object> {
        const response = await this.deleteEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async deleteNamespaceRaw(requestParameters: DeleteNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling deleteNamespace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response);
    }

    /**
     */
    async deleteNamespace(requestParameters: DeleteNamespaceRequest): Promise<object> {
        const response = await this.deleteNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getClusterRaw(requestParameters: GetClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getCluster.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async getCluster(requestParameters: GetClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.getClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getDeploymentRaw(requestParameters: GetDeploymentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getDeployment.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getDeployment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1DeploymentFromJSON(jsonValue));
    }

    /**
     */
    async getDeployment(requestParameters: GetDeploymentRequest): Promise<TetrateApiTccCoreV1Deployment> {
        const response = await this.getDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getEndpointRaw(requestParameters: GetEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.deployment === null || requestParameters.deployment === undefined) {
            throw new runtime.RequiredError('deployment','Required parameter requestParameters.deployment was null or undefined when calling getEndpoint.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"deployment"}}`, encodeURIComponent(String(requestParameters.deployment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async getEndpoint(requestParameters: GetEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.getEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getNamespaceRaw(requestParameters: GetNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling getNamespace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async getNamespace(requestParameters: GetNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.getNamespaceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listClustersRaw(requestParameters: ListClustersRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listClusters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListClustersResponseFromJSON(jsonValue));
    }

    /**
     */
    async listClusters(requestParameters: ListClustersRequest): Promise<TetrateApiTccCoreV1ListClustersResponse> {
        const response = await this.listClustersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listDeploymentsRaw(requestParameters: ListDeploymentsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listDeployments.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listDeployments.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listDeployments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListDeploymentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listDeployments(requestParameters: ListDeploymentsRequest): Promise<TetrateApiTccCoreV1ListDeploymentsResponse> {
        const response = await this.listDeploymentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listEndpointsRaw(requestParameters: ListEndpointsRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listEndpoints.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listEndpoints.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling listEndpoints.');
        }

        if (requestParameters.deployment === null || requestParameters.deployment === undefined) {
            throw new runtime.RequiredError('deployment','Required parameter requestParameters.deployment was null or undefined when calling listEndpoints.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"deployment"}}`, encodeURIComponent(String(requestParameters.deployment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListEndpointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async listEndpoints(requestParameters: ListEndpointsRequest): Promise<TetrateApiTccCoreV1ListEndpointsResponse> {
        const response = await this.listEndpointsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listNamespacesRaw(requestParameters: ListNamespacesRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling listNamespaces.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling listNamespaces.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parent !== undefined) {
            queryParameters['parent'] = requestParameters.parent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ListNamespacesResponseFromJSON(jsonValue));
    }

    /**
     */
    async listNamespaces(requestParameters: ListNamespacesRequest): Promise<TetrateApiTccCoreV1ListNamespacesResponse> {
        const response = await this.listNamespacesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateClusterRaw(requestParameters: UpdateClusterRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateCluster.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCluster.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateCluster.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1ClusterToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1ClusterFromJSON(jsonValue));
    }

    /**
     */
    async updateCluster(requestParameters: UpdateClusterRequest): Promise<TetrateApiTccCoreV1Cluster> {
        const response = await this.updateClusterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateDeploymentRaw(requestParameters: UpdateDeploymentRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateDeployment.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateDeployment.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateDeployment.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDeployment.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateDeployment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1DeploymentToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1DeploymentFromJSON(jsonValue));
    }

    /**
     */
    async updateDeployment(requestParameters: UpdateDeploymentRequest): Promise<TetrateApiTccCoreV1Deployment> {
        const response = await this.updateDeploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateEndpointRaw(requestParameters: UpdateEndpointRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.deployment === null || requestParameters.deployment === undefined) {
            throw new runtime.RequiredError('deployment','Required parameter requestParameters.deployment was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEndpoint.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateEndpoint.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))).replace(`{${"deployment"}}`, encodeURIComponent(String(requestParameters.deployment))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1EndpointToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1EndpointFromJSON(jsonValue));
    }

    /**
     */
    async updateEndpoint(requestParameters: UpdateEndpointRequest): Promise<TetrateApiTccCoreV1Endpoint> {
        const response = await this.updateEndpointRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateNamespaceRaw(requestParameters: UpdateNamespaceRequest): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.cluster === null || requestParameters.cluster === undefined) {
            throw new runtime.RequiredError('cluster','Required parameter requestParameters.cluster was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNamespace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateNamespace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/tenants/{tenant}/clusters/{cluster}/namespaces/{id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"cluster"}}`, encodeURIComponent(String(requestParameters.cluster))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TetrateApiTccCoreV1NamespaceToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TetrateApiTccCoreV1NamespaceFromJSON(jsonValue));
    }

    /**
     */
    async updateNamespace(requestParameters: UpdateNamespaceRequest): Promise<TetrateApiTccCoreV1Namespace> {
        const response = await this.updateNamespaceRaw(requestParameters);
        return await response.value();
    }

}
