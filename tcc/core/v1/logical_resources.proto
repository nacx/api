// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";

import "routing_info.proto";
import "client_settings.proto";
import "physical_resources.proto";

import "permissions.proto";
import "rbac.proto";

service LogicalResourceModel {
  option (tetrate.api.q.rbac.v1.default_requires) = {
    permissions: READ
  };

  rpc CreateEnvironment(CreateEnvironmentRequest) returns (Environment) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments"
      body: "*"
    };
  };

  rpc GetEnvironment(GetEnvironmentRequest) returns (Environment) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc UpdateEnvironment(Environment) returns (Environment) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{id}"
      body: "*"
    };
  };

  rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments"
    };
  }

  rpc DeleteEnvironment(DeleteEnvironmentRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc GetEnvironmentPolicy(GetEnvironmentRequest) returns (tetrate.api.q.rbac.v1.Policy) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{id}/policy"
    };
  };

  rpc SetEnvironmentPolicy(EnvironmentPolicyRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{id}/policy"
      body: "policy"
    };
  };

  rpc GetAllEnvironmentResources(GetAllEnvironmentResourcesRequest)
      returns (GetAllEnvironmentResourcesResponse) {
    option (tetrate.api.q.rbac.v1.requires) = {
      raw_permissions:
          ["ReadApplication", "ReadService", "ReadCluster", "ReadNamespace", "ReadDeployment"]
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}:getAllResources"
    };
  }

  rpc CreateApplication(CreateApplicationRequest) returns (Application) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications"
      body: "*"
    };
  };

  rpc GetApplication(GetApplicationRequest) returns (Application) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc UpdateApplication(Application) returns (Application) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
      body: "*"
    };
  };

  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications"
    };
  }

  rpc DeleteApplication(DeleteApplicationRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc GetApplicationPolicy(GetApplicationRequest) returns (tetrate.api.q.rbac.v1.Policy) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}/policy"
    };
  };

  rpc SetApplicationPolicy(ApplicationPolicyRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}/policy"
      body: "policy"
    };
  };

  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
      body: "*"
    };
  };

  rpc GetService(GetServiceRequest) returns (Service) {
    // clang-format off
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
    // clang-format on
  };

  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
    };
  };

  rpc UpdateService(Service) returns (Service) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    // clang-format off
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
      body: "*"
    };
    // clang-format on
  };

  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    // clang-format off
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
    // clang-format on
  };

  rpc GetAllLogicalResources(GetAllLogicalResourcesRequest)
      returns (GetAllLogicalResourcesResponse) {
    option (tetrate.api.q.rbac.v1.requires) = {
      raw_permissions: ["ReadApplication", "ReadService"]
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}:getAllLogicalResources"
    };
  };
}

// Environment
//
// Environment is a collection of applications, services, load balancers, and clusters where they
// are deployed.
message Environment {
  // Internal use only. Auto populated field.
  string name = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // A short name for the environment (e.g,, dev, stage, us-1, etc.).
  string id = 3 [(validate.rules).string.min_len = 1];
  // Additional information for readability.
  string description = 4;
  // Resilience settings that apply to all clusters in the environment.
  ClientSettings client_settings = 5;
}

message CreateEnvironmentRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // If present, this will be used as the id for the created object.
  string id = 3;
  // Additional information for readability.
  string description = 4;
  // Resilience settings that apply to all clusters in the environment.
  ClientSettings client_settings = 5;
}

message GetEnvironmentRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message EnvironmentPolicyRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
  tetrate.api.q.rbac.v1.Policy policy = 4 [(validate.rules).message.required = true];
}

message ListEnvironmentsRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message ListEnvironmentsResponse {
  repeated Environment environments = 1;
}

message DeleteEnvironmentRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

// Application
//
// An Application is a collection of services. Each application typically corresponds to one or more
// kubernetes namespace or an application deployment on VMs.
message Application {
  // Internal use only. Auto populated field.
  string name = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // Environment.Id.
  string environment = 3 [(validate.rules).string.min_len = 1];
  // short name for the application.
  string id = 4 [(validate.rules).string.min_len = 1];
  // Additional information.
  string description = 5;
  // Resilience settings that apply to all services within the application, for outbound calls from
  // the application's services to other services in the application or to other applications.
  ClientSettings client_settings = 8;
  reserved 9;
  // List of namespaces where the application services (or components) are scoped within. If
  // omitted, the application is assumed to be scoped in a namespace matching the Id field.
  repeated string namespaces = 10;
  // Indicates whether communication between services in the application should use mutual TLS or
  // not. Defaults to true if not specified. Applications with just the app specific LB should set
  // this value to false.
  google.protobuf.BoolValue use_mtls_between_services = 11;
}

message CreateApplicationRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // Environment.Id.
  string environment = 3 [(validate.rules).string.min_len = 1];
  // short name for the application.
  string id = 4;
  // Additional information.
  string description = 5;
  // Resilience settings that apply to all services within the application, for outbound calls from
  // the application's services to other services.
  ClientSettings client_settings = 8;
  reserved 9;
  // List of namespaces where the application services (or components) are scoped within. If
  // omitted, the application is assumed to be scoped in a namespace matching the Id field.
  repeated string namespaces = 10;
  // Indicates whether communication between services in the application should use mutual TLS or
  // not. Defaults to true if not specified. Applications with just the app specific LB should set
  // this value to false.
  google.protobuf.BoolValue use_mtls_between_services = 11;
}

message GetApplicationRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message ApplicationPolicyRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
  tetrate.api.q.rbac.v1.Policy policy = 5 [(validate.rules).message.required = true];
}

message ListApplicationsRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message DeleteApplicationRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message GetAllLogicalResourcesRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message GetAllLogicalResourcesResponse {
  repeated Application applications = 1;
  repeated Service services = 2;
}

// Includes physical and logical
message GetAllEnvironmentResourcesRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message GetAllEnvironmentResourcesResponse {
  repeated Application applications = 1;
  repeated Service services = 2;
  repeated Cluster clusters = 3;
  repeated Namespace namespaces = 4;
  repeated Deployment deployments = 5;
}

message Service {
  // Internal use only. Auto populated field.
  string name = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // Environment.Id.
  string environment = 3 [(validate.rules).string.min_len = 1];
  // Application.Id.
  string application = 4 [(validate.rules).string.min_len = 1];
  // Short name for the service. Clusters are expected to have namespaces that match the
  // application, and services that match the Id, especially on Kubernetes.
  string id = 5 [(validate.rules).string.min_len = 1];
  string description = 6;
  // FQDN hostname of the service.
  string hostname = 7 [(validate.rules).string.min_len = 1];
  // User identifiable tags associated with this service.
  map<string, string> labels = 8;

  repeated Port ports = 9;

  reserved 10;
  string etag = 11 [(validate.rules).string.min_len = 1];
  // Namespace where the service is scoped and should be one of application namespaces. If the
  // application has only one namespace and if this field is omitted, this filed would default to
  // the application namespace. This field cannot be omitted if the application has more than one
  // namespace.
  string namespace = 12;
  // One or more versions of the service. Each version has a distinct name and a set of labels that
  // help uniquely identify the pods/VMs of that version.
  repeated Subset subsets = 13;
  // Internal/external/load balancer service. External services can be created only in the "system"
  // application.  Load balancer services in the "system" application act as shared load balancers
  // for the entire cluster, while those under user created applications act as a dedicated load
  // balancer for that application. Defaults to internal.
  ServiceType service_type = 14;

  oneof routing {
    // Allowed only if the service is of type load balancer.
    LBRouteSettings lb_settings = 15;
    // Allowed only if the service is of type internal.
    InternalRouteSettings internal_routes = 16;
    // Allowed only if the service is of type external.
    ExternalRouteSettings external_routes = 17;
  }
}

message CreateServiceRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  // Tenant.Id.
  string tenant = 2 [(validate.rules).string.min_len = 1];
  // Environment.Id.
  string environment = 3 [(validate.rules).string.min_len = 1];
  // Application.Id.
  string application = 4 [(validate.rules).string.min_len = 1];
  // If present, this will be used as the id for the created object.
  string id = 5;

  string description = 6;
  // FQDN hostname of the service.
  string hostname = 7 [(validate.rules).string.min_len = 1];
  // User identifiable tags associated with this service.
  map<string, string> labels = 8;

  repeated Port ports = 9;

  reserved 10;
  // Namespace where the service is scoped. It should be one of application namespaces. If the
  // application has only one namespace and if this field is omitted, this filed would default to
  // the application namespace. This field cannot be omitted if the application has more than one
  // namespace.
  string namespace = 11;
  // One or more versions of the service. Each version has a distinct name and a set of labels that
  // help uniquely identify the pods/VMs of that version.
  repeated Subset subsets = 12;

  // Internal/external/load balancer service. External services can be created only in the "system"
  // application.  Load balancer services in the "system" application act as shared load balancers
  // for the entire cluster, while those under user created applications act as a dedicated load
  // balancer for that application. Defaults to internal.
  ServiceType service_type = 13;

  oneof routing {
    // Allowed only if the service is of type load balancer.
    LBRouteSettings lb_settings = 14;
    // Allowed only if the service is of type internal.
    InternalRouteSettings internal_routes = 15;
    // Allowed only if the service is of type external.
    ExternalRouteSettings external_routes = 16;
  }
}

message GetServiceRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message ListServicesRequest {
  // Internal use only. Auto populated field.
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
}

message ListServicesResponse {
  repeated Service services = 1;
}

message DeleteServiceRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}
