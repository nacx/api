syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "routing_info.proto";
import "client_settings.proto";
import "tlssettings.proto";

service LogicalResourceModel {
  rpc CreateEnvironment(CreateEnvironmentRequest) returns (Environment) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments"
      body: "*"
    };
  };

  rpc GetEnvironment(GetEnvironmentRequest) returns (Environment) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc UpdateEnvironment(Environment) returns (Environment) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{id}"
      body: "*"
    };
  };

  rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments"
    };
  }

  rpc DeleteEnvironment(DeleteEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc CreateApplication(CreateApplicationRequest) returns (Application) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications"
      body: "*"
    };
  };

  rpc GetApplication(GetApplicationRequest) returns (Application) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc UpdateApplication(Application) returns (Application) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
      body: "*"
    };
  };

  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications"
    };
  }

  rpc DeleteApplication(DeleteApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
      body: "*"
    };
  };

  rpc GetService(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
  };

  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
    };
  };

  rpc UpdateService(Service) returns (Service) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
      body: "*"
    };
  };

  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
  };

  rpc CreateLoadBalancer(CreateLoadBalancerRequest) returns (LoadBalancer) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers"
      body: "*"
    };
  };

  rpc GetLoadBalancer(GetLoadBalancerRequest) returns (LoadBalancer) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
    };
  };

  rpc ListLoadBalancers(ListLoadBalancersRequest) returns (ListLoadBalancersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers"
    };
  };

  rpc UpdateLoadBalancer(LoadBalancer) returns (LoadBalancer) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
      body: "*"
    };
  };

  rpc DeleteLoadBalancer(DeleteLoadBalancerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
    };
  };
}

message Environment {
  string name = 1;
  string tenant = 2;
  string id = 3;
  string description = 4;
  ClientSettings client_settings = 5;
}

message CreateEnvironmentRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  Environment environment = 4;
}

message GetEnvironmentRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message ListEnvironmentsRequest {
  string parent = 1;
  string tenant = 2;
}

message ListEnvironmentsResponse {
  repeated Environment environments = 1;
}

message DeleteEnvironmentRequest {
  string name = 1;
  string tenant = 2;
  string id = 3;
}

message Application {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
  string description = 5;
  RoutingInfo routing_info = 6;
  ClientSettings client_settings = 7;

  message ApplicationSpecificLB {
    // Labels that uniquely identify the load balancer in the application's namespace.
    map<string, string> labels = 1;
    TLSSettings tls = 2;
  }

  // If defined, the application is assumed to be exposed on the load balancer in
  // the application's own namespace instead of the cluster level load balancer.
  ApplicationSpecificLB app_lb = 8;  
}

message CreateApplicationRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  Application application = 5;
}

message GetApplicationRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}

message ListApplicationsRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message DeleteApplicationRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}

message Service {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string application = 4;
  string id = 5;
  string description = 6;
  string hostname = 7;
  RoutingInfo routing_info = 8;
  string etag = 9;
}

message CreateServiceRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  string application = 5;
  Service service = 6;
}

message GetServiceRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string application = 4;
  string id = 5;
}

message ListServicesRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
  string application = 4;
}

message ListServicesResponse {
  repeated Service services = 1;
}

message DeleteServiceRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string application = 4;
  string id = 5;
}

message LoadBalancer {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
  string description = 5;
  bool enable_workflows = 6;

  // The namespace where the load balancer is/will be deployed in a given cluster.
  string cluster_namespace = 7;

  // Labels that uniquely identify the cluster loadbalancer
  map<string, string> labels = 8;

  // Map of applications attached to this loadbalancer in the form
  // applicationId: TLS credential information
  map<string, TLSSettings> applications = 9;
  string etag = 10;
}

message CreateLoadBalancerRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  LoadBalancer loadbalancer = 5;
}

message GetLoadBalancerRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}

message ListLoadBalancersRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
}

message ListLoadBalancersResponse {
  repeated LoadBalancer loadbalancers = 1;
}

message DeleteLoadBalancerRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}
