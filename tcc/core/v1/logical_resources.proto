syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "routing_info.proto";
import "client_settings.proto";
import "tlssettings.proto";

service LogicalResourceModel {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_tag) = {
     description: "The Logical Resource Model represents collections of identical applications (and thus services) deployed on multiple clusters."
  };

  rpc CreateEnvironment(CreateEnvironmentRequest) returns (Environment) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments"
      body: "*"
    };
  };

  rpc GetEnvironment(GetEnvironmentRequest) returns (Environment) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc UpdateEnvironment(Environment) returns (Environment) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{id}"
      body: "*"
    };
  };

  rpc ListEnvironments(ListEnvironmentsRequest) returns (ListEnvironmentsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments"
    };
  }

  rpc DeleteEnvironment(DeleteEnvironmentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{id}"
    };
  };

  rpc CreateApplication(CreateApplicationRequest) returns (Application) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications"
      body: "*"
    };
  };

  rpc GetApplication(GetApplicationRequest) returns (Application) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc UpdateApplication(Application) returns (Application) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
      body: "*"
    };
  };

  rpc ListApplications(ListApplicationsRequest) returns (ListApplicationsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications"
    };
  }

  rpc DeleteApplication(DeleteApplicationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{id}"
    };
  };

  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
      body: "*"
    };
  };

  rpc GetService(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
  };

  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services"
    };
  };

  rpc UpdateService(Service) returns (Service) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
      body: "*"
    };
  };

  rpc DeleteService(DeleteServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}"
    };
  };

  rpc CreateLoadBalancer(CreateLoadBalancerRequest) returns (LoadBalancer) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers"
      body: "*"
    };
  };

  rpc GetLoadBalancer(GetLoadBalancerRequest) returns (LoadBalancer) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
    };
  };

  rpc ListLoadBalancers(ListLoadBalancersRequest) returns (ListLoadBalancersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers"
    };
  };

  rpc UpdateLoadBalancer(LoadBalancer) returns (LoadBalancer) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
      body: "*"
    };
  };

  rpc DeleteLoadBalancer(DeleteLoadBalancerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/loadbalancers/{id}"
    };
  };
}

message Environment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Environment"
			description: "Environment is a collection of applications, services, load balancers, and clusters where they are deployed."
		}
	};
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1, (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Tenant.Id"}];
  string id = 3 [(validate.rules).string.min_len = 1, (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "A short name for the environment (e.g,, dev, stage, us-1, etc.)"}];
  string description = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Additional information for readability."}];
  ClientSettings client_settings = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Resilience settings that apply to all clusters in the environment."}];
}

message CreateEnvironmentRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string id = 2   [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "if present, this will be used as the id for the created object."}];
  string tenant = 3 [(validate.rules).string.min_len = 1];
  Environment environment = 4 [(validate.rules).message.required = true];
}

message GetEnvironmentRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message ListEnvironmentsRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
}

message ListEnvironmentsResponse {
  repeated Environment environments = 1;
}

message DeleteEnvironmentRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string.min_len = 1];
}

message Application {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
		json_schema: {
			title: "Application"
			description: "An Application is a collection of services. Each application corresponds to a kubernetes namespace or an application deployment on VMs. The hostname of the application is exposed via the load balancer (either shared or dedicated)."
		}
	};
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1, (grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Tenant.Id"}];
  string environment = 3 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Environment.Id"}];
  string id = 4 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "short name for the application. Clusters are expected to have namespaces that match the application Id, especially on Kubernetes."}];
  string description = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Additional information."}];
  string hostname = 6 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Hostname with which the application is exposed on a Gateway"}];;
  RoutingInfo routing_info = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "HTTP Routing settings for the applications. Note that subsets should not be defined at application level."}];
  ClientSettings client_settings = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Resilience settings that apply to all services within the application, for outbound calls from the application's services to other services."}];

  message ApplicationSpecificLB {
    map<string, string> labels = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Load balancer deployment labels (Kubernetes only for now). If gateway was created using TCC helm charts, use tcc: appgateway for kubernetes. The gateway will expose the application on ports 80 and 443 (if tls is configured)."}];
    TLSSettings tls = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "TLS certificate info for the application. If nil, the gateway will expose the application on port 80 only. Internal use only. Auto populated"}];
  }

  ApplicationSpecificLB app_lb = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "An application can be exposed on a shared gateway in the cluster or a dedicated gateway in the app's namespace. Set app_lb to indicate that the application should be exposed on the dedicated load balancer deployed in the app namespace. It is assumed that the gateway service is deployed in the app's namespace."}];
}

message CreateApplicationRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string id = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "short name for the application. Clusters are expected to have namespaces that match the application Id, especially on Kubernetes."}];
  string tenant = 3 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Tenant.Id"}];
  string environment = 4 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Environment.Id"}];
  Application application = 5 [(validate.rules).message.required = true];
}

message GetApplicationRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message ListApplicationsRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message ListApplicationsResponse {
  repeated Application applications = 1;
}

message DeleteApplicationRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message Service {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Tenant.Id"}];
  string environment = 3 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Environment.Id"}];
  string application = 4 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Application.Id"}];
  string id = 5 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "short name for the service. Clusters are expected to have namespaces that match the application, and services that match the Id, especially on Kubernetes."}];
  string description = 6;
  string hostname = 7 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "FQDN hostname of the service."}];
  map<string, string> labels = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "User identifiable tags associated with this service."}];

  repeated Port ports = 9 [(validate.rules).repeated.min_items = 1];
  RoutingInfo routing_info = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "HTTP Routing settings for the service. Note that subsets (versions of the service) if any should be defined here."}];
  string etag = 11 [(validate.rules).string.min_len = 1];
}

message CreateServiceRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string id = 2;
  string tenant = 3 [(validate.rules).string.min_len = 1];
  string environment = 4 [(validate.rules).string.min_len = 1];
  string application = 5 [(validate.rules).string.min_len = 1];
  Service service = 6 [(validate.rules).message.required = true];
}

message GetServiceRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message ListServicesRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
}

message ListServicesResponse {
  repeated Service services = 1;
}

message DeleteServiceRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string application = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

enum LoadBalancerClass {
  NONE = 0;
  ENVOY = 1;
  F5 = 2;
}

message LoadBalancer {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
  string description = 5;
  bool enable_workflows = 6;

  LoadBalancerClass load_balancer_class = 7 [(validate.rules).enum.defined_only = true];
  Registry registry = 8 [(validate.rules).enum.defined_only = true];
  
  string cluster_namespace = 9 [(validate.rules).string.min_len = 1,(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "The namespace where the load balancer is/will be deployed in a given cluster."}];

  map<string, string> labels = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "  Labels that uniquely identify the cluster loadbalancer. If cluster level gateway was deployed using TCC helm charts, set this field to tcc: clustergateway"}];

  map<string, TLSSettings> applications = 11 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Map of applications attached to this loadbalancer in the form applicationId: TLS credential information"}];
  
  ClientSettings client_settings = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Client settings are applicable for traffic from the load balancer's cluster namespace to the application's namespaces."}];
  string etag = 13 [(validate.rules).string.min_len = 1];
}

message CreateLoadBalancerRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string id = 2;
  string tenant = 3 [(validate.rules).string.min_len = 1];
  string environment = 4 [(validate.rules).string.min_len = 1];
  LoadBalancer loadbalancer = 5 [(validate.rules).message.required = true];
}

message GetLoadBalancerRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message ListLoadBalancersRequest {
  string parent = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message ListLoadBalancersResponse {
  repeated LoadBalancer loadbalancers = 1;
}

message DeleteLoadBalancerRequest {
  string name = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {description: "Internal use only. Auto populated field."}];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}
