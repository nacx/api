// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tcc/core/v1/service_definition_crd.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _service_definition_crd_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ServiceDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ServiceDefinition) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Hostname

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceDefinitionValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	// no validation rules for SidecarsPresent

	{
		tmp := m.GetSidecarSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinitionValidationError{
					field:  "SidecarSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetExternalServiceTlsSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinitionValidationError{
					field:  "ExternalServiceTlsSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetEndpointSource()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinitionValidationError{
					field:  "EndpointSource",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ServiceDefinitionValidationError is the validation error returned by
// ServiceDefinition.Validate if the designated constraints aren't met.
type ServiceDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinitionValidationError) ErrorName() string {
	return "ServiceDefinitionValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinitionValidationError{}

// Validate checks the field values on SidecarSettings with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SidecarSettings) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetUsingIptablesCapture()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SidecarSettingsValidationError{
					field:  "UsingIptablesCapture",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	// no validation rules for EgressHttpProxyPort

	return nil
}

// SidecarSettingsValidationError is the validation error returned by
// SidecarSettings.Validate if the designated constraints aren't met.
type SidecarSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SidecarSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SidecarSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SidecarSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SidecarSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SidecarSettingsValidationError) ErrorName() string { return "SidecarSettingsValidationError" }

// Error satisfies the builtin error interface
func (e SidecarSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSidecarSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SidecarSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SidecarSettingsValidationError{}

// Validate checks the field values on StaticEndpoint with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StaticEndpoint) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	// no validation rules for Ports

	// no validation rules for Labels

	// no validation rules for Locality

	// no validation rules for Weight

	return nil
}

// StaticEndpointValidationError is the validation error returned by
// StaticEndpoint.Validate if the designated constraints aren't met.
type StaticEndpointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaticEndpointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaticEndpointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaticEndpointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaticEndpointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaticEndpointValidationError) ErrorName() string { return "StaticEndpointValidationError" }

// Error satisfies the builtin error interface
func (e StaticEndpointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaticEndpoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaticEndpointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaticEndpointValidationError{}

// Validate checks the field values on ServiceDefinition_ManualSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_ManualSource) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return ServiceDefinition_ManualSourceValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// ServiceDefinition_ManualSourceValidationError is the validation error
// returned by ServiceDefinition_ManualSource.Validate if the designated
// constraints aren't met.
type ServiceDefinition_ManualSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_ManualSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_ManualSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_ManualSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_ManualSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_ManualSourceValidationError) ErrorName() string {
	return "ServiceDefinition_ManualSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_ManualSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_ManualSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_ManualSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_ManualSourceValidationError{}

// Validate checks the field values on ServiceDefinition_AWSSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_AWSSource) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ServiceDefinition_AWSSourceValidationError is the validation error returned
// by ServiceDefinition_AWSSource.Validate if the designated constraints
// aren't met.
type ServiceDefinition_AWSSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_AWSSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_AWSSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_AWSSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_AWSSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_AWSSourceValidationError) ErrorName() string {
	return "ServiceDefinition_AWSSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_AWSSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_AWSSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_AWSSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_AWSSourceValidationError{}

// Validate checks the field values on ServiceDefinition_GCPSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_GCPSource) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ServiceDefinition_GCPSourceValidationError is the validation error returned
// by ServiceDefinition_GCPSource.Validate if the designated constraints
// aren't met.
type ServiceDefinition_GCPSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_GCPSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_GCPSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_GCPSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_GCPSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_GCPSourceValidationError) ErrorName() string {
	return "ServiceDefinition_GCPSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_GCPSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_GCPSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_GCPSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_GCPSourceValidationError{}

// Validate checks the field values on ServiceDefinition_AzureSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_AzureSource) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ServiceDefinition_AzureSourceValidationError is the validation error
// returned by ServiceDefinition_AzureSource.Validate if the designated
// constraints aren't met.
type ServiceDefinition_AzureSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_AzureSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_AzureSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_AzureSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_AzureSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_AzureSourceValidationError) ErrorName() string {
	return "ServiceDefinition_AzureSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_AzureSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_AzureSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_AzureSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_AzureSourceValidationError{}

// Validate checks the field values on ServiceDefinition_VMwareSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_VMwareSource) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Context

	// no validation rules for GuestNetwork

	return nil
}

// ServiceDefinition_VMwareSourceValidationError is the validation error
// returned by ServiceDefinition_VMwareSource.Validate if the designated
// constraints aren't met.
type ServiceDefinition_VMwareSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_VMwareSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_VMwareSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_VMwareSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_VMwareSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_VMwareSourceValidationError) ErrorName() string {
	return "ServiceDefinition_VMwareSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_VMwareSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_VMwareSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_VMwareSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_VMwareSourceValidationError{}

// Validate checks the field values on ServiceDefinition_RESTSource with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ServiceDefinition_RESTSource) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ServiceDefinition_RESTSourceValidationError is the validation error returned
// by ServiceDefinition_RESTSource.Validate if the designated constraints
// aren't met.
type ServiceDefinition_RESTSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_RESTSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_RESTSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_RESTSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_RESTSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_RESTSourceValidationError) ErrorName() string {
	return "ServiceDefinition_RESTSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_RESTSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_RESTSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_RESTSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_RESTSourceValidationError{}

// Validate checks the field values on ServiceDefinition_EndpointSource with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ServiceDefinition_EndpointSource) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetManual()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Manual",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAws()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Aws",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetGcp()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Gcp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetAzure()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Azure",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetVmware()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Vmware",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetOther()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return ServiceDefinition_EndpointSourceValidationError{
					field:  "Other",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// ServiceDefinition_EndpointSourceValidationError is the validation error
// returned by ServiceDefinition_EndpointSource.Validate if the designated
// constraints aren't met.
type ServiceDefinition_EndpointSourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceDefinition_EndpointSourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceDefinition_EndpointSourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceDefinition_EndpointSourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceDefinition_EndpointSourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceDefinition_EndpointSourceValidationError) ErrorName() string {
	return "ServiceDefinition_EndpointSourceValidationError"
}

// Error satisfies the builtin error interface
func (e ServiceDefinition_EndpointSourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceDefinition_EndpointSource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceDefinition_EndpointSourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceDefinition_EndpointSourceValidationError{}
