{
  "swagger": "2.0",
  "info": {
    "title": "TCC Configuration API",
    "version": "v1",
    "contact": {
      "name": "Tetrate.io, Inc.",
      "url": "https://www.tetrate.io",
      "email": "info@tetrate.io"
    }
  },
  "host": "TCCHOST",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/tenants": {
      "get": {
        "operationId": "ListTenants",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListTenantsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "operationId": "CreateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Tenant"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateTenantRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{id}": {
      "get": {
        "operationId": "GetTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Tenant"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "operationId": "DeleteTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "operationId": "UpdateTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Tenant"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Tenant"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{id}/policy": {
      "get": {
        "operationId": "GetTenantPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "operationId": "SetTenantPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{id}/sync": {
      "post": {
        "operationId": "SyncTenant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments": {
      "get": {
        "operationId": "ListEnvironments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListEnvironmentsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Environment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateEnvironmentRequest"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications": {
      "get": {
        "operationId": "ListApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListApplicationsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "description": "Environment.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateApplicationRequest"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services": {
      "get": {
        "operationId": "ListServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListServicesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "description": "Environment.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "description": "Application.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateServiceRequest"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}": {
      "get": {
        "operationId": "GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "description": "Environment.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "description": "Application.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Short name for the service. Clusters are expected to have namespaces that match the application, and services that match the Id, especially on Kubernetes.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}/policy": {
      "get": {
        "operationId": "GetServicePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "SetServicePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{application}/services/{id}:authz": {
      "get": {
        "operationId": "GetServiceAuthzPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "SetServiceAuthzPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{id}": {
      "get": {
        "operationId": "GetApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "description": "Environment.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "short name for the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{id}/policy": {
      "get": {
        "operationId": "GetApplicationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "SetApplicationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/applications/{id}:authz": {
      "get": {
        "operationId": "GetApplicationAuthzPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "SetApplicationAuthzPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters": {
      "get": {
        "operationId": "ListClusters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListClustersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateClusterRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces": {
      "get": {
        "operationId": "ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListNamespacesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateNamespaceRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}": {
      "get": {
        "operationId": "GetNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateNamespace",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments": {
      "get": {
        "operationId": "ListDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListDeploymentsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateDeploymentRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints": {
      "get": {
        "operationId": "ListEndpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListEndpointsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "post": {
        "operationId": "CreateEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateEndpointRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}": {
      "get": {
        "operationId": "GetEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateEndpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}": {
      "get": {
        "operationId": "GetDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/registryconsumer/{registrytype}": {
      "post": {
        "operationId": "UpdateResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.RegistryConsumerResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant where this service is residing e.g Tetrate.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "description": "environment are higher-level isolations e.g. prod, staging, development, etc.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "cluster",
            "description": "Unique cluster acting as a source.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registrytype",
            "description": "registrytype indicates source of entry. Currently accepted values \"kubernetes\", \"f5\".",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.RegistryUpdateResourcesRequest"
            }
          }
        ],
        "tags": [
          "RegistryConsumer"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}": {
      "get": {
        "operationId": "GetCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}/bulkloadcluster": {
      "post": {
        "operationId": "BulkLoadCluster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.BulkLoadClusterRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}:generateTokens": {
      "post": {
        "operationId": "GenerateClusterTokens",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.AgentTokens"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.GenerateClusterTokensRequest"
            }
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}:getAllLogicalResources": {
      "get": {
        "operationId": "GetAllLogicalResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.GetAllLogicalResourcesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}:getAllPhysicalResources": {
      "get": {
        "operationId": "GetAllPhysicalResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.GetAllPhysicalResourcesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PhysicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{environment}:getAllResources": {
      "get": {
        "operationId": "GetAllEnvironmentResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.GetAllEnvironmentResourcesResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "environment",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{id}": {
      "get": {
        "operationId": "GetEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Environment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "delete": {
        "operationId": "DeleteEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "UpdateEnvironment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Environment"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "A short name for the environment (e.g,, dev, stage, us-1, etc.).",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Environment"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/environments/{id}/policy": {
      "get": {
        "operationId": "GetEnvironmentPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      },
      "put": {
        "operationId": "SetEnvironmentPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.q.rbac.v1.Policy"
            }
          }
        ],
        "tags": [
          "LogicalResourceModel"
        ]
      }
    },
    "/v1/tenants/{tenant}/teams": {
      "get": {
        "operationId": "ListTeams",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListTeamsResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "operationId": "CreateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Team"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateTeamRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{tenant}/teams/{id}": {
      "get": {
        "operationId": "GetTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Team"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "operationId": "DeleteTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "operationId": "UpdateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Team"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Team"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{tenant}/users": {
      "get": {
        "operationId": "ListUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.ListUsersResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "post": {
        "operationId": "CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.User"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "description": "Tenant.Id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.CreateUserRequest"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/tenants/{tenant}/users/{id}": {
      "get": {
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.User"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "delete": {
        "operationId": "DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Internal use only. Auto populated field.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Organization"
        ]
      },
      "put": {
        "operationId": "UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.User"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "tenant",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.User"
            }
          }
        ],
        "tags": [
          "Organization"
        ]
      }
    },
    "/v1/version": {
      "get": {
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/tetrate.api.tcc.core.v1.Version"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "tags": [
          "Info"
        ]
      }
    }
  },
  "definitions": {
    "tetrate.api.authz.v1.Binding": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "A friendly name to identify the binding."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the purpose of the binding."
        },
        "allowHttp": {
          "$ref": "#/definitions/tetrate.api.authz.v1.Binding.HTTP_Rules",
          "description": "HTTP rules to be enforced by this binding in order to grant access to the target resource."
        },
        "from": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.authz.v1.Subject"
          },
          "description": "Subjects configure the actors (end users, other services)  that are allowed to access the target resource."
        }
      },
      "description": "Bindings define the subjects that can access the resource a policy is attached to, and the conditions that need to be met for that access to be granted. A policy can have multiple bindings to configure different access controls for specific subjects.",
      "title": "Binding"
    },
    "tetrate.api.authz.v1.Binding.HTTP_Rules": {
      "type": "object",
      "properties": {
        "to": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.authz.v1.Binding.HTTP_Rules.Http"
          },
          "description": "A set of HTTP rules that need to be satisfied by the HTTP requests to get access to the target resource."
        }
      }
    },
    "tetrate.api.authz.v1.Binding.HTTP_Rules.Http": {
      "type": "object",
      "properties": {
        "hosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "When applying policies to applications, the hosts field can be used to restrict the hosts each rule applies to. Applications can be exposed on multiple hostnames in the corresponding load balancers, and rules may only target some of them. E.g. [\"bookinfo.com\"]."
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The request path where the request is made against. E.g. [\"/accounts\"]."
        },
        "methods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The HTTP methods that are allowed by this rule. E.g. [\"GET\", \"HEAD\"]."
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A set of request headers that are required in this rule. Note that this set of headers is different than the headers that can be configured in the subject, as these headers will only apply to the configured paths and other fields in this HTTP rule. E.g. \"X-App-Id\": \"bookinfo\"."
        },
        "ports": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The ports in the target service this rule will apply for. E.g. [\"80\", \"443\"]."
        }
      },
      "description": "HTTP rules configure specific matching conditions on the HTTP requests made to the target resource. Access to the resource will only be allowed if all the conditions expressed in all the HTTP rules are met.  All fields are optional, and only the relevant ones have to be configured.",
      "title": "HTTP Rule"
    },
    "tetrate.api.authz.v1.Policy": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.authz.v1.Binding"
          },
          "description": "List of bindings that configure access to the target resource."
        },
        "etag": {
          "type": "string",
          "description": "Etag to guard concurrent modifications to the policy."
        }
      },
      "description": "Runtime authorization policies are attached to specific resources and define which subjects, and under which conditions, are allowed to access them. Different subjects can be configured to access the target resource with different conditions by setting multiple bindings in the same policy.  The default authorization policy allows access between services within an application, and denies cross-application traffic. Traffic between applications must be explicitly enabled by applying the corresponding access policy in the target application.  THe following examples show some common policies:      # Default deny policy for applications. The absence of bindings means that there is no     # access allowed from outside the application.     policy:      # Allow access from the 'bookinfo' application. Requests from the client application     # present a JWT token for the 'bookinfo' application.     policy:       bindings:       - from:         - jwt:             principal: bookinfo             audience: tsb             claims:               group: applications      # Allow access from the 'bookinfo' application, but only to the '/v1/*'     # HTTP paths, and only for GET and HEAD requests, on the 'bookinfo.com' host.     policy:       bindings:       - from:         - jwt:             principal: bookinfo             audience: tsb             claims:               group: applications         allow_http:           to:           - paths:             - /v1/*             hosts:             - bookinfo.com             methods:             - GET             - HEAD      # Allow access from the 'bookinfo' application, but only to the '/v1/*'     # HTTP paths, and only for GET and HEAD requests, on the 'bookinfo.com' host.     # In this example the client application is identified by checking the value of     # the 'X-App-Id' request header.     policy:       bindings:       - from:         - request_headers:             X-App-Id: bookinfo         allow_http:           to:           - paths:             - /v1/*             hosts:             - bookinfo.com             methods:             - GET             - HEAD      # When applied to a service, allows traffic only from the configured identities.     policy:       bindings:       - from:         - cluster_local_service_account: default/bookinfo-sa         - subject_alt_name: spiffe://cluster.local/ns/default/sa/bookinfo-sa",
      "title": "Runtime Authorization Policy"
    },
    "tetrate.api.authz.v1.Subject": {
      "type": "object",
      "properties": {
        "jwt": {
          "$ref": "#/definitions/tetrate.api.authz.v1.Subject.JWT",
          "description": "JWT configuration to identity the subject."
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Request headers used to qualify a subject. E.g. \"User-Agent\": \"Mozilla/*\"."
        },
        "clusterLocalServiceAccount": {
          "type": "string",
          "description": "A cluster service account in 'namespace/service-account-name' format."
        },
        "subjectAltName": {
          "type": "string",
          "description": "A SPIFFe URL or any Subject Alternative Name (SAN). In future, we can add other x509 fields here."
        }
      },
      "description": "A subject designates an actor (user, service, etc) that attempts to access a target resource. Subjects can be modeled with JWT tokens, service accounts, and decorated with attributes such as HTTP request headers, JWT token claims, etc. The fields that define a subject will be matched to incoming requests, to fully qualify where the request comes from, and to decide if the given request is allowed or not for the target resource. All the fields in a subject are evaluated as AND expressions.",
      "title": "Subject"
    },
    "tetrate.api.authz.v1.Subject.JWT": {
      "type": "object",
      "properties": {
        "principal": {
          "type": "string",
          "description": "The principal qualifies the authority under which the request is made. In Istio environments this is the value of the Issuer claim (iss) concatenated with the value of teh Subject (sub) claim, separated with a '/'."
        },
        "audience": {
          "type": "string",
          "description": "Audience intended for the token. This is the value of the 'aud' claim."
        },
        "presenter": {
          "type": "string",
          "description": "The authorized presenter of the token. This takes the value of the 'azp' claim."
        },
        "claims": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "A set of arbitrary claims that are required to qualify the subject. E.g. \"iss\": \"*@foo.com\"."
        },
        "validation": {
          "$ref": "#/definitions/tetrate.api.authz.v1.Subject.JWT.Validation",
          "description": "Configuration to validate the JWT tokens for this subject."
        }
      },
      "description": "JWT based subjects qualify a subject by matching against a JWT token present in the request. By default the token is expected to be present in the 'Authorization' HTTP header, with the 'Bearer\" prefix.",
      "title": "JWT based subject"
    },
    "tetrate.api.authz.v1.Subject.JWT.Validation": {
      "type": "object",
      "properties": {
        "issuer": {
          "type": "string",
          "description": "The issuer that is expected for this JWT subject."
        },
        "audiences": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Optional audiences to validate the JWT token against."
        },
        "jwksUri": {
          "type": "string",
          "description": "The URI of a JWKS file that can be used to validate the JWT token."
        },
        "jwks": {
          "type": "string",
          "description": "The literal JWKS to be used to validate teh token. The format of this string is described in https://tools.ietf.org/html/rfc7517."
        }
      }
    },
    "tetrate.api.q.rbac.v1.Binding": {
      "type": "object",
      "properties": {
        "role": {
          "type": "string",
          "description": "The role that defines the permissions that will be granted to the target resource."
        },
        "subjects": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of subjects that will be allowed to access the target resource with the permissions defined by the role."
        }
      },
      "description": "A binding associates a role with a set of subjects.  Bindings are used to configure policies, where different roles can be assigned to different sets of subjects to configure a fine-grained access control to the resource protected by the policy.",
      "title": "Binding"
    },
    "tetrate.api.q.rbac.v1.Policy": {
      "type": "object",
      "properties": {
        "bindings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.q.rbac.v1.Binding"
          },
          "description": "The list of bindings configures the different access profiles that are allowed on the resource configured by the policy."
        }
      },
      "description": "A policy defines the set of subjects that can access a resource and under which conditions that access is granted.",
      "title": "Policy"
    },
    "tetrate.api.tcc.core.v1.AgentTokens": {
      "type": "object",
      "properties": {
        "tokens": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.Application": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "environment": {
          "type": "string",
          "description": "Environment.Id."
        },
        "id": {
          "type": "string",
          "description": "short name for the application."
        },
        "description": {
          "type": "string",
          "description": "Additional information."
        },
        "clientSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ClientSettings",
          "description": "Resilience settings that apply to all services within the application, for outbound calls from the application's services to other services in the application or to other applications."
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of namespaces where the application services (or components) are scoped within. If omitted, the application is assumed to be scoped in a namespace matching the Id field."
        },
        "forceMtlsBetweenServices": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether communication between services in the application should use ONLY mutual TLS or not. Defaults to false if not specified. Applications that have services without sidecars should set this value to false."
        },
        "alertSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Settings",
          "description": "Alert settings for certain metrics of this application. E.g. SLA rule."
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "An Application is a collection of services. Each application typically corresponds to one or more kubernetes namespace or an application deployment on VMs.",
      "title": "Application"
    },
    "tetrate.api.tcc.core.v1.BasicAuthSettings": {
      "type": "object",
      "properties": {
        "realm": {
          "type": "string",
          "description": "Realm value for WWW-Authenticate header. If empty, will be set to LoadBalancer's hostname."
        },
        "charset": {
          "type": "string",
          "description": "Charset value for WWW-Authenticate header. If empty, will be set to \"UTF-8\"."
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.BasicAuthSettings.User"
          },
          "description": "List of basic auth users."
        }
      }
    },
    "tetrate.api.tcc.core.v1.BasicAuthSettings.User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.BulkLoadClusterRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.BulkLoadClusterRequest.ClusterWithNamespaces"
          }
        },
        "clusterWithNamespaces": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.BulkLoadClusterRequest.ClusterWithNamespaces"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "description": "Cluster, Namespaces, deployments, and endpoints in this request will replace the existing contents of a cluster."
    },
    "tetrate.api.tcc.core.v1.BulkLoadClusterRequest.ClusterWithNamespaces": {
      "type": "object",
      "properties": {
        "cluster": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.BulkLoadClusterRequest.NamespaceWithDeployments"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.BulkLoadClusterRequest.DeploymentWithEndpoints": {
      "type": "object",
      "properties": {
        "deployment": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.BulkLoadClusterRequest.NamespaceWithDeployments": {
      "type": "object",
      "properties": {
        "namespace": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
        },
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.BulkLoadClusterRequest.DeploymentWithEndpoints"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ClientSettings": {
      "type": "object",
      "properties": {
        "httpRequestTimeout": {
          "type": "string",
          "description": "Timeout for HTTP requests. Disabled if not set."
        },
        "httpRetries": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HTTPRetry",
          "description": "Retry policy for HTTP requests. Disabled if not set."
        },
        "tcpConnectTimeout": {
          "type": "string",
          "description": "TCP connection timeout. Disabled if not set."
        },
        "tcpKeepalive": {
          "type": "boolean",
          "format": "boolean",
          "description": "If enabled, sets SO_KEEPALIVE on the socket to enable TCP Keepalives."
        },
        "circuitBreakerSensitivity": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ClientSettings.Sensitivity",
          "description": "Circuit breakers in Envoy are applied per endpoint in a load balancing pool. By default, circuit breakers are disabled. If set, the sensitivity level determines the maximum number of consecutive failures that Envoy will tolerate before ejecting an endpoint from the load balancing pool."
        }
      },
      "description": "ClientSettings control the reliability knobs in Envoy when making outbound connections from a gateway or sidecar.",
      "title": "ClientSettings"
    },
    "tetrate.api.tcc.core.v1.ClientSettings.Sensitivity": {
      "type": "string",
      "enum": [
        "UNSET",
        "LOW",
        "MEDIUM",
        "HIGH"
      ],
      "default": "UNSET",
      "description": "Available sensitivity levels for the circuit breaker.   - LOW: Tolerate upto 20 consecutive 5xx or connection failures from an endpoint before ejecting it temporarily from the load balancing pool.  - MEDIUM: Tolerate upto 10 consecutive 5xx or connection failures from an endpoint before ejecting it temporarily from the load balancing pool.  - HIGH: Tolerate upto 5 consecutive 5xx or connection failures from an endpoint before ejecting it temporarily from the load balancing pool."
    },
    "tetrate.api.tcc.core.v1.Cluster": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "registry": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Registry"
        },
        "country": {
          "type": "string",
          "description": "Information like datacenter where the cluster is present."
        },
        "datacenter": {
          "type": "string"
        },
        "availabilityZone": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string"
        },
        "kubernetesClusterDomain": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.CorsPolicy": {
      "type": "object",
      "properties": {
        "allowOrigin": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of origins that are allowed to perform CORS requests. The content will be serialized into the Access-Control-Allow-Origin header. Wildcard * will allow all origins."
        },
        "allowMethods": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of HTTP methods allowed to access the resource. The content will be serialized into the Access-Control-Allow-Methods header."
        },
        "allowHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers header."
        },
        "exposeHeaders": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A white list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers header."
        },
        "maxAge": {
          "type": "string",
          "description": "Specifies how long the results of a preflight request can be cached. Translates to the Access-Control-Max-Age header."
        },
        "allowCredentials": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials. Translates to Access-Control-Allow-Credentials header."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateApplicationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "environment": {
          "type": "string",
          "description": "Environment.Id."
        },
        "id": {
          "type": "string",
          "description": "short name for the application."
        },
        "description": {
          "type": "string",
          "description": "Additional information."
        },
        "clientSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ClientSettings",
          "description": "Resilience settings that apply to all services within the application, for outbound calls from the application's services to other services."
        },
        "namespaces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of namespaces where the application services (or components) are scoped within. If omitted, the application is assumed to be scoped in a namespace matching the Id field."
        },
        "forceMtlsBetweenServices": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicates whether communication between services in the application should use ONLY mutual TLS or not. Defaults to false if not specified. Applications that have services without sidecars should set this value to false."
        },
        "alertSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Settings",
          "description": "Alert settings for certain metrics of this application. E.g. SLA rule."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateClusterRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "if present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string"
        },
        "registry": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Registry"
        },
        "country": {
          "type": "string",
          "description": "Information like datacenter where the cluster is present."
        },
        "datacenter": {
          "type": "string"
        },
        "availabilityZone": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "kubernetesClusterDomain": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateDeploymentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "title": "if present, this will be used as the id for the created object"
        },
        "hostname": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Port"
          }
        },
        "kubernetesServiceIp": {
          "type": "string"
        },
        "kubernetesExternalAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For kubernetes services of type load balancer, this field contains the list of lb hostnames or IPs assigned to the service. For services of type nodePort, this field contains the IP addresses of the nodes in the cluster."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateEndpointRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "if present, this will be used as the id for the created object."
        },
        "address": {
          "type": "string",
          "description": "Address associated with the network endpoint without the port. Domain names can be used and must be fully-qualified without wildcards."
        },
        "ports": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Set of inbound traffic ports associated with the endpoint. The ports must be associated with a port name that was declared as part of the deployment."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "One or more labels associated with the endpoint."
        },
        "locality": {
          "type": "string",
          "description": "The locality associated with the endpoint, in the form country/region/zone. A locality corresponds to a failure domain (country/region/zone)."
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "description": "The load balancing weight associated with the endpoint. Endpoints with higher weights in a pool will receive proportionally higher traffic."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateEnvironmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "If present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string",
          "description": "Additional information for readability."
        },
        "clientSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ClientSettings",
          "description": "Resilience settings that apply to all clusters in the environment."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateNamespaceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "if present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateServiceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "environment": {
          "type": "string",
          "description": "Environment.Id."
        },
        "application": {
          "type": "string",
          "description": "Application.Id."
        },
        "id": {
          "type": "string",
          "description": "If present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string"
        },
        "hostname": {
          "type": "string",
          "description": "FQDN hostname of the service."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User identifiable tags associated with this service."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Port"
          }
        },
        "namespace": {
          "type": "string",
          "description": "Namespace where the service is scoped. It should be one of application namespaces. If the application has only one namespace and if this field is omitted, this filed would default to the application namespace. This field cannot be omitted if the application has more than one namespace."
        },
        "subsets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Subset"
          },
          "description": "One or more versions of the service. Each version has a distinct name and a set of labels that help uniquely identify the pods/VMs of that version."
        },
        "serviceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ServiceType",
          "description": "Internal/external/load balancer service. External services can be created only in the \"system\" application.  Load balancer services in the \"system\" application act as shared load balancers for the entire cluster, while those under user created applications act as a dedicated load balancer for that application. Defaults to internal."
        },
        "lbSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.LBRouteSettings",
          "description": "Allowed only if the service is of type load balancer."
        },
        "internalRoutes": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.InternalRouteSettings",
          "description": "Allowed only if the service is of type internal."
        },
        "externalRoutes": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ExternalRouteSettings",
          "description": "Allowed only if the service is of type external."
        },
        "alertSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Settings",
          "description": "Alert settings for certain metrics of this service. E.g. SLA rule."
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateTeamRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "id": {
          "type": "string",
          "description": "If present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sourceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SourceType"
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateTenantRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.CreateUserRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "id": {
          "type": "string",
          "description": "If present, this will be used as the id for the created object."
        },
        "description": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SourceType"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.Deployment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Port"
          }
        },
        "etag": {
          "type": "string"
        },
        "kubernetesServiceIp": {
          "type": "string"
        },
        "kubernetesExternalAddresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "For kubernetes services of type load balancer, this field contains the list of lb hostnames or IPs assigned to the service. For services of type nodePort, this field contains the IP addresses of the nodes in the cluster."
        }
      }
    },
    "tetrate.api.tcc.core.v1.Endpoint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "deployment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "address": {
          "type": "string",
          "description": "Address associated with the network endpoint without the port. Domain names can be used and must be fully-qualified without wildcards."
        },
        "ports": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          },
          "description": "Set of inbound traffic ports associated with the endpoint. The ports must be associated with a port name that was declared as part of the deployment."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "One or more labels associated with the endpoint."
        },
        "locality": {
          "type": "string",
          "description": "The locality associated with the endpoint, in the form country/region/zone. A locality corresponds to a failure domain (country/region/zone)."
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "description": "The load balancing weight associated with the endpoint. Endpoints with higher weights in a pool will receive proportionally higher traffic."
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "Endpoint defines a network address (IP or hostname) associated with the service."
    },
    "tetrate.api.tcc.core.v1.Environment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "id": {
          "type": "string",
          "description": "A short name for the environment (e.g,, dev, stage, us-1, etc.)."
        },
        "description": {
          "type": "string",
          "description": "Additional information for readability."
        },
        "clientSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ClientSettings",
          "description": "Resilience settings that apply to all clusters in the environment."
        },
        "etag": {
          "type": "string"
        }
      },
      "description": "Environment is a collection of applications, services, load balancers, and clusters where they are deployed.",
      "title": "Environment"
    },
    "tetrate.api.tcc.core.v1.ExternalRouteSettings": {
      "type": "object",
      "properties": {
        "tls": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TLSSettings",
          "description": "TLS certificate info for the external service. If nil, the gateway will communicate with the external service over plain text."
        },
        "httpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpSettings",
          "description": "HTTP specific settings, transformations and routing rules associated with HTTP traffic to this service."
        },
        "tcpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TcpSettings",
          "description": "TCP specific settings, transformations and routing rules associated with non-HTTP traffic to this service."
        }
      },
      "description": "HTTP/TCP routing settings for an external service in the \"system\" application. Enforced at the external facing gateway in the \"system\" application.",
      "title": "ExternalRouteSettings"
    },
    "tetrate.api.tcc.core.v1.GenerateClusterTokensRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "lifetime": {
          "type": "string",
          "title": "Lifetime of the tokens"
        }
      }
    },
    "tetrate.api.tcc.core.v1.GetAllEnvironmentResourcesResponse": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.GetAllEnvironmentResourcesResponse.ApplicationDetails"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
          }
        },
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
          }
        },
        "authzPolicies": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
          },
          "description": "authz_policies contains the AuthZ policies for the different resources (Applications, Services) indexed by the resource fully qualified name."
        }
      }
    },
    "tetrate.api.tcc.core.v1.GetAllEnvironmentResourcesResponse.ApplicationDetails": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
        },
        "policy": {
          "$ref": "#/definitions/tetrate.api.authz.v1.Policy"
        }
      }
    },
    "tetrate.api.tcc.core.v1.GetAllLogicalResourcesResponse": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
          }
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.GetAllPhysicalResourcesResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
          }
        },
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
          }
        },
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
          }
        },
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.HTTPRetry": {
      "type": "object",
      "properties": {
        "attempts": {
          "type": "integer",
          "format": "int32",
          "description": "Number of retries for a given request. The interval between retries will be determined automatically (25ms+).  Actual number of retries attempted depends on the httpReqTimeout."
        },
        "perTryTimeout": {
          "type": "string",
          "description": "Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE \u003e=1ms."
        },
        "retryOn": {
          "type": "string",
          "description": "Specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list. See the [supported policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#x-envoy-retry-on) and [here](https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/router_filter#x-envoy-retry-grpc-on) for more details."
        }
      }
    },
    "tetrate.api.tcc.core.v1.HTTPRewrite": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "Rewrite the path (or the prefix) portion of the URI with this value. If the original URI was matched based on prefix, the value provided in this field will replace the corresponding matched prefix."
        },
        "authority": {
          "type": "string",
          "description": "Rewrite the Authority/Host header with this value."
        }
      }
    },
    "tetrate.api.tcc.core.v1.Headers": {
      "type": "object",
      "properties": {
        "request": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Headers.HeaderOperations",
          "description": "Header manipulation rules to apply before forwarding a request to the destination service."
        },
        "response": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Headers.HeaderOperations",
          "description": "Header manipulation rules to apply before returning a response to the caller."
        }
      },
      "description": "Header manipulation rules."
    },
    "tetrate.api.tcc.core.v1.Headers.HeaderOperations": {
      "type": "object",
      "properties": {
        "set": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Overwrite the headers specified by key with the given values."
        },
        "add": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Append the given values to the headers specified by keys (will create a comma-separated list of values)."
        },
        "remove": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Remove a the specified headers."
        }
      },
      "description": "HeaderOperations Describes the header manipulations to apply."
    },
    "tetrate.api.tcc.core.v1.HttpMatchCondition": {
      "type": "object",
      "properties": {
        "uri": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.StringMatch",
          "description": "URI to match."
        },
        "scheme": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.StringMatch",
          "title": "URI Scheme"
        },
        "method": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.StringMatch",
          "description": "HTTP Method."
        },
        "authority": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.StringMatch",
          "description": "HTTP Authority."
        },
        "headers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.StringMatch"
          },
          "description": "The header keys must be lowercase and use hyphen as the separator, e.g. x-request-id."
        }
      },
      "description": "A single match clause to match all aspects of a request."
    },
    "tetrate.api.tcc.core.v1.HttpModifyAction": {
      "type": "object",
      "properties": {
        "rewrite": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HTTPRewrite"
        },
        "headers": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Headers"
        }
      },
      "description": "HTTP path/url/header modification."
    },
    "tetrate.api.tcc.core.v1.HttpRule": {
      "type": "object",
      "properties": {
        "match": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpMatchCondition"
          },
          "description": "One or more match conditions (OR-ed)."
        },
        "modify": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpModifyAction",
          "description": "One or more mutations to be performed before forwarding. Includes typical modifications to be done on a single request like URL rewrite, host rewrite, headers to add/remove/append."
        },
        "route": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Route"
        },
        "redirect": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Redirect"
        }
      },
      "description": "A single HTTP rule."
    },
    "tetrate.api.tcc.core.v1.HttpSettings": {
      "type": "object",
      "properties": {
        "stickySession": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpSettings.StickySession"
        },
        "corsPolicy": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.CorsPolicy"
        },
        "routeRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpRule"
          }
        }
      },
      "description": "HTTP settings for a service. Applicable to ports receiving HTTP traffic.",
      "title": "HttpSettings"
    },
    "tetrate.api.tcc.core.v1.HttpSettings.HTTPCookie": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the cookie."
        },
        "path": {
          "type": "string",
          "description": "Path to set for the cookie."
        },
        "ttl": {
          "type": "string",
          "description": "Lifetime of the cookie."
        }
      },
      "description": "Describes a HTTP cookie that will be used for sticky sessions. If the cookie is not present, it will be generated."
    },
    "tetrate.api.tcc.core.v1.HttpSettings.StickySession": {
      "type": "object",
      "properties": {
        "header": {
          "type": "string",
          "description": "Hash based on a specific HTTP header."
        },
        "cookie": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpSettings.HTTPCookie",
          "description": "Hash based on HTTP cookie."
        },
        "useSourceIp": {
          "type": "boolean",
          "format": "boolean",
          "description": "Hash based on the source IP address."
        }
      },
      "description": "If set, the load balancer will route all requests from a particular client to the same backend of the service."
    },
    "tetrate.api.tcc.core.v1.InternalRouteSettings": {
      "type": "object",
      "properties": {
        "httpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpSettings",
          "description": "HTTP specific settings, transformations and routing rules associated with HTTP traffic to this service."
        },
        "tcpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TcpSettings",
          "description": "TCP specific settings, transformations and routing rules associated with non-HTTP traffic to this service."
        }
      },
      "description": "HTTP/TCP routing settings for an internal service in an application. Enforced at the sidecars for services inside the same application.",
      "title": "InternalRouteSettings"
    },
    "tetrate.api.tcc.core.v1.LBRouteSettings": {
      "type": "object",
      "properties": {
        "enableWorkflows": {
          "type": "boolean",
          "format": "boolean"
        },
        "loadBalancerClass": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.LoadBalancerClass"
        },
        "loadBalancerTier": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.LoadBalancerTier",
          "description": "Current restrictions: Tier1 load balancers can only route to other tier2 load balancers in any cluster (local/remote). They cannot route to internal services in their local clusters. Tier2 load balancers can route to internal services in the same cluster only."
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.LBRouteSettings.LBRoute"
          }
        }
      },
      "description": "HTTP/TCP routing settings for application exposed via a load balancer service. Enforced at load balancer only.",
      "title": "LBRouteSettings"
    },
    "tetrate.api.tcc.core.v1.LBRouteSettings.LBRoute": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "Hostname with which the application is exposed on this load balancer."
        },
        "tls": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TLSSettings",
          "description": "TLS certificate info for the application. If nil, the gateway will expose the application on port 80 only."
        },
        "httpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.HttpSettings",
          "description": "HTTP specific settings, transformations and routing rules associated with HTTP traffic to this service."
        },
        "tcpSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TcpSettings",
          "description": "TCP specific settings, transformations and routing rules associated with non-HTTP traffic to this service."
        },
        "authSettings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.LBRouteSettings.LBRoute.AuthSettings"
          },
          "description": "One or more auth settings (OR-ed)."
        },
        "rateLimitSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.RateLimitSettings",
          "description": "Rate limit settings."
        }
      }
    },
    "tetrate.api.tcc.core.v1.LBRouteSettings.LBRoute.AuthSettings": {
      "type": "object",
      "properties": {
        "basicAuthSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.BasicAuthSettings"
        }
      },
      "description": "Available authentication settings."
    },
    "tetrate.api.tcc.core.v1.ListApplicationsResponse": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Application"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListClustersResponse": {
      "type": "object",
      "properties": {
        "clusters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Cluster"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListDeploymentsResponse": {
      "type": "object",
      "properties": {
        "deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Deployment"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListEndpointsResponse": {
      "type": "object",
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Endpoint"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListEnvironmentsResponse": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Environment"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListNamespacesResponse": {
      "type": "object",
      "properties": {
        "namespaces": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Namespace"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Service"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListTeamsResponse": {
      "type": "object",
      "properties": {
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Team"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListTenantsResponse": {
      "type": "object",
      "properties": {
        "tenants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Tenant"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.ListUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.User"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.LoadBalancerClass": {
      "type": "string",
      "enum": [
        "NONE",
        "ENVOY",
        "F5"
      ],
      "default": "NONE"
    },
    "tetrate.api.tcc.core.v1.LoadBalancerTier": {
      "type": "string",
      "enum": [
        "TIER_NOT_SET",
        "TIER1",
        "TIER2"
      ],
      "default": "TIER_NOT_SET"
    },
    "tetrate.api.tcc.core.v1.Namespace": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tenant": {
          "type": "string"
        },
        "environment": {
          "type": "string"
        },
        "cluster": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.Port": {
      "type": "object",
      "properties": {
        "number": {
          "type": "integer",
          "format": "int64",
          "description": "A valid non-negative integer port number."
        },
        "protocol": {
          "type": "string",
          "description": "The protocol exposed on the port. MUST BE one of HTTP|GRPC|HTTP2|HTTPS|TCP|TLS.  TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection."
        },
        "name": {
          "type": "string",
          "description": "Name assigned to the port."
        },
        "endpointPort": {
          "type": "integer",
          "format": "int64",
          "description": "The endpoint port to which this service port maps to. For example, service port 80 exposed on the load balancer could map to an endpoint port 9080 on a VM."
        },
        "kubernetesNodePort": {
          "type": "integer",
          "format": "int64",
          "description": "Indicates the node port attached to a physical deployment on a kubernetes cluster."
        },
        "applicationPort": {
          "type": "integer",
          "format": "int64",
          "title": "In cases where IPtables based capture is not used, the sidecar and the application could be listening on different ports in the same VM. For example, the endpoint_port of 9080 is the port where Envoy listens for inbound traffic and forwards incoming traffic to the the weblogic application server listening on 127.0.0.1:7070"
        }
      }
    },
    "tetrate.api.tcc.core.v1.RateLimitSettings": {
      "type": "object",
      "properties": {
        "requestsLimit": {
          "type": "integer",
          "format": "int64",
          "description": "The number of requests limit per time interval."
        },
        "interval": {
          "type": "string",
          "description": "Interval for requests within limit."
        },
        "limitBy": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.RateLimitSettings.LimitBy",
          "description": "Limit by entity. Defaults to IP."
        }
      }
    },
    "tetrate.api.tcc.core.v1.RateLimitSettings.LimitBy": {
      "type": "string",
      "enum": [
        "IP",
        "USER",
        "NONE"
      ],
      "default": "IP",
      "description": "Available entity options to rate limit by.   - IP: Limit by IP.  - USER: Limit by user. Basic auth must be enabled.  - NONE: Limit without any entity. This will count all traffic incoming to the proxy for this LoadBalancer."
    },
    "tetrate.api.tcc.core.v1.Redirect": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "description": "On a redirect, overwrite the Path portion of the URL with this value."
        },
        "authority": {
          "type": "string",
          "description": "On a redirect, overwrite the Authority/Host portion of the URL with this value."
        }
      }
    },
    "tetrate.api.tcc.core.v1.Registry": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "KUBERNETES",
        "VM"
      ],
      "default": "UNKNOWN"
    },
    "tetrate.api.tcc.core.v1.RegistryConsumerResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        }
      },
      "description": "RegistryConsumerResponse response returned by server."
    },
    "tetrate.api.tcc.core.v1.RegistryUpdateResourcesRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "tenant": {
          "type": "string",
          "description": "Tenant where this service is residing e.g Tetrate."
        },
        "environment": {
          "type": "string",
          "description": "environment are higher-level isolations e.g. prod, staging, development, etc."
        },
        "cluster": {
          "type": "string",
          "description": "Unique cluster acting as a source."
        },
        "registrytype": {
          "type": "string",
          "description": "registrytype indicates source of entry. Currently accepted values \"kubernetes\", \"f5\"."
        },
        "payload": {
          "type": "string",
          "description": "JSON bulk payload of all physical resources."
        }
      },
      "description": "RegistryUpdateResourcesRequest request object."
    },
    "tetrate.api.tcc.core.v1.Route": {
      "type": "object",
      "properties": {
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Route.Destination"
          },
          "description": "All destinations within a route must be of the same type."
        }
      },
      "description": "One or more destinations in a local cluster for the given request."
    },
    "tetrate.api.tcc.core.v1.Route.Destination": {
      "type": "object",
      "properties": {
        "local": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Route.LocalDestination",
          "description": "A local destination."
        },
        "remote": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Route.RemoteDestination",
          "description": "A remote destination."
        },
        "address": {
          "type": "string",
          "description": "Instead of specifying local/remote services, you can specify the hostname/IP address to which traffic should be routed to. This address should be reachable from the load balancer. This destination type is applicable only when used with a load balancer service."
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "description": "The value of weight is 100 if omitted. The sum of all weights should add up to 100."
        },
        "port": {
          "type": "integer",
          "format": "int64",
          "description": "Optional."
        }
      }
    },
    "tetrate.api.tcc.core.v1.Route.LocalDestination": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string",
          "description": "If omitted, will route to same application as the service. The application field is used by load balancers in the system application to route to other applications."
        },
        "service": {
          "type": "string",
          "description": "If omitted, will route to the service owning this route.  When used with a Load Balancer (shared or dedicated), traffic can be routed to another service in the same application or a different application."
        },
        "host": {
          "type": "string",
          "description": "If omitted, will route to same host as the service."
        },
        "subset": {
          "type": "string"
        }
      },
      "description": "A destination local to the cluster where the load balancer or sidecar is present."
    },
    "tetrate.api.tcc.core.v1.Route.RemoteDestination": {
      "type": "object",
      "properties": {
        "application": {
          "type": "string",
          "description": "If omitted, defaults to system application."
        },
        "service": {
          "type": "string",
          "description": "The load balancer service to route the traffic to."
        }
      },
      "description": "A destination load balancer service in another cluster. This destination type is applicable only when used with a load balancer service."
    },
    "tetrate.api.tcc.core.v1.Service": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string",
          "description": "Tenant.Id."
        },
        "environment": {
          "type": "string",
          "description": "Environment.Id."
        },
        "application": {
          "type": "string",
          "description": "Application.Id."
        },
        "id": {
          "type": "string",
          "description": "Short name for the service. Clusters are expected to have namespaces that match the application, and services that match the Id, especially on Kubernetes."
        },
        "description": {
          "type": "string"
        },
        "hostname": {
          "type": "string",
          "description": "FQDN hostname of the service."
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User identifiable tags associated with this service."
        },
        "ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Port"
          }
        },
        "etag": {
          "type": "string"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace where the service is scoped and should be one of application namespaces. If the application has only one namespace and if this field is omitted, this filed would default to the application namespace. This field cannot be omitted if the application has more than one namespace."
        },
        "subsets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.Subset"
          },
          "description": "One or more versions of the service. Each version has a distinct name and a set of labels that help uniquely identify the pods/VMs of that version."
        },
        "serviceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ServiceType",
          "description": "Internal/external/load balancer service. External services can be created only in the \"system\" application.  Load balancer services in the \"system\" application act as shared load balancers for the entire cluster, while those under user created applications act as a dedicated load balancer for that application. Defaults to internal."
        },
        "lbSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.LBRouteSettings",
          "description": "Allowed only if the service is of type load balancer."
        },
        "internalRoutes": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.InternalRouteSettings",
          "description": "Allowed only if the service is of type internal."
        },
        "externalRoutes": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.ExternalRouteSettings",
          "description": "Allowed only if the service is of type external."
        },
        "alertSettings": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Settings",
          "description": "Alert settings for certain metrics of this service. E.g. SLA rule."
        }
      }
    },
    "tetrate.api.tcc.core.v1.ServiceType": {
      "type": "string",
      "enum": [
        "INTERNAL",
        "LOADBALANCER",
        "EXTERNAL"
      ],
      "default": "INTERNAL",
      "description": " - INTERNAL: An internal service in an application that is not exposed to the outside world.  - LOADBALANCER: A load balancer service running only the proxy as the workload. A load balancer service inside an user application forwards traffic to other services in the application. A load balancer service inside the \"system\" application forwards traffic to services in other user applications.  - EXTERNAL: An external service (not in the mesh) accessed by the services in the application."
    },
    "tetrate.api.tcc.core.v1.SourceType": {
      "type": "string",
      "enum": [
        "INVALID",
        "LDAP",
        "LOCAL"
      ],
      "default": "INVALID",
      "description": "- LDAP: LDAP is used for users and teams that are automatically synchronized from LDAP  - LOCAL: LOCAL is used for users and teams that are manually created using the TCC API and that are local to TCC. TODO(nacx): Users represent subjects that can be authenticated against an external identity Provider so it is unlikely that there will be local users. Instead of having local users, we should introduce the local service account concept as a proper entity in the model, and configure all TCC agents and the superuser as local service accounts.",
      "title": "SourceType describes where users and teams come from"
    },
    "tetrate.api.tcc.core.v1.StringMatch": {
      "type": "object",
      "properties": {
        "exact": {
          "type": "string",
          "description": "Exact string match."
        },
        "prefix": {
          "type": "string",
          "description": "Prefix-based match."
        },
        "regex": {
          "type": "string",
          "description": "ECMAscript style regex-based match."
        }
      },
      "description": "Describes how to match a given string in HTTP headers. Match is case-sensitive."
    },
    "tetrate.api.tcc.core.v1.Subset": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels apply a filter over the endpoints of a service in the service registry."
        }
      }
    },
    "tetrate.api.tcc.core.v1.SyncTenantRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "id": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SourceType"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantRequest.SyncUser"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantRequest.SyncTeam"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.SyncTenantRequest.SyncTeam": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "memberUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "memberGroupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Information of a team as synchronized from the team source. This differs slightly from a TCC user since the fields here are raw info that does not have the context of the TCC hierarchy."
    },
    "tetrate.api.tcc.core.v1.SyncTenantRequest.SyncUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "description": "Information of a user as synchronized from the team source. This differs slightly from a TCC user since the fields here are raw info that does not have the context of the TCC hierarchy."
    },
    "tetrate.api.tcc.core.v1.SyncTenantResponse": {
      "type": "object",
      "properties": {
        "failedUsers": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantResponse.FailedIds"
        },
        "failedTeams": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SyncTenantResponse.FailedIds"
        }
      }
    },
    "tetrate.api.tcc.core.v1.SyncTenantResponse.FailedIds": {
      "type": "object",
      "properties": {
        "removal": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addition": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "update": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "tetrate.api.tcc.core.v1.TLSMode": {
      "type": "string",
      "enum": [
        "DISABLED",
        "SIMPLE",
        "MUTUAL",
        "SNI_PASSTHROUGH",
        "ISTIO_MUTUAL"
      ],
      "default": "DISABLED"
    },
    "tetrate.api.tcc.core.v1.TLSSettings": {
      "type": "object",
      "properties": {
        "tlsMode": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.TLSMode",
          "description": "Set this to SIMPLE, MUTUAL, or SNI_PASSTHROUGH for one-way TLS, mutual TLS, or client sni-based TLS passthrough respectively. The hostname in the load balancer will be used as the SNI in the TLS passthrough mode."
        },
        "tlsEnabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Enable TLS settings for the application."
        },
        "redirectToHttps": {
          "type": "boolean",
          "format": "boolean",
          "description": "If set, the load balancer will redirect HTTP connections on port 80 to HTTPS port 443."
        },
        "serverCertificate": {
          "type": "string",
          "description": "For proxies running on VMs, the path to the file holding the server-side TLS certificate to use."
        },
        "privateKey": {
          "type": "string",
          "description": "For proxies running on VMs, the path to the file holding the server's private key."
        },
        "caCertificates": {
          "type": "string",
          "description": "For proxies running on VMs, the path to a file containing certificate authority certificates to use in verifying a presented client side certificate for mutual TLS connections."
        },
        "secretName": {
          "type": "string",
          "description": "For proxies running on Kubernetes, the name of the secret that holds the TLS certs including the CA certificates. Currently applicable only on Kubernetes. The secret (type generic) should contain the following keys and values: key: \u003cprivateKey\u003e, cert: \u003cserverCert\u003e, cacert: \u003cCACertificate\u003e.  If the service is exposed via a load balancer, the secret must be accessible to it."
        }
      }
    },
    "tetrate.api.tcc.core.v1.TcpSettings": {
      "type": "object",
      "properties": {
        "route": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.Route",
          "description": "The destination to which the connection should be routed."
        }
      },
      "description": "TCP settings for a service. Applicable to ports receiving non-HTTP traffic."
    },
    "tetrate.api.tcc.core.v1.Team": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "etag": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SourceType"
        }
      }
    },
    "tetrate.api.tcc.core.v1.Tenant": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.User": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Internal use only. Auto populated field."
        },
        "tenant": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "sourceType": {
          "$ref": "#/definitions/tetrate.api.tcc.core.v1.SourceType"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "tetrate.api.tcc.core.v1.Version": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "title": "version is the TSB binary version"
        }
      }
    },
    "tetrate.api.tcc.spm.alert.v1.Notification": {
      "type": "object",
      "properties": {
        "condition": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.NotificationCondition",
          "description": "Notification condition type."
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Recipient"
          },
          "description": "Recipient list. Support list of email addresses as recipient."
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Enable flag. When disabled, notification is not sent. Default is false or disabled."
        }
      }
    },
    "tetrate.api.tcc.spm.alert.v1.NotificationCondition": {
      "type": "string",
      "enum": [
        "METRIC_ALERT_CREATED"
      ],
      "default": "METRIC_ALERT_CREATED",
      "description": "Supported notification condition type.   - METRIC_ALERT_CREATED: Send notification when there are alert."
    },
    "tetrate.api.tcc.spm.alert.v1.Operator": {
      "type": "string",
      "enum": [
        "EQ",
        "GT",
        "LT",
        "GTE",
        "LTE"
      ],
      "default": "EQ",
      "description": "Possible operators to \"judge\" the current metric value against a particular threshold value.",
      "title": "Operator"
    },
    "tetrate.api.tcc.spm.alert.v1.Recipient": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        }
      },
      "description": "Alert recipient."
    },
    "tetrate.api.tcc.spm.alert.v1.Rule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Short ID for this rule. Id is generated by client. spmserver will add suffix \"_rule\" before sending rule to skywalking and remove it when receiving message."
        },
        "metricName": {
          "type": "string",
          "description": "Metric name to be watched. Metric name is defined in https://github.com/tetrateio/tetrate/blob/master/install/helm/tcc/charts/oap/templates/01-config.yml#L125-L139."
        },
        "threshold": {
          "type": "integer",
          "format": "int64",
          "description": "The threshold value of a metric; depends on the operator, it triggers alert if the metric value is not match."
        },
        "operator": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Operator",
          "description": "The operator. E.g. greater-than, lower-than and equal."
        },
        "period": {
          "type": "string",
          "description": "The period of an alert rule should be checked."
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "The number of \"violation\" in a certain period."
        },
        "silencePeriod": {
          "type": "string",
          "description": "Keep silence for some amount of time after an alarm is triggered. By default, the value is the same as period."
        },
        "displayName": {
          "type": "string",
          "description": "Friendly name for a rule."
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether this rule is enabled or disabled. Default to false or disabled."
        },
        "includeServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Included services in this rule. This field is deprecated. Use included_services that has validation."
        },
        "excludeServices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Excluded services from this rule. This field is deprecated. Use excluded_services that has validation."
        },
        "includedServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Rule.Service"
          },
          "description": "Included services in this rule. This will be translated into include-names in skywalking configuration response."
        },
        "excludedServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Rule.Service"
          },
          "description": "Excluded services from this rule. This will be translated into exclude-names in skywalking configuration response. spmserver will omit this from response if empty."
        },
        "severity": {
          "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Severity",
          "description": "Alert severity. Default to MEDIUM."
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Rule.AlertThreshold"
          },
          "title": "Thresholds value as array to set multiple threshold values. If this value is set, single value threshold will be ignored"
        }
      },
      "description": "An alert rule defines the condition when an alert should be triggered.",
      "title": "Rule"
    },
    "tetrate.api.tcc.spm.alert.v1.Rule.AlertThreshold": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The threshold value of a metric; depends on the operator, it triggers alert if the metric value is not match."
        }
      }
    },
    "tetrate.api.tcc.spm.alert.v1.Rule.Service": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Service name. Service name follows SPM noun. https://github.com/tetrateio/SPM/blob/spm2/doc/spm-nouns.md#mapping Example: subset|service|namespace|cluster|env, *|service|namespace|*|env, subset|service|namespace|*|env. Allowed characters are 0-9, a-z, .~_*-."
        }
      },
      "description": "Service to be included or excluded."
    },
    "tetrate.api.tcc.spm.alert.v1.Settings": {
      "type": "object",
      "properties": {
        "rules": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Rule"
          }
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Recipient"
          },
          "description": "Recipient list. This field is deprecated."
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tetrate.api.tcc.spm.alert.v1.Notification"
          },
          "description": "Application level notification settings."
        }
      },
      "description": "A set of alert rules.",
      "title": "Settings"
    },
    "tetrate.api.tcc.spm.alert.v1.Severity": {
      "type": "string",
      "enum": [
        "MEDIUM",
        "CRITICAL",
        "HIGH",
        "LOW",
        "INFORMATIONAL",
        "ALL_SEVERITIES"
      ],
      "default": "MEDIUM",
      "description": "Alert severity level from Informational to Critical. ALL_SEVERITIES is used for list Alert request to include all values.",
      "title": "Severity"
    }
  }
}
