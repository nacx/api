syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

// Endpoint defines a network address (IP or hostname) associated with
// the service.
message Endpoint {
  // read-only e.g. 1.2.3.4
  string name = 1;
  // empty if not associated with a service
  string service = 2;
  string namespace = 3;
  string cluster = 4;
  string tenant = 5;
  // REQUIRED: Address associated with the network endpoint without
  // the port.  Domain names can be used and must be fully-qualified
  // without wildcards.
  string address = 6;

  // Set of inbound traffic ports associated with the endpoint. The
  // ports must be associated with a port number that was declared
  // as part of the service.
  map<uint32, uint32> ports = 7;

  // One or more labels associated with the endpoint.
  map<string, string> labels = 8;

  // The locality associated with the endpoint, in the form
  // country/region/zone. A locality corresponds to a failure domain
  // (country/region/zone).
  string locality = 9;

  // The load balancing weight associated with the endpoint. Endpoints
  // with higher weights in a pool will receive proportionally higher
  // traffic.
  uint32 weight = 10;
}

message CreateEndpointRequest {
  string name = 1;
  string service = 2;
  string namespace = 3;
  string cluster = 4;
  string tenant = 5;
  string address = 6;
  map<uint32, uint32> ports = 7;
  map<string, string> labels = 8;
  string locality = 9;
  uint32 weight = 10;
}

message GetEndpointRequest {
  string name = 1;
  string namespace = 2;
  string cluster = 3;
  string tenant = 4;
}

message ListNamespaceEndpointRequest {
  string cluster = 1;
  string namespace = 2;
  string tenant = 3;
}

message ListServiceEndpointRequest {
  string service = 1;
  string cluster = 2;
  string namespace = 3;
  string tenant = 4;
}

message ListServiceSubsetEndpointRequest {
  string service = 1;
  string cluster = 2;
  string namespace = 3;
  string subset = 4;
  string tenant = 5;
}

message ListEndpointResponse {
  repeated Endpoint endpoints = 1;
}

message UpdateEndpointRequest {
  string name = 1;
  string namespace = 2;
  string cluster = 3;
  string tenant = 4;
  string address = 5;
  map<uint32, uint32> ports = 6;
  map<string, string> labels = 7;
  string locality = 8;
  uint32 weight = 9;
}

message DeleteEndpointRequest {
  string name = 1;
  string namespace = 2;
  string cluster = 3;
  string tenant = 4;
}
