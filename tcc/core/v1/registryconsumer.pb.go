// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: registryconsumer.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RegistryUpdateResourcesRequest request object.
type RegistryUpdateResourcesRequest struct {
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Tenant where this service is residing e.g Tetrate.
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// environment are higher-level isolations e.g. prod, staging, development, etc.
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	// Unique cluster acting as a source.
	Cluster string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// registrytype indicates source of entry. Currently accepted values "kubernetes", "f5".
	Registrytype string `protobuf:"bytes,5,opt,name=registrytype,proto3" json:"registrytype,omitempty"`
	// JSON bulk payload of all physical resources.
	Payload              string   `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryUpdateResourcesRequest) Reset()         { *m = RegistryUpdateResourcesRequest{} }
func (m *RegistryUpdateResourcesRequest) String() string { return proto.CompactTextString(m) }
func (*RegistryUpdateResourcesRequest) ProtoMessage()    {}
func (*RegistryUpdateResourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c626f6a6ed4f08, []int{0}
}
func (m *RegistryUpdateResourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryUpdateResourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryUpdateResourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryUpdateResourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryUpdateResourcesRequest.Merge(m, src)
}
func (m *RegistryUpdateResourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegistryUpdateResourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryUpdateResourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryUpdateResourcesRequest proto.InternalMessageInfo

func (m *RegistryUpdateResourcesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *RegistryUpdateResourcesRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *RegistryUpdateResourcesRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *RegistryUpdateResourcesRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *RegistryUpdateResourcesRequest) GetRegistrytype() string {
	if m != nil {
		return m.Registrytype
	}
	return ""
}

func (m *RegistryUpdateResourcesRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

// RegistryConsumerResponse response returned by server.
type RegistryConsumerResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistryConsumerResponse) Reset()         { *m = RegistryConsumerResponse{} }
func (m *RegistryConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*RegistryConsumerResponse) ProtoMessage()    {}
func (*RegistryConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c626f6a6ed4f08, []int{1}
}
func (m *RegistryConsumerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegistryConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegistryConsumerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegistryConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistryConsumerResponse.Merge(m, src)
}
func (m *RegistryConsumerResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegistryConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistryConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegistryConsumerResponse proto.InternalMessageInfo

func (m *RegistryConsumerResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*RegistryUpdateResourcesRequest)(nil), "tetrate.api.tcc.core.v1.RegistryUpdateResourcesRequest")
	proto.RegisterType((*RegistryConsumerResponse)(nil), "tetrate.api.tcc.core.v1.RegistryConsumerResponse")
}

func init() { proto.RegisterFile("registryconsumer.proto", fileDescriptor_84c626f6a6ed4f08) }

var fileDescriptor_84c626f6a6ed4f08 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0xc9, 0x74, 0xad, 0x34, 0x2b, 0x58, 0x72, 0xd8, 0x1d, 0x8a, 0x14, 0xad, 0x17, 0x51,
	0x49, 0xe8, 0x2a, 0x28, 0x7b, 0x5c, 0xbf, 0x41, 0xc0, 0x8b, 0xb7, 0x34, 0x7d, 0x8c, 0xc1, 0x4e,
	0x12, 0x93, 0x37, 0x03, 0xa5, 0xf4, 0xa0, 0x27, 0xef, 0x7e, 0x1b, 0x4f, 0x1e, 0x3d, 0x0a, 0x7e,
	0x01, 0x29, 0x5e, 0x04, 0x3f, 0x84, 0x4c, 0x27, 0x03, 0xe3, 0x88, 0xee, 0xed, 0xbd, 0xf9, 0xff,
	0xff, 0x99, 0xe4, 0xf7, 0x1e, 0x3d, 0x0b, 0x50, 0x98, 0x88, 0x61, 0xab, 0x9d, 0x8d, 0x55, 0x09,
	0x81, 0xfb, 0xe0, 0xd0, 0xb1, 0x73, 0x04, 0x0c, 0x0a, 0x81, 0x2b, 0x6f, 0x38, 0x6a, 0xcd, 0xb5,
	0x0b, 0xc0, 0xeb, 0xe5, 0xec, 0x4e, 0xe1, 0x5c, 0xb1, 0x01, 0xa1, 0xbc, 0x11, 0xca, 0x5a, 0x87,
	0x0a, 0x8d, 0xb3, 0xb1, 0x8d, 0xcd, 0xce, 0x6b, 0xb5, 0x31, 0x6b, 0x85, 0x20, 0xba, 0xa2, 0x15,
	0x16, 0x1f, 0x32, 0x3a, 0x97, 0xe9, 0x57, 0x2f, 0x7d, 0x23, 0x48, 0x88, 0xae, 0x0a, 0x1a, 0xa2,
	0x84, 0xb7, 0x15, 0x44, 0x64, 0x67, 0x74, 0xec, 0x55, 0x00, 0x8b, 0x39, 0xb9, 0x4b, 0x1e, 0x4c,
	0x64, 0xea, 0xd8, 0x3d, 0x3a, 0x46, 0xb0, 0xca, 0x62, 0x9e, 0x35, 0xdf, 0xaf, 0x26, 0x9f, 0x7e,
	0x7e, 0x1e, 0x9d, 0x84, 0x6c, 0x4a, 0x64, 0x12, 0xd8, 0x23, 0x7a, 0x0a, 0xb6, 0x36, 0xc1, 0xd9,
	0xb2, 0xc9, 0x8f, 0x86, 0xbe, 0xbe, 0xca, 0xee, 0xd3, 0x9b, 0x7a, 0x53, 0x45, 0x84, 0x90, 0x9f,
	0x0c, 0x8d, 0x9d, 0xc2, 0x9e, 0xd2, 0x5b, 0x1d, 0x19, 0xdc, 0x7a, 0xc8, 0x6f, 0x1c, 0x9d, 0xd3,
	0xc6, 0x79, 0x1a, 0x26, 0x72, 0xf4, 0xe6, 0x79, 0x94, 0x59, 0x5d, 0xca, 0x3f, 0x5c, 0xcd, 0xd1,
	0x5e, 0x6d, 0x37, 0x4e, 0xad, 0xf3, 0xf1, 0x5f, 0x47, 0x27, 0x65, 0x71, 0x41, 0xf3, 0x8e, 0xc4,
	0x8b, 0x04, 0x5d, 0x42, 0xf4, 0xce, 0x46, 0x68, 0x18, 0x44, 0x54, 0x58, 0xc5, 0x8e, 0x41, 0xdb,
	0x5d, 0xbc, 0xcb, 0xe8, 0x74, 0x18, 0x62, 0xbf, 0x08, 0xbd, 0x3d, 0x60, 0xc9, 0x9e, 0xf1, 0x7f,
	0x0c, 0x8e, 0xff, 0x9f, 0xfe, 0x6c, 0x79, 0x6d, 0x70, 0x78, 0xd9, 0x45, 0xf9, 0xfe, 0xdb, 0x8f,
	0x8f, 0x59, 0xb1, 0x58, 0x89, 0x7a, 0x29, 0xda, 0x49, 0x44, 0xb1, 0x6b, 0x8b, 0xbd, 0xe8, 0x21,
	0x8f, 0x62, 0xd7, 0xeb, 0xf6, 0x22, 0x41, 0x8e, 0x62, 0x97, 0xaa, 0xbd, 0x18, 0xae, 0xa1, 0xd8,
	0xf5, 0xc1, 0xee, 0x2f, 0xc9, 0xc3, 0xab, 0xcb, 0x2f, 0x87, 0x39, 0xf9, 0x7a, 0x98, 0x93, 0xef,
	0x87, 0x39, 0x79, 0xf5, 0xb8, 0x30, 0xf8, 0xba, 0x5a, 0x71, 0xed, 0x4a, 0x91, 0x6e, 0x6e, 0x5c,
	0x57, 0x1d, 0xb7, 0x13, 0xb5, 0x16, 0xcd, 0x1b, 0x44, 0xbd, 0x5c, 0x8d, 0x8f, 0x5b, 0xf8, 0xe4,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x7a, 0x09, 0xab, 0xef, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryConsumerClient is the client API for RegistryConsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryConsumerClient interface {
	// UpdateResources to be called periodically with a bulk payload. API detects the delta between
	// last call, and determines resources to create, modify, delete.
	UpdateResources(ctx context.Context, in *RegistryUpdateResourcesRequest, opts ...grpc.CallOption) (*RegistryConsumerResponse, error)
}

type registryConsumerClient struct {
	cc *grpc.ClientConn
}

func NewRegistryConsumerClient(cc *grpc.ClientConn) RegistryConsumerClient {
	return &registryConsumerClient{cc}
}

func (c *registryConsumerClient) UpdateResources(ctx context.Context, in *RegistryUpdateResourcesRequest, opts ...grpc.CallOption) (*RegistryConsumerResponse, error) {
	out := new(RegistryConsumerResponse)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.RegistryConsumer/UpdateResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryConsumerServer is the server API for RegistryConsumer service.
type RegistryConsumerServer interface {
	// UpdateResources to be called periodically with a bulk payload. API detects the delta between
	// last call, and determines resources to create, modify, delete.
	UpdateResources(context.Context, *RegistryUpdateResourcesRequest) (*RegistryConsumerResponse, error)
}

// UnimplementedRegistryConsumerServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryConsumerServer struct {
}

func (*UnimplementedRegistryConsumerServer) UpdateResources(ctx context.Context, req *RegistryUpdateResourcesRequest) (*RegistryConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResources not implemented")
}

func RegisterRegistryConsumerServer(s *grpc.Server, srv RegistryConsumerServer) {
	s.RegisterService(&_RegistryConsumer_serviceDesc, srv)
}

func _RegistryConsumer_UpdateResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistryUpdateResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryConsumerServer).UpdateResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.RegistryConsumer/UpdateResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryConsumerServer).UpdateResources(ctx, req.(*RegistryUpdateResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryConsumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.core.v1.RegistryConsumer",
	HandlerType: (*RegistryConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateResources",
			Handler:    _RegistryConsumer_UpdateResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registryconsumer.proto",
}

func (m *RegistryUpdateResourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryUpdateResourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryUpdateResourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Registrytype) > 0 {
		i -= len(m.Registrytype)
		copy(dAtA[i:], m.Registrytype)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Registrytype)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegistryConsumerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegistryConsumerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegistryConsumerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintRegistryconsumer(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRegistryconsumer(dAtA []byte, offset int, v uint64) int {
	offset -= sovRegistryconsumer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegistryUpdateResourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	l = len(m.Registrytype)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegistryConsumerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovRegistryconsumer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRegistryconsumer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRegistryconsumer(x uint64) (n int) {
	return sovRegistryconsumer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegistryUpdateResourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryconsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryUpdateResourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryUpdateResourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrytype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrytype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryconsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegistryConsumerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegistryconsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegistryConsumerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegistryConsumerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegistryconsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRegistryconsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegistryconsumer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegistryconsumer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegistryconsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRegistryconsumer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthRegistryconsumer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegistryconsumer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegistryconsumer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthRegistryconsumer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegistryconsumer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegistryconsumer   = fmt.Errorf("proto: integer overflow")
)
