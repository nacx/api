// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: configproducer.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/tetrateio/tetrate/api/q/rbac/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ConfigDownloadRequest struct {
	Parent      string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Tenant      string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Cluster     string `protobuf:"bytes,4,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Currently accepted values are istio or f5.
	Configtype           string   `protobuf:"bytes,5,opt,name=configtype,proto3" json:"configtype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigDownloadRequest) Reset()         { *m = ConfigDownloadRequest{} }
func (m *ConfigDownloadRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigDownloadRequest) ProtoMessage()    {}
func (*ConfigDownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc11ba2fb719eb8e, []int{0}
}
func (m *ConfigDownloadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigDownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigDownloadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigDownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigDownloadRequest.Merge(m, src)
}
func (m *ConfigDownloadRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfigDownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigDownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigDownloadRequest proto.InternalMessageInfo

func (m *ConfigDownloadRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ConfigDownloadRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ConfigDownloadRequest) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ConfigDownloadRequest) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConfigDownloadRequest) GetConfigtype() string {
	if m != nil {
		return m.Configtype
	}
	return ""
}

type ConfigData struct {
	Configtype  string `protobuf:"bytes,1,opt,name=configtype,proto3" json:"configtype,omitempty"`
	Cluster     string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Environment string `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Tenant      string `protobuf:"bytes,4,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// For istio, this is a huge YAML dump of all Istio artifacts like virtual services, destination
	// rules, service entries, gateways, etc. in YAML form. For F5, its all f5 config artifacts.
	Payload              string   `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigData) Reset()         { *m = ConfigData{} }
func (m *ConfigData) String() string { return proto.CompactTextString(m) }
func (*ConfigData) ProtoMessage()    {}
func (*ConfigData) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc11ba2fb719eb8e, []int{1}
}
func (m *ConfigData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigData.Merge(m, src)
}
func (m *ConfigData) XXX_Size() int {
	return m.Size()
}
func (m *ConfigData) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigData.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigData proto.InternalMessageInfo

func (m *ConfigData) GetConfigtype() string {
	if m != nil {
		return m.Configtype
	}
	return ""
}

func (m *ConfigData) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

func (m *ConfigData) GetEnvironment() string {
	if m != nil {
		return m.Environment
	}
	return ""
}

func (m *ConfigData) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *ConfigData) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigDownloadRequest)(nil), "tetrate.api.tcc.core.v1.ConfigDownloadRequest")
	proto.RegisterType((*ConfigData)(nil), "tetrate.api.tcc.core.v1.ConfigData")
}

func init() { proto.RegisterFile("configproducer.proto", fileDescriptor_cc11ba2fb719eb8e) }

var fileDescriptor_cc11ba2fb719eb8e = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3f, 0x6f, 0x13, 0x31,
	0x14, 0x97, 0xd3, 0x34, 0xa5, 0x8e, 0x8a, 0x8a, 0x05, 0xed, 0x29, 0x42, 0x51, 0x49, 0x17, 0x24,
	0x90, 0xad, 0x14, 0xb1, 0x30, 0xb6, 0x7c, 0x00, 0x74, 0x23, 0x03, 0xe2, 0xd5, 0x71, 0x82, 0xa5,
	0xc4, 0x3e, 0xec, 0x97, 0x43, 0x55, 0x74, 0x4b, 0xbf, 0x02, 0x1b, 0x1f, 0x85, 0x89, 0x0d, 0x46,
	0x24, 0x16, 0x46, 0x14, 0xb1, 0x20, 0xf1, 0x21, 0xd0, 0x9d, 0x7d, 0xdc, 0xa5, 0x0a, 0x62, 0x7b,
	0xcf, 0xef, 0x67, 0xfb, 0xf7, 0xe7, 0xd1, 0xbb, 0xd2, 0x9a, 0xa9, 0x9e, 0x65, 0xce, 0x4e, 0x96,
	0x52, 0x39, 0x9e, 0x39, 0x8b, 0x96, 0x1d, 0xa3, 0x42, 0x07, 0xa8, 0x38, 0x64, 0x9a, 0xa3, 0x94,
	0x5c, 0x5a, 0xa7, 0x78, 0x3e, 0x1e, 0xdc, 0x9f, 0x59, 0x3b, 0x9b, 0x2b, 0x01, 0x99, 0x16, 0x60,
	0x8c, 0x45, 0x40, 0x6d, 0x8d, 0x0f, 0xd7, 0x06, 0xc7, 0x39, 0xcc, 0xf5, 0x04, 0x50, 0x89, 0xba,
	0x88, 0x83, 0x3b, 0x99, 0x72, 0x0b, 0xed, 0x7d, 0x83, 0x1d, 0x7d, 0x27, 0xf4, 0xde, 0x45, 0xf5,
	0xf7, 0x73, 0xfb, 0xce, 0xcc, 0x2d, 0x4c, 0x52, 0xf5, 0x76, 0xa9, 0x3c, 0xb2, 0x23, 0xda, 0xcb,
	0xc0, 0x29, 0x83, 0x09, 0x39, 0x21, 0x0f, 0xf7, 0xd3, 0xd8, 0xb1, 0x07, 0xb4, 0x87, 0xca, 0x80,
	0xc1, 0xa4, 0x53, 0x9e, 0x9f, 0xef, 0x7f, 0xfc, 0xf5, 0x69, 0xa7, 0xeb, 0x3a, 0x87, 0x24, 0x8d,
	0x03, 0xf6, 0x88, 0xf6, 0x95, 0xc9, 0xb5, 0xb3, 0x66, 0x51, 0xde, 0xdf, 0xb9, 0x89, 0x6b, 0x4f,
	0xd9, 0x29, 0xdd, 0x93, 0xf3, 0xa5, 0x47, 0xe5, 0x92, 0xee, 0x4d, 0x60, 0x3d, 0x61, 0x67, 0x94,
	0x06, 0x87, 0xf0, 0x2a, 0x53, 0xc9, 0x6e, 0x85, 0x63, 0x25, 0xee, 0xc0, 0xf5, 0xd3, 0x5d, 0xed,
	0x51, 0xdb, 0xb4, 0x33, 0x7d, 0x9a, 0xb6, 0x50, 0xa3, 0x0f, 0x84, 0xd2, 0x28, 0x0d, 0x10, 0xd8,
	0x70, 0xe3, 0x89, 0xa0, 0xa9, 0x75, 0xc2, 0x92, 0x86, 0x47, 0x25, 0xac, 0xf9, 0xfc, 0x64, 0x8b,
	0x9c, 0x4d, 0x0d, 0x47, 0x7f, 0x3d, 0xe9, 0x06, 0xaf, 0xa2, 0x11, 0x09, 0xdd, 0xcb, 0xe0, 0xaa,
	0x74, 0x35, 0x70, 0x4e, 0xeb, 0xf6, 0xec, 0x37, 0xa1, 0xb7, 0x03, 0xb9, 0x17, 0x31, 0x73, 0xf6,
	0x99, 0xd0, 0x5b, 0x75, 0x08, 0x8c, 0xf3, 0x7f, 0x64, 0xcf, 0xb7, 0xa6, 0x35, 0x38, 0xfd, 0x1f,
	0x1e, 0x10, 0x46, 0xd3, 0xeb, 0x6f, 0x3f, 0xdf, 0x77, 0x5e, 0xb3, 0x57, 0x22, 0x1f, 0x8b, 0x40,
	0xd1, 0x8b, 0x55, 0x28, 0x0a, 0xd1, 0x12, 0xe4, 0xc5, 0xaa, 0xd5, 0x15, 0x22, 0x3a, 0xe1, 0xc5,
	0x2a, 0x56, 0x85, 0xd8, 0x5c, 0x58, 0xb1, 0x6a, 0x9c, 0x2c, 0x06, 0x87, 0xd7, 0xc5, 0x01, 0xeb,
	0xa7, 0x0a, 0x26, 0x17, 0x01, 0x7e, 0xfe, 0xec, 0xcb, 0x7a, 0x48, 0xbe, 0xae, 0x87, 0xe4, 0xc7,
	0x7a, 0x48, 0x5e, 0x3e, 0x9e, 0x69, 0x7c, 0xb3, 0xbc, 0xe4, 0xd2, 0x2e, 0x44, 0xa4, 0xad, 0x6d,
	0x5d, 0x55, 0x4b, 0x8d, 0x52, 0x8a, 0x52, 0x80, 0xc8, 0xc7, 0x97, 0xbd, 0x6a, 0x53, 0x9f, 0xfc,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x51, 0xd7, 0xcd, 0x24, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigProducerClient is the client API for ConfigProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigProducerClient interface {
	Download(ctx context.Context, in *ConfigDownloadRequest, opts ...grpc.CallOption) (*ConfigData, error)
}

type configProducerClient struct {
	cc *grpc.ClientConn
}

func NewConfigProducerClient(cc *grpc.ClientConn) ConfigProducerClient {
	return &configProducerClient{cc}
}

func (c *configProducerClient) Download(ctx context.Context, in *ConfigDownloadRequest, opts ...grpc.CallOption) (*ConfigData, error) {
	out := new(ConfigData)
	err := c.cc.Invoke(ctx, "/tetrate.api.tcc.core.v1.ConfigProducer/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigProducerServer is the server API for ConfigProducer service.
type ConfigProducerServer interface {
	Download(context.Context, *ConfigDownloadRequest) (*ConfigData, error)
}

// UnimplementedConfigProducerServer can be embedded to have forward compatible implementations.
type UnimplementedConfigProducerServer struct {
}

func (*UnimplementedConfigProducerServer) Download(ctx context.Context, req *ConfigDownloadRequest) (*ConfigData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}

func RegisterConfigProducerServer(s *grpc.Server, srv ConfigProducerServer) {
	s.RegisterService(&_ConfigProducer_serviceDesc, srv)
}

func _ConfigProducer_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigProducerServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.tcc.core.v1.ConfigProducer/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigProducerServer).Download(ctx, req.(*ConfigDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigProducer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.tcc.core.v1.ConfigProducer",
	HandlerType: (*ConfigProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _ConfigProducer_Download_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configproducer.proto",
}

func (m *ConfigDownloadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigDownloadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigDownloadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Configtype) > 0 {
		i -= len(m.Configtype)
		copy(dAtA[i:], m.Configtype)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Configtype)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfigData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfigData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cluster) > 0 {
		i -= len(m.Cluster)
		copy(dAtA[i:], m.Cluster)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Cluster)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Configtype) > 0 {
		i -= len(m.Configtype)
		copy(dAtA[i:], m.Configtype)
		i = encodeVarintConfigproducer(dAtA, i, uint64(len(m.Configtype)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfigproducer(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfigproducer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConfigDownloadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Configtype)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Configtype)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovConfigproducer(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfigproducer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfigproducer(x uint64) (n int) {
	return sovConfigproducer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConfigDownloadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigproducer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigDownloadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigDownloadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigproducer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfigproducer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configtype", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Configtype = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfigproducer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfigproducer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfigproducer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfigproducer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfigproducer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfigproducer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfigproducer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfigproducer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfigproducer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfigproducer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfigproducer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfigproducer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfigproducer   = fmt.Errorf("proto: integer overflow")
)
