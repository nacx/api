// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_settings.proto

package v1 // import "github.com/tetrateio/tetrate/api/tcc/core/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/envoyproxy/protoc-gen-validate/validate"
import duration "github.com/golang/protobuf/ptypes/duration"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientSettings_Sensitivity int32

const (
	ClientSettings_UNSET  ClientSettings_Sensitivity = 0
	ClientSettings_LOW    ClientSettings_Sensitivity = 1
	ClientSettings_MEDIUM ClientSettings_Sensitivity = 2
	ClientSettings_HIGH   ClientSettings_Sensitivity = 3
)

var ClientSettings_Sensitivity_name = map[int32]string{
	0: "UNSET",
	1: "LOW",
	2: "MEDIUM",
	3: "HIGH",
}
var ClientSettings_Sensitivity_value = map[string]int32{
	"UNSET":  0,
	"LOW":    1,
	"MEDIUM": 2,
	"HIGH":   3,
}

func (x ClientSettings_Sensitivity) String() string {
	return proto.EnumName(ClientSettings_Sensitivity_name, int32(x))
}
func (ClientSettings_Sensitivity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_client_settings_0c2d36455a9ad88a, []int{0, 0}
}

type ClientSettings struct {
	HttpRequestTimeout        *duration.Duration         `protobuf:"bytes,1,opt,name=http_request_timeout,json=httpRequestTimeout,proto3" json:"http_request_timeout,omitempty"`
	HttpRetries               *HTTPRetry                 `protobuf:"bytes,2,opt,name=http_retries,json=httpRetries,proto3" json:"http_retries,omitempty"`
	TcpConnectTimeout         *duration.Duration         `protobuf:"bytes,3,opt,name=tcp_connect_timeout,json=tcpConnectTimeout,proto3" json:"tcp_connect_timeout,omitempty"`
	TcpKeepalive              *wrappers.BoolValue        `protobuf:"bytes,4,opt,name=tcp_keepalive,json=tcpKeepalive,proto3" json:"tcp_keepalive,omitempty"`
	CircuitBreakerSensitivity ClientSettings_Sensitivity `protobuf:"varint,5,opt,name=circuit_breaker_sensitivity,json=circuitBreakerSensitivity,proto3,enum=tetrate.api.tcc.core.v1.ClientSettings_Sensitivity" json:"circuit_breaker_sensitivity,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}                   `json:"-"`
	XXX_unrecognized          []byte                     `json:"-"`
	XXX_sizecache             int32                      `json:"-"`
}

func (m *ClientSettings) Reset()         { *m = ClientSettings{} }
func (m *ClientSettings) String() string { return proto.CompactTextString(m) }
func (*ClientSettings) ProtoMessage()    {}
func (*ClientSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_settings_0c2d36455a9ad88a, []int{0}
}
func (m *ClientSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientSettings.Unmarshal(m, b)
}
func (m *ClientSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientSettings.Marshal(b, m, deterministic)
}
func (dst *ClientSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSettings.Merge(dst, src)
}
func (m *ClientSettings) XXX_Size() int {
	return xxx_messageInfo_ClientSettings.Size(m)
}
func (m *ClientSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSettings.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSettings proto.InternalMessageInfo

func (m *ClientSettings) GetHttpRequestTimeout() *duration.Duration {
	if m != nil {
		return m.HttpRequestTimeout
	}
	return nil
}

func (m *ClientSettings) GetHttpRetries() *HTTPRetry {
	if m != nil {
		return m.HttpRetries
	}
	return nil
}

func (m *ClientSettings) GetTcpConnectTimeout() *duration.Duration {
	if m != nil {
		return m.TcpConnectTimeout
	}
	return nil
}

func (m *ClientSettings) GetTcpKeepalive() *wrappers.BoolValue {
	if m != nil {
		return m.TcpKeepalive
	}
	return nil
}

func (m *ClientSettings) GetCircuitBreakerSensitivity() ClientSettings_Sensitivity {
	if m != nil {
		return m.CircuitBreakerSensitivity
	}
	return ClientSettings_UNSET
}

type HTTPRetry struct {
	Attempts             int32              `protobuf:"varint,1,opt,name=attempts,proto3" json:"attempts,omitempty"`
	PerTryTimeout        *duration.Duration `protobuf:"bytes,2,opt,name=per_try_timeout,json=perTryTimeout,proto3" json:"per_try_timeout,omitempty"`
	RetryOn              string             `protobuf:"bytes,3,opt,name=retry_on,json=retryOn,proto3" json:"retry_on,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *HTTPRetry) Reset()         { *m = HTTPRetry{} }
func (m *HTTPRetry) String() string { return proto.CompactTextString(m) }
func (*HTTPRetry) ProtoMessage()    {}
func (*HTTPRetry) Descriptor() ([]byte, []int) {
	return fileDescriptor_client_settings_0c2d36455a9ad88a, []int{1}
}
func (m *HTTPRetry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPRetry.Unmarshal(m, b)
}
func (m *HTTPRetry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPRetry.Marshal(b, m, deterministic)
}
func (dst *HTTPRetry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRetry.Merge(dst, src)
}
func (m *HTTPRetry) XXX_Size() int {
	return xxx_messageInfo_HTTPRetry.Size(m)
}
func (m *HTTPRetry) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRetry.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRetry proto.InternalMessageInfo

func (m *HTTPRetry) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *HTTPRetry) GetPerTryTimeout() *duration.Duration {
	if m != nil {
		return m.PerTryTimeout
	}
	return nil
}

func (m *HTTPRetry) GetRetryOn() string {
	if m != nil {
		return m.RetryOn
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientSettings)(nil), "tetrate.api.tcc.core.v1.ClientSettings")
	proto.RegisterType((*HTTPRetry)(nil), "tetrate.api.tcc.core.v1.HTTPRetry")
	proto.RegisterEnum("tetrate.api.tcc.core.v1.ClientSettings_Sensitivity", ClientSettings_Sensitivity_name, ClientSettings_Sensitivity_value)
}

func init() {
	proto.RegisterFile("client_settings.proto", fileDescriptor_client_settings_0c2d36455a9ad88a)
}

var fileDescriptor_client_settings_0c2d36455a9ad88a = []byte{
	// 1328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6f, 0x1b, 0xb7,
	0x12, 0x7f, 0xb2, 0xe2, 0x7c, 0xac, 0xf3, 0xe1, 0xa7, 0xf7, 0x1e, 0xe2, 0xf8, 0x05, 0x2f, 0xf3,
	0xdc, 0x02, 0x71, 0x5a, 0x99, 0x0b, 0x2b, 0x28, 0x0a, 0x04, 0x68, 0x01, 0x29, 0x76, 0x1b, 0x23,
	0x1f, 0x36, 0x24, 0x39, 0x2d, 0x92, 0x16, 0x02, 0xc5, 0x1d, 0x49, 0x84, 0xb9, 0xe4, 0x96, 0xe4,
	0x4a, 0x51, 0x4f, 0x39, 0x17, 0x05, 0x0a, 0xa8, 0x97, 0x16, 0xfd, 0x23, 0x02, 0xf4, 0x98, 0x4b,
	0x7b, 0xef, 0xb5, 0xa7, 0xa2, 0x40, 0x81, 0x1c, 0x0a, 0xf4, 0xbf, 0x28, 0xc8, 0xe5, 0x5a, 0x71,
	0x9c, 0x34, 0xb7, 0x9e, 0x76, 0x49, 0x0e, 0xe7, 0xf7, 0x9b, 0xdf, 0x0c, 0x67, 0xa2, 0xff, 0x30,
	0xc1, 0x51, 0xda, 0x9e, 0x41, 0x6b, 0xb9, 0x1c, 0x1a, 0x92, 0x69, 0x65, 0x55, 0xed, 0xa2, 0x45,
	0xab, 0xa9, 0x45, 0x42, 0x33, 0x4e, 0x2c, 0x63, 0x84, 0x29, 0x8d, 0x64, 0xbc, 0xb9, 0xfa, 0xbf,
	0xa1, 0x52, 0x43, 0x81, 0xb1, 0x37, 0xeb, 0xe7, 0x83, 0x38, 0xc9, 0x35, 0xb5, 0x5c, 0xc9, 0xe2,
	0xe2, 0xf1, 0xf3, 0x89, 0xa6, 0x59, 0x86, 0x3a, 0x38, 0x5e, 0xbd, 0x38, 0xa6, 0x82, 0x27, 0xd4,
	0x62, 0x5c, 0xfe, 0x84, 0x83, 0xba, 0xff, 0xb0, 0x8d, 0x21, 0xca, 0x0d, 0x33, 0xa1, 0xc3, 0x21,
	0xea, 0x58, 0x65, 0xce, 0xb3, 0x89, 0xa9, 0x94, 0xca, 0x7a, 0x94, 0xe0, 0x66, 0xed, 0x97, 0xa5,
	0xe8, 0xfc, 0x4d, 0xcf, 0xbc, 0x13, 0x88, 0xd7, 0x44, 0xf4, 0xef, 0x91, 0xb5, 0x59, 0x4f, 0xe3,
	0x67, 0x39, 0x1a, 0xdb, 0xb3, 0x3c, 0x45, 0x95, 0xdb, 0x95, 0x0a, 0x54, 0xd6, 0x97, 0x1a, 0x97,
	0x48, 0x41, 0x8c, 0x94, 0xc4, 0xc8, 0x56, 0x20, 0xde, 0xba, 0x32, 0x6b, 0x5e, 0x6e, 0xac, 0x76,
	0x0b, 0x73, 0x18, 0x28, 0x0d, 0xb7, 0xba, 0xdd, 0x3d, 0x08, 0x7e, 0x0c, 0x69, 0xd7, 0x9c, 0xdf,
	0x76, 0xb1, 0x0c, 0x66, 0xb5, 0x83, 0xe8, 0x6c, 0x40, 0xb3, 0x9a, 0xa3, 0x59, 0x59, 0xf0, 0x28,
	0x6b, 0xe4, 0x15, 0xba, 0x11, 0xe7, 0xb2, 0x8d, 0x56, 0x4f, 0x5b, 0x6f, 0xce, 0x9a, 0xff, 0x6f,
	0x5c, 0xf1, 0xff, 0x90, 0x29, 0xc1, 0xd9, 0xf4, 0x65, 0x98, 0x4b, 0x05, 0xa6, 0x77, 0x5e, 0x1b,
	0x46, 0xff, 0xb2, 0x2c, 0xeb, 0x31, 0x25, 0x25, 0xb2, 0x79, 0x64, 0xd5, 0xd7, 0x45, 0x76, 0x79,
	0xd6, 0xbc, 0xd4, 0xb8, 0xd8, 0xbd, 0xb9, 0x07, 0xe1, 0x2a, 0x57, 0x12, 0xc2, 0x6d, 0xd2, 0xfe,
	0xa7, 0x65, 0xd9, 0xcd, 0x62, 0xbf, 0x8c, 0xea, 0x8b, 0x4a, 0x74, 0xce, 0x21, 0x1d, 0x20, 0x66,
	0x54, 0xf0, 0x31, 0xae, 0x9c, 0xf0, 0x18, 0xab, 0xc7, 0x30, 0x5a, 0x4a, 0x89, 0xfb, 0x54, 0xe4,
	0xd8, 0xda, 0x99, 0x35, 0x3f, 0x68, 0x6c, 0xed, 0x0c, 0xc0, 0xa0, 0x05, 0x3b, 0x42, 0xe9, 0x7f,
	0x3a, 0xbb, 0xbd, 0xdb, 0xdb, 0xdb, 0x7b, 0xcd, 0x3b, 0x3b, 0xf7, 0xb7, 0xc1, 0xa1, 0x8e, 0x10,
	0x8c, 0x62, 0x07, 0xce, 0x46, 0x01, 0x4a, 0xda, 0x17, 0x08, 0x8e, 0xd9, 0xed, 0x12, 0xca, 0x90,
	0xf6, 0x59, 0xcb, 0xb2, 0xc3, 0x75, 0xed, 0xe7, 0x4a, 0xf4, 0x5f, 0xc6, 0x35, 0xcb, 0xb9, 0xed,
	0xf5, 0x35, 0xd2, 0x03, 0xd4, 0x3d, 0x83, 0xd2, 0x70, 0xcb, 0xc7, 0xdc, 0x4e, 0x57, 0x16, 0xa1,
	0xb2, 0x7e, 0xbe, 0x71, 0xfd, 0x95, 0x92, 0x1f, 0xad, 0x0f, 0xd2, 0x99, 0x5f, 0x6d, 0xf5, 0x66,
	0xcd, 0x4f, 0x1a, 0x0f, 0x00, 0xba, 0x8e, 0xd5, 0x7c, 0x1f, 0x04, 0x8e, 0x51, 0x18, 0x98, 0x70,
	0x21, 0xc0, 0x6a, 0x2a, 0x8d, 0xa0, 0x16, 0x1d, 0x61, 0x93, 0x21, 0xe3, 0x03, 0xce, 0x60, 0xec,
	0x62, 0x36, 0xa0, 0x06, 0x90, 0xa0, 0xb1, 0xa0, 0x73, 0x81, 0xa0, 0x72, 0x2b, 0x38, 0x6a, 0x48,
	0xd0, 0x16, 0x1a, 0x93, 0xf6, 0xa5, 0x40, 0xbc, 0x55, 0xf0, 0x7e, 0x0e, 0x7b, 0xed, 0xdd, 0x68,
	0xe9, 0xb9, 0x65, 0xed, 0x4c, 0xb4, 0xb8, 0x7f, 0xaf, 0xb3, 0xdd, 0x5d, 0xfe, 0x47, 0xed, 0x54,
	0x54, 0xbd, 0xb3, 0xfb, 0xd1, 0x72, 0xa5, 0x16, 0x45, 0x27, 0xef, 0x6e, 0x6f, 0xed, 0xec, 0xdf,
	0x5d, 0x5e, 0xa8, 0x9d, 0x8e, 0x4e, 0xdc, 0xda, 0xf9, 0xf0, 0xd6, 0x72, 0xf5, 0xc6, 0xef, 0x8b,
	0xb3, 0xe6, 0xb3, 0xc5, 0xe8, 0xb7, 0xc5, 0xb7, 0x2e, 0x14, 0xa1, 0x41, 0x19, 0x5b, 0xe3, 0xa7,
	0xc5, 0xa6, 0x63, 0x3c, 0xc2, 0x32, 0xbb, 0xa6, 0x0e, 0xa1, 0x32, 0xeb, 0x10, 0xa8, 0x40, 0xd0,
	0xd0, 0x00, 0x5a, 0x46, 0xc0, 0x8e, 0xa8, 0x75, 0x65, 0x61, 0xf2, 0xd4, 0xed, 0x4d, 0xa8, 0xf4,
	0x99, 0x31, 0x45, 0x82, 0x86, 0x34, 0xd7, 0x09, 0xd0, 0x21, 0xe5, 0xd2, 0x58, 0x18, 0x50, 0x2e,
	0x72, 0x5d, 0x84, 0x6d, 0x47, 0xc8, 0x5d, 0xa8, 0x19, 0xca, 0x04, 0x25, 0xe3, 0x68, 0x88, 0x93,
	0xd1, 0x20, 0x68, 0x95, 0x0f, 0x47, 0x62, 0x7a, 0x54, 0xb8, 0x8c, 0x23, 0x2b, 0x2e, 0x72, 0x63,
	0xb9, 0x82, 0x31, 0xd7, 0x36, 0xa7, 0x02, 0x0c, 0xea, 0x31, 0x67, 0x58, 0xf7, 0x32, 0x72, 0xe9,
	0xeb, 0xd5, 0xab, 0x69, 0xea, 0x05, 0xbf, 0xa6, 0x13, 0x57, 0xba, 0x70, 0xea, 0xfe, 0x7d, 0x50,
	0x18, 0xf2, 0x31, 0x4a, 0x90, 0x34, 0x45, 0x93, 0x51, 0x16, 0xb6, 0x5d, 0xcc, 0x87, 0x5b, 0x57,
	0xcd, 0x11, 0x62, 0x75, 0x98, 0x20, 0x30, 0x95, 0xf6, 0xb9, 0x44, 0x6f, 0x58, 0xf4, 0xba, 0x32,
	0x99, 0x98, 0x80, 0x46, 0xc1, 0x69, 0x9f, 0x0b, 0x97, 0xfb, 0xb2, 0x03, 0xc2, 0x84, 0xdb, 0x91,
	0x37, 0x7f, 0x81, 0x6b, 0x3c, 0xcf, 0x78, 0x89, 0xfc, 0x3c, 0x9a, 0x8f, 0x56, 0xab, 0x24, 0x67,
	0x08, 0x54, 0x42, 0x9e, 0xb9, 0xe6, 0x96, 0xfc, 0x85, 0x93, 0x0c, 0xe7, 0x3a, 0xda, 0xf2, 0x9c,
	0x40, 0xc8, 0xa4, 0x39, 0xa4, 0xcb, 0x72, 0x63, 0x55, 0xca, 0x3f, 0x3f, 0xee, 0xcc, 0xcc, 0xbd,
	0x85, 0xa2, 0xed, 0x23, 0x64, 0x9a, 0x8f, 0x83, 0xf8, 0x47, 0xc4, 0x01, 0x4e, 0x90, 0x14, 0x56,
	0x23, 0x3a, 0xf6, 0x1c, 0xf1, 0x51, 0xa6, 0xb4, 0xed, 0xaa, 0x32, 0x76, 0xb8, 0x4a, 0xae, 0x02,
	0x81, 0x2d, 0xe5, 0xfe, 0x8d, 0x2a, 0x8c, 0x53, 0x7a, 0x80, 0xb0, 0xc7, 0x85, 0xb2, 0x40, 0xb3,
	0xcc, 0xe5, 0xb7, 0x20, 0x17, 0x58, 0x15, 0x6d, 0x19, 0x94, 0x74, 0x27, 0x2f, 0x42, 0x32, 0x25,
	0x19, 0x6a, 0x89, 0x89, 0x17, 0xd5, 0xb5, 0x57, 0x81, 0xf4, 0xc0, 0x79, 0xe7, 0xbe, 0xcc, 0xa8,
	0x10, 0xa0, 0xec, 0x08, 0xf5, 0xfc, 0x8e, 0x21, 0x6b, 0x4f, 0x4f, 0x46, 0x67, 0x0e, 0xfb, 0x65,
	0xed, 0xd7, 0x4a, 0x74, 0x9a, 0x5a, 0x8b, 0x69, 0x66, 0x8d, 0x6f, 0xe6, 0x8b, 0xad, 0x1f, 0x2a,
	0xb3, 0xe6, 0xf7, 0x95, 0xc6, 0x93, 0xca, 0xbd, 0x3c, 0xed, 0xa3, 0x76, 0xd5, 0x15, 0xaa, 0xfd,
	0x48, 0xa9, 0x84, 0x6e, 0xea, 0xeb, 0x13, 0xb8, 0xb4, 0xa8, 0xc7, 0xd4, 0x49, 0x64, 0x27, 0xe8,
	0x4f, 0x8b, 0x1b, 0xa5, 0x6e, 0xee, 0xf5, 0xea, 0x94, 0x3b, 0xb2, 0x34, 0xb7, 0x2a, 0xa5, 0x96,
	0x33, 0x2a, 0xc4, 0x14, 0xd6, 0x1b, 0xef, 0xa4, 0xe6, 0xed, 0x6b, 0x04, 0x9a, 0xcc, 0x8b, 0x2f,
	0x8f, 0x81, 0x06, 0x7a, 0x98, 0x84, 0x7c, 0x9a, 0xb2, 0xe3, 0x85, 0xc1, 0x11, 0xda, 0x2b, 0x79,
	0xfa, 0xc7, 0x8f, 0xd5, 0x13, 0xab, 0x0b, 0xeb, 0x95, 0xf6, 0x61, 0x44, 0xb5, 0xef, 0x2a, 0xd1,
	0x85, 0x0c, 0x75, 0xcf, 0xea, 0xe9, 0x61, 0x63, 0x5f, 0x78, 0x5d, 0x63, 0xff, 0x78, 0xd6, 0xdc,
	0x6f, 0x74, 0xca, 0x91, 0xe5, 0x0a, 0x49, 0xfb, 0x79, 0x12, 0xbc, 0xbe, 0x5c, 0x85, 0x81, 0xd2,
	0x29, 0xb5, 0x37, 0x60, 0x73, 0x14, 0x6f, 0xa6, 0xf1, 0xa6, 0x89, 0x37, 0x53, 0x43, 0xe0, 0xee,
	0x7e, 0xa7, 0x0b, 0xad, 0x6d, 0x78, 0xff, 0x3d, 0xb7, 0x6c, 0x9f, 0xcb, 0x50, 0x77, 0xf5, 0xb4,
	0x1c, 0x08, 0x4f, 0xaa, 0xd1, 0x69, 0xef, 0xba, 0xa7, 0xa4, 0x9f, 0x37, 0x67, 0x5a, 0x5f, 0x57,
	0x67, 0xcd, 0xaf, 0xaa, 0x8d, 0x2f, 0xab, 0x00, 0x9d, 0xf0, 0x90, 0x4c, 0xf1, 0xba, 0x94, 0x4c,
	0x78, 0x51, 0x0d, 0xb9, 0x4c, 0x50, 0xc3, 0x64, 0xc4, 0xd9, 0x28, 0x30, 0xb3, 0xf4, 0x00, 0x0d,
	0x64, 0x82, 0xba, 0x12, 0xdf, 0x95, 0x08, 0x4a, 0x43, 0xaa, 0x34, 0x16, 0x23, 0xd0, 0xb9, 0x60,
	0x54, 0xba, 0x34, 0xcc, 0x1f, 0x67, 0x6e, 0x5c, 0xa1, 0x50, 0x78, 0xf6, 0xf8, 0x9b, 0xfa, 0xb3,
	0xc7, 0xdf, 0x42, 0x82, 0x82, 0xa7, 0xdc, 0xa9, 0x2c, 0xb8, 0x8b, 0xa7, 0x83, 0xc5, 0xab, 0x7e,
	0x68, 0xf2, 0xcc, 0xd5, 0x31, 0x26, 0x87, 0xce, 0x3e, 0x5d, 0x77, 0xca, 0x9b, 0x1b, 0x71, 0x3c,
	0x99, 0x4c, 0x08, 0xca, 0xb1, 0x9a, 0x66, 0x5a, 0x3d, 0x9a, 0x12, 0xae, 0xe2, 0x44, 0x31, 0x13,
	0xfb, 0xad, 0xd8, 0x35, 0x29, 0x63, 0x63, 0xa6, 0xe4, 0x80, 0x0f, 0x83, 0xb6, 0xb1, 0x1f, 0xeb,
	0x03, 0x2e, 0x2c, 0x6a, 0x13, 0x6b, 0x95, 0x5b, 0xd4, 0x61, 0xf9, 0xc6, 0xa3, 0x0d, 0x7f, 0x6f,
	0xc3, 0x87, 0xb4, 0xa1, 0xe4, 0x35, 0xa0, 0x32, 0x81, 0x87, 0x23, 0xd4, 0xf8, 0xb7, 0x20, 0x0e,
	0x75, 0xc6, 0x3c, 0xec, 0xa0, 0x54, 0x2f, 0x41, 0x4b, 0xb9, 0x30, 0xa4, 0x7d, 0xca, 0x5b, 0xec,
	0xca, 0x16, 0x79, 0x50, 0x1f, 0x72, 0x3b, 0xca, 0xfb, 0x84, 0xa9, 0x34, 0x0e, 0xb3, 0x91, 0xab,
	0xf2, 0x2f, 0xa6, 0x19, 0x8f, 0x2d, 0x63, 0xb1, 0x9b, 0x92, 0xf1, 0x78, 0xb3, 0x7f, 0xd2, 0x57,
	0xd7, 0xf5, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x37, 0x06, 0xde, 0x66, 0x09, 0x0a, 0x00, 0x00,
}
