// Copyright (c) Tetrate, Inc 2019 All Rights Reserved.

syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

import "permissions.proto";
import "routing_info.proto";

service PhysicalResourceModel {
  option (tetrate.api.q.rbac.v1.default_requires) = {
    permissions: READ
  };

  // clang-format off
  rpc CreateCluster(CreateClusterRequest) returns (Cluster) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters"
      body: "*"
    };
  };

  rpc UpdateCluster(Cluster) returns (Cluster) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
      body: "*"
    };
  };

  rpc GetCluster(GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
    };
  };

  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters"
    };
  }

  rpc DeleteCluster(DeleteClusterRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
    };
  };

  rpc BulkLoadCluster(BulkLoadClusterRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}/bulkloadcluster"
      body: "*"
    };
  };

  rpc BatchGetClusters(BatchGetClustersRequest) returns (BatchGetClustersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}:batchGetClusters"
    };
  };

  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces"
      body: "*"
    };
  };

  rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
    };
  };

  rpc UpdateNamespace(Namespace) returns (Namespace) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
      body: "*"
    };
  };

  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces"
    };
  }

  rpc DeleteNamespace(DeleteNamespaceRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
    };
  };

  rpc CreateDeployment(CreateDeploymentRequest) returns (Deployment) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments"
      body: "*"
    };
  };

  rpc GetDeployment(GetDeploymentRequest) returns (Deployment) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
    };
  };

  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments"
    };
  };

  rpc UpdateDeployment(Deployment) returns (Deployment) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
      body: "*"
    };
  };

  rpc DeleteDeployment(DeleteDeploymentRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
    };
  };

  rpc CreateEndpoint(CreateEndpointRequest) returns (Endpoint) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: CREATE
    };
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints"
      body: "*"
    };
  };

  rpc GetEndpoint(GetEndpointRequest) returns (Endpoint) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
    };
  };

  rpc ListEndpoints(ListEndpointsRequest) returns (ListEndpointsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints"
    };
  };

  rpc UpdateEndpoint(Endpoint) returns (Endpoint) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
      body: "*"
    };
  };

  rpc DeleteEndpoint(DeleteEndpointRequest) returns (google.protobuf.Empty) {
    option (tetrate.api.q.rbac.v1.requires) = {
      permissions: DELETE
    };
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
    };
  };
  // clang-format on
}

message Cluster {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
  string description = 5;
  Registry registry = 6 [(validate.rules).enum.defined_only = true];

  // Information like datacenter where the cluster is present.
  string country = 7;
  string datacenter = 8;
  string availability_zone = 9;
  map<string, string> labels = 10;
  string etag = 11 [(validate.rules).string.min_len = 1];
  string kubernetes_cluster_domain = 12;
}

message CreateClusterRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  // if present, this will be used as the id for the created object.
  string id = 4;

  string description = 5;
  Registry registry = 6 [(validate.rules).enum.defined_only = true];

  // Information like datacenter where the cluster is present.
  string country = 7;
  string datacenter = 8;
  string availability_zone = 9;
  map<string, string> labels = 10;
  string kubernetes_cluster_domain = 12;
}

message GetClusterRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message ListClustersRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message DeleteClusterRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string id = 4 [(validate.rules).string.min_len = 1];
}

message Namespace {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
  string description = 6;
  string etag = 7 [(validate.rules).string.min_len = 1];
  map<string, string> labels = 8;
}

message CreateNamespaceRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  // if present, this will be used as the id for the created object.
  string id = 5;

  string description = 6;
  map<string, string> labels = 7;
}

message GetNamespaceRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message ListNamespacesRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message DeleteNamespaceRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string id = 5 [(validate.rules).string.min_len = 1];
}

message Deployment {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string id = 6 [(validate.rules).string.min_len = 1];
  string hostname = 7 [(validate.rules).string.min_len = 1];
  map<string, string> labels = 8;
  repeated Port ports = 9 [(validate.rules).repeated = {min_items: 1}];
  reserved 10;
  string etag = 11 [(validate.rules).string.min_len = 1];
  string kubernetes_service_ip = 12;
  // For kubernetes services of type load balancer, this field contains the list of lb hostnames or
  // IPs assigned to the service. For services of type nodePort, this field contains the IP
  // addresses of the nodes in the cluster.
  repeated string kubernetes_external_addresses = 13;
}

message CreateDeploymentRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  // if present, this will be used as the id for the created object
  string id = 6;

  string hostname = 7 [(validate.rules).string.min_len = 1];
  map<string, string> labels = 8;
  repeated Port ports = 9 [(validate.rules).repeated .min_items = 1];
  reserved 10;
  string kubernetes_service_ip = 12;
  // For kubernetes services of type load balancer, this field contains the list of lb hostnames or
  // IPs assigned to the service. For services of type nodePort, this field contains the IP
  // addresses of the nodes in the cluster.
  repeated string kubernetes_external_addresses = 13;
}

message GetDeploymentRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string id = 6 [(validate.rules).string.min_len = 1];
}

message ListDeploymentsRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
}

message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
}

message DeleteDeploymentRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string id = 6 [(validate.rules).string.min_len = 1];
}

// Endpoint defines a network address (IP or hostname) associated with the service.
message Endpoint {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string deployment = 6 [(validate.rules).string.min_len = 1];
  string id = 7 [(validate.rules).string.min_len = 1];

  // Address associated with the network endpoint without the port. Domain names can be used and
  // must be fully-qualified without wildcards.
  string address = 8 [(validate.rules).string.min_len = 1];

  // Set of inbound traffic ports associated with the endpoint. The ports must be associated with a
  // port name that was declared as part of the deployment.
  map<string, uint32> ports = 9 [(validate.rules).map.min_pairs = 1];

  // One or more labels associated with the endpoint.
  map<string, string> labels = 10;

  // The locality associated with the endpoint, in the form country/region/zone. A locality
  // corresponds to a failure domain (country/region/zone).
  string locality = 11;

  // The load balancing weight associated with the endpoint. Endpoints with higher weights in a pool
  // will receive proportionally higher traffic.
  uint32 weight = 12;

  string etag = 13 [(validate.rules).string.min_len = 1];
}

message CreateEndpointRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string deployment = 6 [(validate.rules).string.min_len = 1];
  // if present, this will be used as the id for the created object.
  string id = 7;

  // Address associated with the network endpoint without the port. Domain names can be used and
  // must be fully-qualified without wildcards.
  string address = 8 [(validate.rules).string.min_len = 1];

  // Set of inbound traffic ports associated with the endpoint. The ports must be associated with a
  // port name that was declared as part of the deployment.
  map<string, uint32> ports = 9 [(validate.rules).map.min_pairs = 1];

  // One or more labels associated with the endpoint.
  map<string, string> labels = 10;

  // The locality associated with the endpoint, in the form country/region/zone. A locality
  // corresponds to a failure domain (country/region/zone).
  string locality = 11;

  // The load balancing weight associated with the endpoint. Endpoints with higher weights in a pool
  // will receive proportionally higher traffic.
  uint32 weight = 12;
}

message GetEndpointRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string deployment = 6 [(validate.rules).string.min_len = 1];
  string id = 7 [(validate.rules).string.min_len = 1];
}

message ListEndpointsRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string deployment = 6 [(validate.rules).string.min_len = 1];
}

message ListEndpointsResponse {
  repeated Endpoint endpoints = 1;
}

message DeleteEndpointRequest {
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  string cluster = 4 [(validate.rules).string.min_len = 1];
  string namespace = 5 [(validate.rules).string.min_len = 1];
  string deployment = 6 [(validate.rules).string.min_len = 1];
  string id = 7 [(validate.rules).string.min_len = 1];
}

// Cluster, Namespaces, deployments, and endpoints in this request will replace the existing
// contents of a cluster.
message BulkLoadClusterRequest {
  string parent = 1 [deprecated = true];
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
  repeated ClusterWithNamespaces clusters = 4 [deprecated = true];

  ClusterWithNamespaces cluster_with_namespaces = 5 [(validate.rules).message.required = true];
  string id = 6 [(validate.rules).string.min_len = 1];
  string name = 7;

  message ClusterWithNamespaces {
    Cluster cluster = 1 [(validate.rules).message.required = true];
    repeated NamespaceWithDeployments namespaces = 2;
  };

  message NamespaceWithDeployments {
    Namespace namespace = 1 [(validate.rules).message.required = true];
    repeated DeploymentWithEndpoints deployments = 2;
  };

  message DeploymentWithEndpoints {
    Deployment deployment = 1 [(validate.rules).message.required = true];
    repeated Endpoint endpoints = 2;
  };
}

message BatchGetClustersRequest {
  string parent = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string environment = 3 [(validate.rules).string.min_len = 1];
}

message BatchGetClustersResponse {
  message Deployments {
    Deployment deployment = 1 [(validate.rules).message.required = true];
    repeated Endpoint endpoints = 2;
  };

  message Namespaces {
    Namespace namespace = 1 [(validate.rules).message.required = true];
    repeated Deployments deployments = 2;
  };

  message Clusters {
    Cluster cluster = 1 [(validate.rules).message.required = true];
    repeated Namespaces namespaces = 2;
  };

  repeated Clusters clusters = 1;
}
