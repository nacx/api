syntax = "proto3";

package tetrate.api.tcc.core.v1;
option go_package = "github.com/tetrateio/tetrate/api/tcc/core/v1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "routing_info.proto";

service PhysicalResourceModel {
  rpc CreateCluster(CreateClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters"
      body: "*"
    };
  };

  rpc UpdateCluster(Cluster) returns (Cluster) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
      body: "*"
    };
  };

  rpc GetCluster(GetClusterRequest) returns (Cluster) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
    };
  };

  rpc ListClusters(ListClustersRequest) returns (ListClustersResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters"
    };
  }

  rpc DeleteCluster(DeleteClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{id}"
    };
  };


  rpc BulkUpdateCluster(BulkUpdateClusterRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/bulkupdate"
      body: "*"
    };
  };

  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces"
      body: "*"
    };
  };

  rpc GetNamespace(GetNamespaceRequest) returns (Namespace) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
    };
  };

  rpc UpdateNamespace(Namespace) returns (Namespace) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
      body: "*"
    };
  };

  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces"
    };
  }

  rpc DeleteNamespace(DeleteNamespaceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{id}"
    };
  };

  rpc CreateDeployment(CreateDeploymentRequest) returns (Deployment) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments"
      body: "*"
    };
  };

  rpc GetDeployment(GetDeploymentRequest) returns (Deployment) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
    };
  };

  rpc ListDeployments(ListDeploymentsRequest) returns (ListDeploymentsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments"
    };
  };

  rpc UpdateDeployment(Deployment) returns (Deployment) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
      body: "*"
    };
  };

  rpc DeleteDeployment(DeleteDeploymentRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{id}"
    };
  };

  rpc CreateEndpoint(CreateEndpointRequest) returns (Endpoint) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints"
      body: "*"
    };
  };

  rpc GetEndpoint(GetEndpointRequest) returns (Endpoint) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
    };
  };

  rpc ListEndpoints(ListEndpointsRequest) returns (ListEndpointsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints"
    };
  };

  rpc UpdateEndpoint(Endpoint) returns (Endpoint) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
      body: "*"
    };
  };

  rpc DeleteEndpoint(DeleteEndpointRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant}/environments/{environment}/clusters/{cluster}/namespaces/{namespace}/deployments/{deployment}/endpoints/{id}"
    };
  };
}

enum Registry {
  UNKNOWN = 0;
  KUBERNETES = 1;
  VM = 2;
}

message Cluster {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
  string description = 5;
  Registry registry = 6;

  // Information like datacenter where the cluster is present
  map<string, string> labels = 7;
}

message CreateClusterRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  Cluster cluster = 5;
}

message GetClusterRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}

message ListClustersRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
}

message ListClustersResponse {
  repeated Cluster clusters = 1;
}

message DeleteClusterRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string id = 4;
}

message Namespace {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string id = 5;
  string description = 6;
  string etag = 7;
}

message CreateNamespaceRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  string cluster = 5;
  Namespace namespace = 6;
}

message GetNamespaceRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string id = 5;
}

message ListNamespacesRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message DeleteNamespaceRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string id = 5;
}

message Deployment {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string id = 6;
  string hostname = 7;
  map<string, string> labels = 8;
  repeated Port ports = 9;
  // information specific to F5 load balancers if deployment refers to F5
  string lb_management_ip = 10;
}

message CreateDeploymentRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  string cluster = 5;
  string namespace = 6;
  Deployment deployment = 7;
}

message GetDeploymentRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string id = 6;
}

message ListDeploymentsRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
}

message ListDeploymentsResponse {
  repeated Deployment deployments = 1;
}

message DeleteDeploymentRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string id = 6;
}

// Endpoint defines a network address (IP or hostname) associated with
// the service.
message Endpoint {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string deployment = 6;
  string id = 7;

  // Address associated with the network endpoint without the port.
  // Domain names can be used and must be fully-qualified without
  // wildcards.
  string address = 8;

  // Set of inbound traffic ports associated with the endpoint. The
  // ports must be associated with a port number that was declared
  // as part of the service.
  map<uint32, uint32> ports = 9;

  // One or more labels associated with the endpoint.
  map<string, string> labels = 10;

  // The locality associated with the endpoint, in the form
  // country/region/zone. A locality corresponds to a failure domain
  // (country/region/zone).
  string locality = 11;

  // The load balancing weight associated with the endpoint. Endpoints
  // with higher weights in a pool will receive proportionally higher
  // traffic.
  uint32 weight = 12;
}

message CreateEndpointRequest {
  string parent = 1;
  // if present, this will be used as the id for the created object
  string id = 2;
  string tenant = 3;
  string environment = 4;
  string cluster = 5;
  string namespace = 6;
  string deployment = 7;
  Endpoint endpoint = 8;
}

message GetEndpointRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string deployment = 6;
  string id = 7;
}

message ListEndpointsRequest {
  string parent = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string deployment = 6;
}

message ListEndpointsResponse {
  repeated Endpoint endpoints = 1;
}

message DeleteEndpointRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  string namespace = 5;
  string deployment = 6;
  string id = 7;
}

// Namespaces, deployments, and endpoints in this request will replace the existing contents of a cluster
message BulkUpdateClusterRequest {
  string name = 1;
  string tenant = 2;
  string environment = 3;
  string cluster = 4;
  repeated Namespace namespaces = 5;
  repeated Deployment deployments = 6;
  repeated Endpoint endpoints = 7;
}
