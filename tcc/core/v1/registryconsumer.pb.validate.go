// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: registryconsumer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on RegistryUpdateResourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegistryUpdateResourcesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return RegistryUpdateResourcesRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEnvironment()) < 1 {
		return RegistryUpdateResourcesRequestValidationError{
			field:  "Environment",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCluster()) < 1 {
		return RegistryUpdateResourcesRequestValidationError{
			field:  "Cluster",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _RegistryUpdateResourcesRequest_Registrytype_InLookup[m.GetRegistrytype()]; !ok {
		return RegistryUpdateResourcesRequestValidationError{
			field:  "Registrytype",
			reason: "value must be in list [k8s vm]",
		}
	}

	if utf8.RuneCountInString(m.GetPayload()) < 1 {
		return RegistryUpdateResourcesRequestValidationError{
			field:  "Payload",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// RegistryUpdateResourcesRequestValidationError is the validation error
// returned by RegistryUpdateResourcesRequest.Validate if the designated
// constraints aren't met.
type RegistryUpdateResourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryUpdateResourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryUpdateResourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryUpdateResourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryUpdateResourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryUpdateResourcesRequestValidationError) ErrorName() string {
	return "RegistryUpdateResourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryUpdateResourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryUpdateResourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryUpdateResourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryUpdateResourcesRequestValidationError{}

var _RegistryUpdateResourcesRequest_Registrytype_InLookup = map[string]struct{}{
	"k8s": {},
	"vm":  {},
}

// Validate checks the field values on RegistryConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegistryConsumerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	return nil
}

// RegistryConsumerResponseValidationError is the validation error returned by
// RegistryConsumerResponse.Validate if the designated constraints aren't met.
type RegistryConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryConsumerResponseValidationError) ErrorName() string {
	return "RegistryConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegistryConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryConsumerResponseValidationError{}
