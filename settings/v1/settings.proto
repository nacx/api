// Copyright (c) Tetrate, Inc 2020 All Rights Reserved.

syntax = "proto3";

package tetrateio.api.settings.v1;
option go_package = "github.com/tetrateio/api/settings/v1;settingsv1";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

import "q/rbac/v1/permissions.proto";
import "q/rbac/v1/rbac.proto";

// Settings Service
//
// The settings service provides access to the settings.
// Currently support system settings. Other settings will be added in the future.
service SettingsService {
  // Get settings return settings with specified id for specific tenant.
  rpc GetSettings(GetSettingsRequest) returns (Settings) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: READ
    };
    option (google.api.http).get = "/v1/tenants/{tenant}/settings/{id}";
  };

  // Set settings set settings with specified id for specific tenant.
  rpc SetSettings(Settings) returns (Settings) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: WRITE
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/settings/{id}"
      body: "*"
    };
  }

  rpc GetSettingsPolicy(GetSettingsPolicyRequest) returns (tetrateio.api.q.rbac.v1.Policy) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      get: "/v1/tenants/{tenant}/settings/{id}/policy"
    };
  };

  rpc SetSettingsPolicy(SetSettingsPolicyRequest) returns (google.protobuf.Empty) {
    option (tetrateio.api.q.rbac.v1.requires) = {
      permissions: SET_POLICY
    };
    option (google.api.http) = {
      put: "/v1/tenants/{tenant}/settings/{id}/policy"
      body: "policy"
    };
  };
}

message GetSettingsRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string = {in: ["system"]}];
}

// Settings consisted of SMTP settings and another settings to be added in the future.
message Settings {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string = {in: ["system"]}];
  // Etag to guard concurrent modifications to the settings.
  string etag = 4;

  // Available settings. This corresponds to tab in settings page.
  // Note that message type in oneof must match with id in the request.
  // For example, SystemSettings only valid for id "system".
  oneof settings {
    // System Settings.
    SystemSettings system_settings = 5;
  }
}

// System settings consisted of SMTP settings and another system settings to be added in the future.
message SystemSettings {
  SMTPSettings smtp_settings = 1;
}

// SMTPSettings
//
// Settings for SMTP client.
message SMTPSettings {
  // SMTP host.
  string host = 1 [(validate.rules).string.min_len = 1];
  // SMTP port.
  uint32 port = 2 [(validate.rules).uint32.gte = 0];
  // SMTP Username.
  string username = 3 [(validate.rules).string.min_len = 1];
  // SMTP Password.
  string password = 4 [(validate.rules).string.min_len = 1];
  // Use TLS or not. Default to false.
  bool use_tls = 5;
  // Authentication methods. Default to PLAIN
  SMTPAuthentication authentication = 6 [(validate.rules).enum.defined_only = true];
  // From email address.
  string from_address = 7 [(validate.rules).string.min_len = 1];
}

// Supported SMTP Authentication.
enum SMTPAuthentication {
  PLAIN = 0;
  LOGIN = 1;
  CRAM_MD5 = 2;
}

message GetSettingsPolicyRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string = {in: ["system"]}];
}

message SetSettingsPolicyRequest {
  // Internal use only. Auto populated field.
  string name = 1;
  string tenant = 2 [(validate.rules).string.min_len = 1];
  string id = 3 [(validate.rules).string = {in: ["system"]}];
  tetrateio.api.q.rbac.v1.Policy policy = 4 [(validate.rules).message.required = true];
}
