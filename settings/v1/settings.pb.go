// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings/v1/settings.proto

package settingsv1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	v1 "github.com/tetrateio/api/q/rbac/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Supported SMTP Authentication.
type SMTPAuthentication int32

const (
	SMTPAuthentication_PLAIN    SMTPAuthentication = 0
	SMTPAuthentication_LOGIN    SMTPAuthentication = 1
	SMTPAuthentication_CRAM_MD5 SMTPAuthentication = 2
)

var SMTPAuthentication_name = map[int32]string{
	0: "PLAIN",
	1: "LOGIN",
	2: "CRAM_MD5",
}

var SMTPAuthentication_value = map[string]int32{
	"PLAIN":    0,
	"LOGIN":    1,
	"CRAM_MD5": 2,
}

func (x SMTPAuthentication) String() string {
	return proto.EnumName(SMTPAuthentication_name, int32(x))
}

func (SMTPAuthentication) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{0}
}

type GetSettingsRequest struct {
	// Internal use only. Auto populated field.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSettingsRequest) Reset()         { *m = GetSettingsRequest{} }
func (m *GetSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSettingsRequest) ProtoMessage()    {}
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{0}
}
func (m *GetSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSettingsRequest.Merge(m, src)
}
func (m *GetSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSettingsRequest proto.InternalMessageInfo

func (m *GetSettingsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSettingsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *GetSettingsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Settings consisted of SMTP settings and another settings to be added in the future.
type Settings struct {
	// Internal use only. Auto populated field.
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id     string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Etag to guard concurrent modifications to the settings.
	Etag string `protobuf:"bytes,4,opt,name=etag,proto3" json:"etag,omitempty"`
	// Available settings. This corresponds to tab in settings page.
	// Note that message type in oneof must match with id in the request.
	// For example, SystemSettings only valid for id "system".
	//
	// Types that are valid to be assigned to Settings:
	//	*Settings_SystemSettings
	Settings             isSettings_Settings `protobuf_oneof:"settings"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Settings) Reset()         { *m = Settings{} }
func (m *Settings) String() string { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()    {}
func (*Settings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{1}
}
func (m *Settings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Settings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Settings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Settings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Settings.Merge(m, src)
}
func (m *Settings) XXX_Size() int {
	return m.Size()
}
func (m *Settings) XXX_DiscardUnknown() {
	xxx_messageInfo_Settings.DiscardUnknown(m)
}

var xxx_messageInfo_Settings proto.InternalMessageInfo

type isSettings_Settings interface {
	isSettings_Settings()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Settings_SystemSettings struct {
	SystemSettings *SystemSettings `protobuf:"bytes,5,opt,name=system_settings,json=systemSettings,proto3,oneof"`
}

func (*Settings_SystemSettings) isSettings_Settings() {}

func (m *Settings) GetSettings() isSettings_Settings {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *Settings) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Settings) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *Settings) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Settings) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *Settings) GetSystemSettings() *SystemSettings {
	if x, ok := m.GetSettings().(*Settings_SystemSettings); ok {
		return x.SystemSettings
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Settings) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Settings_SystemSettings)(nil),
	}
}

// System settings consisted of SMTP settings and another system settings to be added in the future.
type SystemSettings struct {
	SmtpSettings         *SMTPSettings `protobuf:"bytes,1,opt,name=smtp_settings,json=smtpSettings,proto3" json:"smtp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SystemSettings) Reset()         { *m = SystemSettings{} }
func (m *SystemSettings) String() string { return proto.CompactTextString(m) }
func (*SystemSettings) ProtoMessage()    {}
func (*SystemSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{2}
}
func (m *SystemSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemSettings.Merge(m, src)
}
func (m *SystemSettings) XXX_Size() int {
	return m.Size()
}
func (m *SystemSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemSettings.DiscardUnknown(m)
}

var xxx_messageInfo_SystemSettings proto.InternalMessageInfo

func (m *SystemSettings) GetSmtpSettings() *SMTPSettings {
	if m != nil {
		return m.SmtpSettings
	}
	return nil
}

// SMTPSettings
//
// Settings for SMTP client.
type SMTPSettings struct {
	// SMTP host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// SMTP port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// SMTP Username.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// SMTP Password.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Use TLS or not. Default to false.
	UseTls bool `protobuf:"varint,5,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// Authentication methods. Default to PLAIN
	Authentication SMTPAuthentication `protobuf:"varint,6,opt,name=authentication,proto3,enum=tetrateio.api.settings.v1.SMTPAuthentication" json:"authentication,omitempty"`
	// From email address.
	FromAddress          string   `protobuf:"bytes,7,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SMTPSettings) Reset()         { *m = SMTPSettings{} }
func (m *SMTPSettings) String() string { return proto.CompactTextString(m) }
func (*SMTPSettings) ProtoMessage()    {}
func (*SMTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{3}
}
func (m *SMTPSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SMTPSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SMTPSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SMTPSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMTPSettings.Merge(m, src)
}
func (m *SMTPSettings) XXX_Size() int {
	return m.Size()
}
func (m *SMTPSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SMTPSettings.DiscardUnknown(m)
}

var xxx_messageInfo_SMTPSettings proto.InternalMessageInfo

func (m *SMTPSettings) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SMTPSettings) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SMTPSettings) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SMTPSettings) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SMTPSettings) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *SMTPSettings) GetAuthentication() SMTPAuthentication {
	if m != nil {
		return m.Authentication
	}
	return SMTPAuthentication_PLAIN
}

func (m *SMTPSettings) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

type GetSettingsPolicyRequest struct {
	// Internal use only. Auto populated field.
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSettingsPolicyRequest) Reset()         { *m = GetSettingsPolicyRequest{} }
func (m *GetSettingsPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*GetSettingsPolicyRequest) ProtoMessage()    {}
func (*GetSettingsPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{4}
}
func (m *GetSettingsPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSettingsPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSettingsPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSettingsPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSettingsPolicyRequest.Merge(m, src)
}
func (m *GetSettingsPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSettingsPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSettingsPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSettingsPolicyRequest proto.InternalMessageInfo

func (m *GetSettingsPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSettingsPolicyRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *GetSettingsPolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetSettingsPolicyRequest struct {
	// Internal use only. Auto populated field.
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tenant               string     `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Id                   string     `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Policy               *v1.Policy `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SetSettingsPolicyRequest) Reset()         { *m = SetSettingsPolicyRequest{} }
func (m *SetSettingsPolicyRequest) String() string { return proto.CompactTextString(m) }
func (*SetSettingsPolicyRequest) ProtoMessage()    {}
func (*SetSettingsPolicyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b260cae963af43e6, []int{5}
}
func (m *SetSettingsPolicyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetSettingsPolicyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetSettingsPolicyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetSettingsPolicyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetSettingsPolicyRequest.Merge(m, src)
}
func (m *SetSettingsPolicyRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetSettingsPolicyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetSettingsPolicyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetSettingsPolicyRequest proto.InternalMessageInfo

func (m *SetSettingsPolicyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetSettingsPolicyRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *SetSettingsPolicyRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetSettingsPolicyRequest) GetPolicy() *v1.Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func init() {
	proto.RegisterEnum("tetrateio.api.settings.v1.SMTPAuthentication", SMTPAuthentication_name, SMTPAuthentication_value)
	proto.RegisterType((*GetSettingsRequest)(nil), "tetrateio.api.settings.v1.GetSettingsRequest")
	proto.RegisterType((*Settings)(nil), "tetrateio.api.settings.v1.Settings")
	proto.RegisterType((*SystemSettings)(nil), "tetrateio.api.settings.v1.SystemSettings")
	proto.RegisterType((*SMTPSettings)(nil), "tetrateio.api.settings.v1.SMTPSettings")
	proto.RegisterType((*GetSettingsPolicyRequest)(nil), "tetrateio.api.settings.v1.GetSettingsPolicyRequest")
	proto.RegisterType((*SetSettingsPolicyRequest)(nil), "tetrateio.api.settings.v1.SetSettingsPolicyRequest")
}

func init() { proto.RegisterFile("settings/v1/settings.proto", fileDescriptor_b260cae963af43e6) }

var fileDescriptor_b260cae963af43e6 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x4e, 0xdb, 0x4c,
	0x10, 0x66, 0x4d, 0x12, 0xc2, 0x24, 0x84, 0xb0, 0xfa, 0xf5, 0xe3, 0x9a, 0x16, 0x90, 0xa9, 0x44,
	0x48, 0x55, 0xbb, 0x49, 0x54, 0xb5, 0xa2, 0xaa, 0xaa, 0xa4, 0xad, 0x28, 0x12, 0x50, 0xe4, 0x70,
	0xea, 0xa1, 0x91, 0x93, 0x2c, 0xc9, 0x4a, 0x89, 0x6d, 0xbc, 0x9b, 0x54, 0x08, 0x71, 0xe1, 0x58,
	0xf5, 0xc6, 0x13, 0xb4, 0x6f, 0xd0, 0x5b, 0x1f, 0xa1, 0xc7, 0x4a, 0xed, 0x03, 0x54, 0xa8, 0x4f,
	0xc1, 0xa5, 0x95, 0xd7, 0x76, 0x70, 0x40, 0x40, 0x7a, 0xa0, 0x27, 0x8f, 0xe7, 0x9b, 0xd9, 0xf9,
	0xfc, 0xcd, 0x78, 0x07, 0x14, 0x46, 0x38, 0xa7, 0x56, 0x8b, 0xe9, 0xfd, 0x82, 0x1e, 0xda, 0x9a,
	0xe3, 0xda, 0xdc, 0xc6, 0xb7, 0x38, 0xe1, 0xae, 0xc9, 0x09, 0xb5, 0x35, 0xd3, 0xa1, 0xda, 0x00,
	0xed, 0x17, 0x94, 0xdb, 0x2d, 0xdb, 0x6e, 0x75, 0x88, 0x6e, 0x3a, 0x54, 0x37, 0x2d, 0xcb, 0xe6,
	0x26, 0xa7, 0xb6, 0x15, 0x24, 0x2a, 0x73, 0x01, 0x2a, 0xde, 0xea, 0xbd, 0x5d, 0x9d, 0x74, 0x1d,
	0xbe, 0x1f, 0x80, 0xb3, 0x7d, 0xb3, 0x43, 0x9b, 0x26, 0x27, 0x7a, 0x68, 0x84, 0x59, 0x7b, 0xba,
	0x5b, 0x37, 0x1b, 0x1e, 0x11, 0x87, 0xb8, 0x5d, 0xca, 0x58, 0xe4, 0xc8, 0xff, 0xce, 0x40, 0xef,
	0xe9, 0x7b, 0xd5, 0x36, 0xe0, 0x35, 0xc2, 0xab, 0x01, 0x31, 0x83, 0xec, 0xf5, 0x08, 0xe3, 0x18,
	0x43, 0xcc, 0x32, 0xbb, 0x44, 0x46, 0x8b, 0x28, 0x37, 0x69, 0x08, 0x1b, 0x2f, 0x40, 0x82, 0x13,
	0xcb, 0xb4, 0xb8, 0x2c, 0x79, 0xde, 0xca, 0xc4, 0x69, 0x25, 0xe6, 0x4a, 0x59, 0x64, 0x04, 0x6e,
	0x7c, 0x07, 0x24, 0xda, 0x94, 0xc7, 0x05, 0x38, 0x75, 0x5a, 0x01, 0x37, 0x69, 0x24, 0xd8, 0x3e,
	0xe3, 0xa4, 0x6b, 0x48, 0xb4, 0xa9, 0xfe, 0x40, 0x90, 0x0c, 0xeb, 0xdc, 0x44, 0x01, 0xef, 0x4c,
	0xc2, 0xcd, 0x96, 0x1c, 0xf3, 0xcf, 0xf4, 0x6c, 0xbc, 0x03, 0xd3, 0x7e, 0x44, 0x2d, 0xd4, 0x5e,
	0x8e, 0x2f, 0xa2, 0x5c, 0xaa, 0xb8, 0xa2, 0x5d, 0xda, 0x1a, 0xad, 0x2a, 0x32, 0x42, 0xae, 0xaf,
	0xc6, 0x8c, 0x0c, 0x1b, 0xf2, 0x54, 0x00, 0x92, 0x61, 0xbc, 0xfa, 0x16, 0x32, 0xc3, 0xf1, 0x78,
	0x03, 0xa6, 0x58, 0x97, 0x3b, 0x67, 0x15, 0x91, 0xa8, 0xb8, 0x7c, 0x55, 0xc5, 0xcd, 0x9d, 0xed,
	0x41, 0x0f, 0xd2, 0x5e, 0x76, 0xf8, 0xa6, 0x7e, 0x91, 0x20, 0x1d, 0x85, 0xf1, 0x1c, 0xc4, 0xda,
	0x36, 0xe3, 0xbe, 0x74, 0x67, 0x22, 0x09, 0xa7, 0x07, 0x3a, 0xb6, 0xeb, 0x2b, 0x38, 0x25, 0xc0,
	0xbc, 0x94, 0x1b, 0x33, 0x84, 0x13, 0x2f, 0x41, 0xb2, 0xc7, 0x88, 0x2b, 0x84, 0x1f, 0x1f, 0xce,
	0x1e, 0x00, 0x5e, 0x90, 0x63, 0x32, 0xf6, 0xce, 0x76, 0x9b, 0xbe, 0x92, 0x91, 0xa0, 0x10, 0xc0,
	0xb3, 0x30, 0xd1, 0x63, 0xa4, 0xc6, 0x3b, 0xbe, 0x9c, 0x49, 0x23, 0xd1, 0x63, 0x64, 0xa7, 0xc3,
	0x70, 0x0d, 0x32, 0x66, 0x8f, 0xb7, 0x89, 0xc5, 0x69, 0x43, 0x0c, 0xb4, 0x9c, 0x58, 0x44, 0xb9,
	0x4c, 0xf1, 0xfe, 0x35, 0x1f, 0x5f, 0x1e, 0x4a, 0xaa, 0x24, 0x4f, 0x2b, 0xf1, 0x23, 0xe4, 0xd5,
	0x3c, 0x77, 0x1c, 0xce, 0x43, 0x7a, 0xd7, 0xb5, 0xbb, 0x35, 0xb3, 0xd9, 0x74, 0x09, 0x63, 0xf2,
	0xc4, 0x30, 0xc5, 0x94, 0x07, 0x96, 0x7d, 0x4c, 0xb5, 0x40, 0x8e, 0xcc, 0xf6, 0xb6, 0xdd, 0xa1,
	0x8d, 0xfd, 0x9b, 0x9c, 0xf0, 0xcf, 0x08, 0xe4, 0xea, 0x3f, 0x2c, 0x88, 0xcb, 0x90, 0x70, 0x44,
	0x11, 0xd1, 0xa9, 0x54, 0x71, 0xe1, 0x9c, 0xca, 0x7b, 0x9a, 0xf8, 0xd3, 0xfb, 0x05, 0xcd, 0xe7,
	0x22, 0x74, 0x7d, 0x2f, 0x74, 0x0d, 0x12, 0xf3, 0x8f, 0x01, 0x5f, 0xd4, 0x1f, 0x4f, 0x42, 0x7c,
	0x7b, 0xa3, 0xbc, 0xbe, 0x95, 0x1d, 0xf3, 0xcc, 0x8d, 0xd7, 0x6b, 0xeb, 0x5b, 0x59, 0x84, 0xd3,
	0x90, 0x7c, 0x6e, 0x94, 0x37, 0x6b, 0x9b, 0x2f, 0x1e, 0x66, 0xa5, 0xe2, 0xef, 0x18, 0x4c, 0x87,
	0x9f, 0x5a, 0x25, 0x6e, 0x9f, 0x36, 0x08, 0x3e, 0x46, 0x90, 0x8a, 0x48, 0x8e, 0xaf, 0x6a, 0xfb,
	0xc5, 0x6b, 0x47, 0x59, 0xba, 0x6a, 0x4a, 0xc2, 0x1f, 0xe2, 0xc1, 0xd1, 0xe1, 0x38, 0x20, 0x74,
	0xf4, 0xfd, 0xd7, 0xb1, 0x74, 0x17, 0xab, 0xde, 0x7d, 0xe6, 0xab, 0xc5, 0xf4, 0x03, 0xdf, 0x38,
	0x1c, 0x5c, 0xc3, 0xfa, 0x01, 0x6d, 0x1e, 0xe2, 0x0f, 0x08, 0x52, 0x91, 0xbe, 0xe0, 0x51, 0xca,
	0x8c, 0xc6, 0xa5, 0x24, 0xb8, 0x48, 0x82, 0xcb, 0xb2, 0x32, 0x02, 0x97, 0x55, 0x94, 0xc7, 0x9f,
	0x10, 0xcc, 0x5c, 0x98, 0x4b, 0x5c, 0x1a, 0x4d, 0xaa, 0xa1, 0xa1, 0x52, 0xae, 0x6b, 0xb8, 0xfa,
	0x48, 0x10, 0x8c, 0x0b, 0x82, 0xf7, 0xf0, 0xca, 0xf5, 0x04, 0x75, 0x7f, 0x2e, 0xf0, 0x47, 0x04,
	0x33, 0xd5, 0xbf, 0x22, 0x79, 0xd9, 0xe4, 0x2b, 0xff, 0x6b, 0xfe, 0x32, 0xd3, 0xc2, 0x65, 0xa6,
	0xbd, 0xf4, 0x96, 0x99, 0xfa, 0x2c, 0xc2, 0xad, 0xa4, 0x8c, 0xce, 0x6d, 0x35, 0x98, 0xdd, 0xca,
	0xd3, 0xaf, 0x27, 0xf3, 0xe8, 0xdb, 0xc9, 0x3c, 0xfa, 0x79, 0x32, 0x8f, 0xde, 0xe8, 0x2d, 0xca,
	0xdb, 0xbd, 0xba, 0xd6, 0xb0, 0xbb, 0xfa, 0x80, 0xa5, 0x58, 0xaf, 0x91, 0x05, 0xfd, 0x24, 0xb4,
	0xfb, 0x85, 0x7a, 0x42, 0xf0, 0x29, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xe4, 0x40, 0x5c,
	0xc1, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SettingsServiceClient interface {
	// Get settings return settings with specified id for specific tenant.
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*Settings, error)
	// Set settings set settings with specified id for specific tenant.
	SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error)
	GetSettingsPolicy(ctx context.Context, in *GetSettingsPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error)
	SetSettingsPolicy(ctx context.Context, in *SetSettingsPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type settingsServiceClient struct {
	cc *grpc.ClientConn
}

func NewSettingsServiceClient(cc *grpc.ClientConn) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/tetrateio.api.settings.v1.SettingsService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) SetSettings(ctx context.Context, in *Settings, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/tetrateio.api.settings.v1.SettingsService/SetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetSettingsPolicy(ctx context.Context, in *GetSettingsPolicyRequest, opts ...grpc.CallOption) (*v1.Policy, error) {
	out := new(v1.Policy)
	err := c.cc.Invoke(ctx, "/tetrateio.api.settings.v1.SettingsService/GetSettingsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) SetSettingsPolicy(ctx context.Context, in *SetSettingsPolicyRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrateio.api.settings.v1.SettingsService/SetSettingsPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
type SettingsServiceServer interface {
	// Get settings return settings with specified id for specific tenant.
	GetSettings(context.Context, *GetSettingsRequest) (*Settings, error)
	// Set settings set settings with specified id for specific tenant.
	SetSettings(context.Context, *Settings) (*Settings, error)
	GetSettingsPolicy(context.Context, *GetSettingsPolicyRequest) (*v1.Policy, error)
	SetSettingsPolicy(context.Context, *SetSettingsPolicyRequest) (*types.Empty, error)
}

// UnimplementedSettingsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSettingsServiceServer struct {
}

func (*UnimplementedSettingsServiceServer) GetSettings(ctx context.Context, req *GetSettingsRequest) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (*UnimplementedSettingsServiceServer) SetSettings(ctx context.Context, req *Settings) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettings not implemented")
}
func (*UnimplementedSettingsServiceServer) GetSettingsPolicy(ctx context.Context, req *GetSettingsPolicyRequest) (*v1.Policy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingsPolicy not implemented")
}
func (*UnimplementedSettingsServiceServer) SetSettingsPolicy(ctx context.Context, req *SetSettingsPolicyRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSettingsPolicy not implemented")
}

func RegisterSettingsServiceServer(s *grpc.Server, srv SettingsServiceServer) {
	s.RegisterService(&_SettingsService_serviceDesc, srv)
}

func _SettingsService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.settings.v1.SettingsService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_SetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Settings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).SetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.settings.v1.SettingsService/SetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).SetSettings(ctx, req.(*Settings))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetSettingsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetSettingsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.settings.v1.SettingsService/GetSettingsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetSettingsPolicy(ctx, req.(*GetSettingsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_SetSettingsPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSettingsPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).SetSettingsPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrateio.api.settings.v1.SettingsService/SetSettingsPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).SetSettingsPolicy(ctx, req.(*SetSettingsPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettingsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrateio.api.settings.v1.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _SettingsService_GetSettings_Handler,
		},
		{
			MethodName: "SetSettings",
			Handler:    _SettingsService_SetSettings_Handler,
		},
		{
			MethodName: "GetSettingsPolicy",
			Handler:    _SettingsService_GetSettingsPolicy_Handler,
		},
		{
			MethodName: "SetSettingsPolicy",
			Handler:    _SettingsService_SetSettingsPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings/v1/settings.proto",
}

func (m *GetSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Settings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Settings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Settings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Settings != nil {
		{
			size := m.Settings.Size()
			i -= size
			if _, err := m.Settings.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if len(m.Etag) > 0 {
		i -= len(m.Etag)
		copy(dAtA[i:], m.Etag)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Etag)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Settings_SystemSettings) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Settings_SystemSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SystemSettings != nil {
		{
			size, err := m.SystemSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *SystemSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SmtpSettings != nil {
		{
			size, err := m.SmtpSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SMTPSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMTPSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SMTPSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Authentication != 0 {
		i = encodeVarintSettings(dAtA, i, uint64(m.Authentication))
		i--
		dAtA[i] = 0x30
	}
	if m.UseTls {
		i--
		if m.UseTls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintSettings(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSettingsPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSettingsPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSettingsPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetSettingsPolicyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetSettingsPolicyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetSettingsPolicyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSettings(dAtA []byte, offset int, v uint64) int {
	offset -= sovSettings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Etag)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Settings != nil {
		n += m.Settings.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Settings_SystemSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SystemSettings != nil {
		l = m.SystemSettings.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	return n
}
func (m *SystemSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmtpSettings != nil {
		l = m.SmtpSettings.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SMTPSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovSettings(uint64(m.Port))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.UseTls {
		n += 2
	}
	if m.Authentication != 0 {
		n += 1 + sovSettings(uint64(m.Authentication))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSettingsPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetSettingsPolicyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSettings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSettings(x uint64) (n int) {
	return sovSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Settings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Settings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Settings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Etag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SystemSettings{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Settings = &Settings_SystemSettings{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmtpSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmtpSettings == nil {
				m.SmtpSettings = &SMTPSettings{}
			}
			if err := m.SmtpSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMTPSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMTPSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMTPSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTls = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			m.Authentication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Authentication |= SMTPAuthentication(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSettingsPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSettingsPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSettingsPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetSettingsPolicyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetSettingsPolicyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetSettingsPolicyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &v1.Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSettings
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSettings
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettings   = fmt.Errorf("proto: integer overflow")
)
