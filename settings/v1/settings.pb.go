// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: settings.proto

package settingsv1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Supported SMTP Authentication.
type SMTPAuthentication int32

const (
	SMTPAuthentication_PLAIN    SMTPAuthentication = 0
	SMTPAuthentication_LOGIN    SMTPAuthentication = 1
	SMTPAuthentication_CRAM_MD5 SMTPAuthentication = 2
)

var SMTPAuthentication_name = map[int32]string{
	0: "PLAIN",
	1: "LOGIN",
	2: "CRAM_MD5",
}

var SMTPAuthentication_value = map[string]int32{
	"PLAIN":    0,
	"LOGIN":    1,
	"CRAM_MD5": 2,
}

func (x SMTPAuthentication) String() string {
	return proto.EnumName(SMTPAuthentication_name, int32(x))
}

func (SMTPAuthentication) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_6c7cab62fa432213, []int{0}
}

type GetSystemSettingsRequest struct {
	// Tenant name.
	Tenant               string   `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSystemSettingsRequest) Reset()         { *m = GetSystemSettingsRequest{} }
func (m *GetSystemSettingsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSystemSettingsRequest) ProtoMessage()    {}
func (*GetSystemSettingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7cab62fa432213, []int{0}
}
func (m *GetSystemSettingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSystemSettingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSystemSettingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSystemSettingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSystemSettingsRequest.Merge(m, src)
}
func (m *GetSystemSettingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSystemSettingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSystemSettingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSystemSettingsRequest proto.InternalMessageInfo

func (m *GetSystemSettingsRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

// System settings consisted of SMTP settings and another system settings to be added in the future.
type SystemSettings struct {
	// Tenant name.
	Tenant string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	// SMTP Settings.
	SmtpSettings         *SMTPSettings `protobuf:"bytes,3,opt,name=smtp_settings,json=smtpSettings,proto3" json:"smtp_settings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SystemSettings) Reset()         { *m = SystemSettings{} }
func (m *SystemSettings) String() string { return proto.CompactTextString(m) }
func (*SystemSettings) ProtoMessage()    {}
func (*SystemSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7cab62fa432213, []int{1}
}
func (m *SystemSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SystemSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SystemSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SystemSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemSettings.Merge(m, src)
}
func (m *SystemSettings) XXX_Size() int {
	return m.Size()
}
func (m *SystemSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemSettings.DiscardUnknown(m)
}

var xxx_messageInfo_SystemSettings proto.InternalMessageInfo

func (m *SystemSettings) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *SystemSettings) GetSmtpSettings() *SMTPSettings {
	if m != nil {
		return m.SmtpSettings
	}
	return nil
}

// SMTPSettings
//
// Settings for SMTP client.
type SMTPSettings struct {
	// SMTP host.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// SMTP port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// SMTP Username.
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	// SMTP Password.
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Use TLS or not. Default to false.
	UseTls bool `protobuf:"varint,5,opt,name=use_tls,json=useTls,proto3" json:"use_tls,omitempty"`
	// Authentication methods. Default to PLAIN
	Authentication SMTPAuthentication `protobuf:"varint,6,opt,name=authentication,proto3,enum=tetrate.api.settings.v1.SMTPAuthentication" json:"authentication,omitempty"`
	// From email address.
	FromAddress          string   `protobuf:"bytes,7,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SMTPSettings) Reset()         { *m = SMTPSettings{} }
func (m *SMTPSettings) String() string { return proto.CompactTextString(m) }
func (*SMTPSettings) ProtoMessage()    {}
func (*SMTPSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_6c7cab62fa432213, []int{2}
}
func (m *SMTPSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SMTPSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SMTPSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SMTPSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMTPSettings.Merge(m, src)
}
func (m *SMTPSettings) XXX_Size() int {
	return m.Size()
}
func (m *SMTPSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_SMTPSettings.DiscardUnknown(m)
}

var xxx_messageInfo_SMTPSettings proto.InternalMessageInfo

func (m *SMTPSettings) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SMTPSettings) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SMTPSettings) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SMTPSettings) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SMTPSettings) GetUseTls() bool {
	if m != nil {
		return m.UseTls
	}
	return false
}

func (m *SMTPSettings) GetAuthentication() SMTPAuthentication {
	if m != nil {
		return m.Authentication
	}
	return SMTPAuthentication_PLAIN
}

func (m *SMTPSettings) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("tetrate.api.settings.v1.SMTPAuthentication", SMTPAuthentication_name, SMTPAuthentication_value)
	proto.RegisterType((*GetSystemSettingsRequest)(nil), "tetrate.api.settings.v1.GetSystemSettingsRequest")
	proto.RegisterType((*SystemSettings)(nil), "tetrate.api.settings.v1.SystemSettings")
	proto.RegisterType((*SMTPSettings)(nil), "tetrate.api.settings.v1.SMTPSettings")
}

func init() { proto.RegisterFile("settings.proto", fileDescriptor_6c7cab62fa432213) }

var fileDescriptor_6c7cab62fa432213 = []byte{
	// 550 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6f, 0x12, 0x41,
	0x14, 0xc7, 0x3b, 0x5b, 0xa0, 0x30, 0xa5, 0x48, 0xe7, 0x20, 0x1b, 0x54, 0x82, 0xc4, 0xea, 0x8a,
	0xcd, 0x4e, 0xc0, 0x18, 0x8d, 0xc6, 0x03, 0x68, 0xd3, 0xd4, 0x94, 0xda, 0x40, 0x4f, 0x5e, 0x36,
	0x03, 0x4c, 0x61, 0x13, 0x76, 0x67, 0xdd, 0x79, 0xbb, 0xa6, 0x31, 0xc6, 0xa4, 0x89, 0x7f, 0x81,
	0x67, 0xff, 0x10, 0x3d, 0x19, 0x4f, 0x1e, 0x4d, 0xfc, 0x07, 0x0c, 0xf1, 0xe2, 0x7f, 0x61, 0xf6,
	0x17, 0x91, 0x22, 0x0d, 0xb7, 0xb7, 0xf3, 0x99, 0xef, 0x7b, 0xdf, 0x79, 0xfb, 0x1e, 0x2e, 0x48,
	0x0e, 0x60, 0xda, 0x23, 0xa9, 0x3b, 0xae, 0x00, 0x41, 0x4a, 0xc0, 0xc1, 0x65, 0xc0, 0x75, 0xe6,
	0x98, 0xfa, 0x8c, 0xf9, 0x8d, 0xf2, 0xf5, 0x91, 0x10, 0xa3, 0x09, 0xa7, 0xcc, 0x31, 0x29, 0xb3,
	0x6d, 0x01, 0x0c, 0x4c, 0x61, 0xc7, 0xb2, 0xf2, 0xb5, 0x98, 0x86, 0x5f, 0x7d, 0xef, 0x94, 0x72,
	0xcb, 0x81, 0xb3, 0x18, 0x96, 0x7c, 0x36, 0x31, 0x87, 0x0c, 0x38, 0x4d, 0x82, 0x08, 0xd4, 0x9e,
	0x62, 0x75, 0x9f, 0x43, 0xef, 0x4c, 0x02, 0xb7, 0x7a, 0x71, 0xad, 0x2e, 0x7f, 0xed, 0x71, 0x09,
	0xe4, 0x26, 0xce, 0x00, 0xb7, 0x99, 0x0d, 0x2a, 0xaa, 0x22, 0x2d, 0xd7, 0xce, 0x7d, 0xf9, 0xf3,
	0x75, 0x3d, 0xe5, 0x2a, 0x45, 0xd4, 0x8d, 0x41, 0xed, 0x3d, 0x2e, 0xcc, 0x6b, 0x57, 0x10, 0x91,
	0x17, 0x78, 0x4b, 0x5a, 0xe0, 0x18, 0xc9, 0xdb, 0xd4, 0xf5, 0x2a, 0xd2, 0x36, 0x9b, 0x3b, 0xfa,
	0x92, 0x87, 0xeb, 0xbd, 0xce, 0xc9, 0xf1, 0xcc, 0x5c, 0x3e, 0xd0, 0x26, 0x5f, 0xb5, 0x6f, 0x0a,
	0xce, 0xff, 0x8b, 0xc9, 0x0d, 0x9c, 0x1a, 0x0b, 0xf9, 0x9f, 0xea, 0xe1, 0x71, 0x80, 0x1d, 0xe1,
	0x82, 0xaa, 0x54, 0x91, 0xb6, 0x15, 0xe3, 0xba, 0xa2, 0xad, 0x75, 0xc3, 0x63, 0xb2, 0x83, 0xb3,
	0x9e, 0xe4, 0xae, 0xcd, 0x2c, 0x1e, 0xba, 0x9a, 0xcb, 0x30, 0x43, 0xc1, 0x35, 0x87, 0x49, 0xf9,
	0x46, 0xb8, 0x43, 0x35, 0xb5, 0x70, 0x2d, 0x41, 0xa4, 0x84, 0x37, 0x3c, 0xc9, 0x0d, 0x98, 0x48,
	0x35, 0x5d, 0x45, 0x5a, 0xb6, 0x9b, 0xf1, 0x24, 0x3f, 0x99, 0x48, 0x62, 0xe0, 0x02, 0xf3, 0x60,
	0xcc, 0x6d, 0x30, 0x07, 0xe1, 0x4f, 0x54, 0x33, 0x55, 0xa4, 0x15, 0x9a, 0xf7, 0x2e, 0x6d, 0x41,
	0x6b, 0x4e, 0xd2, 0xc6, 0x41, 0xc9, 0xf4, 0x39, 0x0a, 0x6a, 0x5e, 0x48, 0x47, 0x76, 0x71, 0xfe,
	0xd4, 0x15, 0x96, 0xc1, 0x86, 0x43, 0x97, 0x4b, 0xa9, 0x6e, 0x5c, 0x34, 0xb9, 0x19, 0xe0, 0x56,
	0x44, 0xeb, 0x8f, 0x30, 0x59, 0xcc, 0x4f, 0x72, 0x38, 0x7d, 0x7c, 0xd8, 0x3a, 0x38, 0x2a, 0xae,
	0x05, 0xe1, 0xe1, 0xcb, 0xfd, 0x83, 0xa3, 0x22, 0x22, 0x79, 0x9c, 0x7d, 0xd6, 0x6d, 0x75, 0x8c,
	0xce, 0xf3, 0x07, 0x45, 0xa5, 0xf9, 0x59, 0xc1, 0x57, 0x92, 0xd6, 0xf7, 0xb8, 0xeb, 0x9b, 0x03,
	0x4e, 0x3e, 0x21, 0xbc, 0xbd, 0x30, 0x53, 0xa4, 0xb1, 0xf4, 0x69, 0xcb, 0xe6, 0xaf, 0x7c, 0x67,
	0x79, 0x37, 0xe6, 0xee, 0xd7, 0x76, 0xcf, 0x7f, 0xfe, 0xfe, 0xa8, 0xdc, 0x26, 0xb7, 0xa8, 0xdf,
	0xa0, 0xd1, 0x90, 0x49, 0xfa, 0x36, 0x0a, 0xde, 0xd1, 0x44, 0x48, 0x65, 0xa8, 0x22, 0x1f, 0x10,
	0xde, 0xee, 0x2d, 0xf8, 0x5b, 0xb5, 0x58, 0xf9, 0xaa, 0x1e, 0x2d, 0x9a, 0x9e, 0x2c, 0x9a, 0xbe,
	0x17, 0x2c, 0x5a, 0x8d, 0x86, 0x26, 0xee, 0x96, 0x57, 0x32, 0xf1, 0x18, 0xd5, 0xdb, 0x7b, 0xdf,
	0xa7, 0x15, 0xf4, 0x63, 0x5a, 0x41, 0xbf, 0xa6, 0x15, 0xf4, 0xea, 0xe1, 0xc8, 0x84, 0xb1, 0xd7,
	0xd7, 0x07, 0xc2, 0xa2, 0xb1, 0x13, 0x53, 0x24, 0x51, 0xb8, 0xf2, 0xb3, 0x14, 0x7e, 0xe3, 0x49,
	0x12, 0xfb, 0x8d, 0x7e, 0x26, 0xf4, 0x71, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x7e,
	0x9c, 0x65, 0x47, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SettingsServiceClient interface {
	// Get system settings return system settings for specific tenant.
	GetSystemSettings(ctx context.Context, in *GetSystemSettingsRequest, opts ...grpc.CallOption) (*SystemSettings, error)
	// Set system settings set system settings for specific tenant.
	SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*types.Empty, error)
}

type settingsServiceClient struct {
	cc *grpc.ClientConn
}

func NewSettingsServiceClient(cc *grpc.ClientConn) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) GetSystemSettings(ctx context.Context, in *GetSystemSettingsRequest, opts ...grpc.CallOption) (*SystemSettings, error) {
	out := new(SystemSettings)
	err := c.cc.Invoke(ctx, "/tetrate.api.settings.v1.SettingsService/GetSystemSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) SetSystemSettings(ctx context.Context, in *SystemSettings, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/tetrate.api.settings.v1.SettingsService/SetSystemSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
type SettingsServiceServer interface {
	// Get system settings return system settings for specific tenant.
	GetSystemSettings(context.Context, *GetSystemSettingsRequest) (*SystemSettings, error)
	// Set system settings set system settings for specific tenant.
	SetSystemSettings(context.Context, *SystemSettings) (*types.Empty, error)
}

// UnimplementedSettingsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSettingsServiceServer struct {
}

func (*UnimplementedSettingsServiceServer) GetSystemSettings(ctx context.Context, req *GetSystemSettingsRequest) (*SystemSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemSettings not implemented")
}
func (*UnimplementedSettingsServiceServer) SetSystemSettings(ctx context.Context, req *SystemSettings) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemSettings not implemented")
}

func RegisterSettingsServiceServer(s *grpc.Server, srv SettingsServiceServer) {
	s.RegisterService(&_SettingsService_serviceDesc, srv)
}

func _SettingsService_GetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.settings.v1.SettingsService/GetSystemSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetSystemSettings(ctx, req.(*GetSystemSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_SetSystemSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).SetSystemSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tetrate.api.settings.v1.SettingsService/SetSystemSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).SetSystemSettings(ctx, req.(*SystemSettings))
	}
	return interceptor(ctx, in, info, handler)
}

var _SettingsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tetrate.api.settings.v1.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemSettings",
			Handler:    _SettingsService_GetSystemSettings_Handler,
		},
		{
			MethodName: "SetSystemSettings",
			Handler:    _SettingsService_SetSystemSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "settings.proto",
}

func (m *GetSystemSettingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSystemSettingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSystemSettingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SystemSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SystemSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SystemSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SmtpSettings != nil {
		{
			size, err := m.SmtpSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSettings(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SMTPSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SMTPSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SMTPSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Authentication != 0 {
		i = encodeVarintSettings(dAtA, i, uint64(m.Authentication))
		i--
		dAtA[i] = 0x30
	}
	if m.UseTls {
		i--
		if m.UseTls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Port != 0 {
		i = encodeVarintSettings(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintSettings(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSettings(dAtA []byte, offset int, v uint64) int {
	offset -= sovSettings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSystemSettingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SystemSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.SmtpSettings != nil {
		l = m.SmtpSettings.Size()
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SMTPSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovSettings(uint64(m.Port))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.UseTls {
		n += 2
	}
	if m.Authentication != 0 {
		n += 1 + sovSettings(uint64(m.Authentication))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovSettings(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSettings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSettings(x uint64) (n int) {
	return sovSettings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSystemSettingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSystemSettingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSystemSettingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SystemSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SystemSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SystemSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmtpSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmtpSettings == nil {
				m.SmtpSettings = &SMTPSettings{}
			}
			if err := m.SmtpSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SMTPSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SMTPSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SMTPSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseTls = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authentication", wireType)
			}
			m.Authentication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Authentication |= SMTPAuthentication(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSettings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSettings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSettings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSettings
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSettings
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSettings
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSettings(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSettings
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSettings = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettings   = fmt.Errorf("proto: integer overflow")
)
