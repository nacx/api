// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: settings.proto

package settingsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetSettingsRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _GetSettingsRequest_Id_InLookup[m.GetId()]; !ok {
		return GetSettingsRequestValidationError{
			field:  "Id",
			reason: "value must be in list [system]",
		}
	}

	return nil
}

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

var _GetSettingsRequest_Id_InLookup = map[string]struct{}{
	"system": {},
}

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Settings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return SettingsValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _Settings_Id_InLookup[m.GetId()]; !ok {
		return SettingsValidationError{
			field:  "Id",
			reason: "value must be in list [system]",
		}
	}

	// no validation rules for Etag

	switch m.Settings.(type) {

	case *Settings_SystemSettings:

		{
			tmp := m.GetSystemSettings()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return SettingsValidationError{
						field:  "SystemSettings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

var _Settings_Id_InLookup = map[string]struct{}{
	"system": {},
}

// Validate checks the field values on SystemSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SystemSettings) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetSmtpSettings()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SystemSettingsValidationError{
					field:  "SmtpSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SystemSettingsValidationError is the validation error returned by
// SystemSettings.Validate if the designated constraints aren't met.
type SystemSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemSettingsValidationError) ErrorName() string { return "SystemSettingsValidationError" }

// Error satisfies the builtin error interface
func (e SystemSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemSettingsValidationError{}

// Validate checks the field values on SMTPSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SMTPSettings) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetHost()) < 1 {
		return SMTPSettingsValidationError{
			field:  "Host",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPort() < 0 {
		return SMTPSettingsValidationError{
			field:  "Port",
			reason: "value must be greater than or equal to 0",
		}
	}

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		return SMTPSettingsValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		return SMTPSettingsValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for UseTls

	if _, ok := SMTPAuthentication_name[int32(m.GetAuthentication())]; !ok {
		return SMTPSettingsValidationError{
			field:  "Authentication",
			reason: "value must be one of the defined enum values",
		}
	}

	if utf8.RuneCountInString(m.GetFromAddress()) < 1 {
		return SMTPSettingsValidationError{
			field:  "FromAddress",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// SMTPSettingsValidationError is the validation error returned by
// SMTPSettings.Validate if the designated constraints aren't met.
type SMTPSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SMTPSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SMTPSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SMTPSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SMTPSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SMTPSettingsValidationError) ErrorName() string { return "SMTPSettingsValidationError" }

// Error satisfies the builtin error interface
func (e SMTPSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSMTPSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SMTPSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SMTPSettingsValidationError{}

// Validate checks the field values on GetSettingsPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSettingsPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return GetSettingsPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _GetSettingsPolicyRequest_Id_InLookup[m.GetId()]; !ok {
		return GetSettingsPolicyRequestValidationError{
			field:  "Id",
			reason: "value must be in list [system]",
		}
	}

	return nil
}

// GetSettingsPolicyRequestValidationError is the validation error returned by
// GetSettingsPolicyRequest.Validate if the designated constraints aren't met.
type GetSettingsPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsPolicyRequestValidationError) ErrorName() string {
	return "GetSettingsPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsPolicyRequestValidationError{}

var _GetSettingsPolicyRequest_Id_InLookup = map[string]struct{}{
	"system": {},
}

// Validate checks the field values on SetSettingsPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetSettingsPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if utf8.RuneCountInString(m.GetTenant()) < 1 {
		return SetSettingsPolicyRequestValidationError{
			field:  "Tenant",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _SetSettingsPolicyRequest_Id_InLookup[m.GetId()]; !ok {
		return SetSettingsPolicyRequestValidationError{
			field:  "Id",
			reason: "value must be in list [system]",
		}
	}

	if m.GetPolicy() == nil {
		return SetSettingsPolicyRequestValidationError{
			field:  "Policy",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetPolicy()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return SetSettingsPolicyRequestValidationError{
					field:  "Policy",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// SetSettingsPolicyRequestValidationError is the validation error returned by
// SetSettingsPolicyRequest.Validate if the designated constraints aren't met.
type SetSettingsPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSettingsPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSettingsPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSettingsPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSettingsPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSettingsPolicyRequestValidationError) ErrorName() string {
	return "SetSettingsPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSettingsPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSettingsPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSettingsPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSettingsPolicyRequestValidationError{}

var _SetSettingsPolicyRequest_Id_InLookup = map[string]struct{}{
	"system": {},
}
